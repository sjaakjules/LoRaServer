
c:/Users/Gladys/Documents/Repos/Particles/LoRa_Test2/Server/target/2.1.0/photon/Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004260  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a4280  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a4284  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00008164  20000078  20000078  00040078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a42f8  080a42f8  000342f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4320  080a4320  00034320  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00196738  00000000  00000000  00034324  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bc12  00000000  00000000  001caa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001e6d8  00000000  00000000  001e666e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002640  00000000  00000000  00204d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005f00  00000000  00000000  00207386  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000315e4  00000000  00000000  0020d286  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003c9c0  00000000  00000000  0023e86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b9271  00000000  00000000  0027b22a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006284  00000000  00000000  0033449c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fdd7 	bl	80a3be4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fdf9 	bl	80a3c34 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4284 	.word	0x080a4284
 80a0050:	20000074 	.word	0x20000074
 80a0054:	20000078 	.word	0x20000078
 80a0058:	200081dc 	.word	0x200081dc
 80a005c:	200081dc 	.word	0x200081dc

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 f9b5 	bl	80a23d0 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a4254 	.word	0x080a4254
 80a0084:	080a4278 	.word	0x080a4278

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb42 	b.w	80a0710 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fd37 	bl	80a0b00 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f002 b95d 	b.w	80a2354 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 bcad 	b.w	80a19f8 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 bcab 	b.w	80a19f8 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 bcb1 	b.w	80a1a08 <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f001 fbc6 	bl	80a1840 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a150d 	.word	0x080a150d

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_Z12updateSenderv>:

void updateSender()
{
  //if(readyToSend)
  //Serial.println("Ready to send heartbeat");
  readyToSend = true;
 80a00cc:	2201      	movs	r2, #1
 80a00ce:	4b01      	ldr	r3, [pc, #4]	; (80a00d4 <_Z12updateSenderv+0x8>)
 80a00d0:	701a      	strb	r2, [r3, #0]
}
 80a00d2:	4770      	bx	lr
 80a00d4:	20007b74 	.word	0x20007b74

080a00d8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00d8:	6803      	ldr	r3, [r0, #0]
 80a00da:	4718      	bx	r3

080a00dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 80a00dc:	2a01      	cmp	r2, #1
 80a00de:	d003      	beq.n	80a00e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 80a00e0:	2a02      	cmp	r2, #2
 80a00e2:	d003      	beq.n	80a00ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 80a00e4:	2000      	movs	r0, #0
 80a00e6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00e8:	6001      	str	r1, [r0, #0]
	      break;
 80a00ea:	e7fb      	b.n	80a00e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00ec:	680b      	ldr	r3, [r1, #0]
 80a00ee:	6003      	str	r3, [r0, #0]
	}
 80a00f0:	e7f8      	b.n	80a00e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>

080a00f2 <_ZN12SerialBufferILj1024EED1Ev>:
 *
 * The buffered serial class creates a thread to read from the serial port, eliminating problems with
 * dropping data
 */
template <size_t SIZE>
class SerialBuffer : public SerialBufferBase {
 80a00f2:	4770      	bx	lr

080a00f4 <__tcf_0>:
String messageQue[queLength];
 80a00f4:	b538      	push	{r3, r4, r5, lr}
 80a00f6:	2404      	movs	r4, #4
 80a00f8:	4d03      	ldr	r5, [pc, #12]	; (80a0108 <__tcf_0+0x14>)
 80a00fa:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80a00fe:	f001 fdbe 	bl	80a1c7e <_ZN6StringD1Ev>
 80a0102:	3c01      	subs	r4, #1
 80a0104:	d2f9      	bcs.n	80a00fa <__tcf_0+0x6>
 80a0106:	bd38      	pop	{r3, r4, r5, pc}
 80a0108:	20007b20 	.word	0x20007b20

080a010c <_ZN12SerialBufferILj1024EED0Ev>:
 80a010c:	b510      	push	{r4, lr}
 80a010e:	4604      	mov	r4, r0
 80a0110:	f44f 6186 	mov.w	r1, #1072	; 0x430
 80a0114:	f002 ffed 	bl	80a30f2 <_ZdlPvj>
 80a0118:	4620      	mov	r0, r4
 80a011a:	bd10      	pop	{r4, pc}

080a011c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80a011c:	6943      	ldr	r3, [r0, #20]
 80a011e:	b113      	cbz	r3, 80a0126 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0120:	6983      	ldr	r3, [r0, #24]
 80a0122:	300c      	adds	r0, #12
 80a0124:	4718      	bx	r3
            callback();
        }
    }
 80a0126:	4770      	bx	lr

080a0128 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a0128:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a012a:	2100      	movs	r1, #0
 80a012c:	4604      	mov	r4, r0
 80a012e:	4608      	mov	r0, r1
 80a0130:	f001 fa2c 	bl	80a158c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a0134:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80a0136:	4620      	mov	r0, r4
 80a0138:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80a013a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80a013c:	f001 fa3e 	bl	80a15bc <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80a0140:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80a0142:	b10c      	cbz	r4, 80a0148 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80a0144:	2301      	movs	r3, #1
 80a0146:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a0148:	2100      	movs	r1, #0
 80a014a:	2001      	movs	r0, #1
 80a014c:	f001 fa1e 	bl	80a158c <os_thread_scheduling>
            }
        }
        if (t) {
 80a0150:	b12c      	cbz	r4, 80a015e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80a0152:	6823      	ldr	r3, [r4, #0]
 80a0154:	4620      	mov	r0, r4
 80a0156:	689b      	ldr	r3, [r3, #8]
 80a0158:	4798      	blx	r3
            t->running = false;
 80a015a:	2300      	movs	r3, #0
 80a015c:	7123      	strb	r3, [r4, #4]
        }
    }
 80a015e:	b002      	add	sp, #8
 80a0160:	bd10      	pop	{r4, pc}

080a0162 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0162:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0164:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0166:	4604      	mov	r4, r0
      if (_M_manager)
 80a0168:	b113      	cbz	r3, 80a0170 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a016a:	2203      	movs	r2, #3
 80a016c:	4601      	mov	r1, r0
 80a016e:	4798      	blx	r3
    }
 80a0170:	4620      	mov	r0, r4
 80a0172:	bd10      	pop	{r4, pc}

080a0174 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
 80a0174:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0176:	6880      	ldr	r0, [r0, #8]
 80a0178:	2300      	movs	r3, #0
 80a017a:	b138      	cbz	r0, 80a018c <_ZN5Timer5_stopEjb+0x18>
 80a017c:	e9cd 1300 	strd	r1, r3, [sp]
 80a0180:	2102      	movs	r1, #2
 80a0182:	f001 fa23 	bl	80a15cc <os_timer_change>
 80a0186:	fab0 f080 	clz	r0, r0
 80a018a:	0940      	lsrs	r0, r0, #5
    }
 80a018c:	b003      	add	sp, #12
 80a018e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0194 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 80a0194:	b538      	push	{r3, r4, r5, lr}
 80a0196:	4b10      	ldr	r3, [pc, #64]	; (80a01d8 <_ZN5TimerD1Ev+0x44>)
 80a0198:	4604      	mov	r4, r0
 80a019a:	6003      	str	r3, [r0, #0]
        if (handle) {
 80a019c:	6883      	ldr	r3, [r0, #8]
 80a019e:	b1a3      	cbz	r3, 80a01ca <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a01a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a01a4:	2200      	movs	r2, #0
 80a01a6:	f7ff ffe5 	bl	80a0174 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
 80a01aa:	2100      	movs	r1, #0
 80a01ac:	68a0      	ldr	r0, [r4, #8]
 80a01ae:	f001 fa35 	bl	80a161c <os_timer_set_id>
            while (running) {
 80a01b2:	7923      	ldrb	r3, [r4, #4]
 80a01b4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a01b8:	b113      	cbz	r3, 80a01c0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80a01ba:	f001 f9df 	bl	80a157c <os_thread_yield>
            while (running) {
 80a01be:	e7f8      	b.n	80a01b2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
 80a01c0:	4629      	mov	r1, r5
 80a01c2:	68a0      	ldr	r0, [r4, #8]
 80a01c4:	f001 f9f2 	bl	80a15ac <os_timer_destroy>
            handle = nullptr;
 80a01c8:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 80a01ca:	f104 000c 	add.w	r0, r4, #12
 80a01ce:	f7ff ffc8 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
    }
 80a01d2:	4620      	mov	r0, r4
 80a01d4:	bd38      	pop	{r3, r4, r5, pc}
 80a01d6:	bf00      	nop
 80a01d8:	080a3f00 	.word	0x080a3f00

080a01dc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 80a01dc:	b510      	push	{r4, lr}
 80a01de:	4604      	mov	r4, r0
    }
 80a01e0:	f7ff ffd8 	bl	80a0194 <_ZN5TimerD1Ev>
 80a01e4:	4620      	mov	r0, r4
 80a01e6:	211c      	movs	r1, #28
 80a01e8:	f002 ff83 	bl	80a30f2 <_ZdlPvj>
 80a01ec:	4620      	mov	r0, r4
 80a01ee:	bd10      	pop	{r4, pc}

080a01f0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a01f0:	b40e      	push	{r1, r2, r3}
 80a01f2:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a01f4:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a01f6:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a01f8:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a01fa:	b08d      	sub	sp, #52	; 0x34
 80a01fc:	aa0f      	add	r2, sp, #60	; 0x3c
 80a01fe:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a0202:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0206:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a020a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a020c:	201e      	movs	r0, #30
 80a020e:	aa04      	add	r2, sp, #16
 80a0210:	f001 fb1e 	bl	80a1850 <log_message_v>
}
 80a0214:	b00d      	add	sp, #52	; 0x34
 80a0216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a021a:	b003      	add	sp, #12
 80a021c:	4770      	bx	lr
	...

080a0220 <_Z11TryGetPhotov>:
  // Try get messages.
  TryGetMessages();
}

void TryGetPhoto()
{
 80a0220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0224:	b089      	sub	sp, #36	; 0x24
  if ((Time.now() - lastPhoto) > int(minForPhoto * 60))
 80a0226:	f002 f81d 	bl	80a2264 <_ZN9TimeClass3nowEv>
 80a022a:	4e47      	ldr	r6, [pc, #284]	; (80a0348 <_Z11TryGetPhotov+0x128>)
 80a022c:	17c1      	asrs	r1, r0, #31
 80a022e:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a0232:	1ac4      	subs	r4, r0, r3
 80a0234:	4b45      	ldr	r3, [pc, #276]	; (80a034c <_Z11TryGetPhotov+0x12c>)
 80a0236:	eb61 0502 	sbc.w	r5, r1, r2
 80a023a:	6818      	ldr	r0, [r3, #0]
 80a023c:	4944      	ldr	r1, [pc, #272]	; (80a0350 <_Z11TryGetPhotov+0x130>)
 80a023e:	f003 fb4d 	bl	80a38dc <__aeabi_fmul>
 80a0242:	f003 fc9b 	bl	80a3b7c <__aeabi_f2iz>
 80a0246:	17c1      	asrs	r1, r0, #31
 80a0248:	42a0      	cmp	r0, r4
 80a024a:	eb71 0305 	sbcs.w	r3, r1, r5
 80a024e:	da22      	bge.n	80a0296 <_Z11TryGetPhotov+0x76>
  {
    pinMode(turnOnPin, OUTPUT);
 80a0250:	4c40      	ldr	r4, [pc, #256]	; (80a0354 <_Z11TryGetPhotov+0x134>)
 80a0252:	2101      	movs	r1, #1
 80a0254:	8820      	ldrh	r0, [r4, #0]
 80a0256:	f002 fec5 	bl	80a2fe4 <pinMode>
    delay(100);
 80a025a:	2064      	movs	r0, #100	; 0x64
 80a025c:	f002 f81c 	bl	80a2298 <delay>
    digitalWrite(turnOnPin, LOW);
 80a0260:	2100      	movs	r1, #0
 80a0262:	8820      	ldrh	r0, [r4, #0]
 80a0264:	f002 fecf 	bl	80a3006 <digitalWrite>
    delay(1000);
 80a0268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a026c:	f002 f814 	bl	80a2298 <delay>
    pinMode(turnOnPin, INPUT);
 80a0270:	2100      	movs	r1, #0
 80a0272:	8820      	ldrh	r0, [r4, #0]
 80a0274:	f002 feb6 	bl	80a2fe4 <pinMode>
    delay(100);
 80a0278:	2064      	movs	r0, #100	; 0x64
 80a027a:	f002 f80d 	bl	80a2298 <delay>
    pinMode(turnOnPin, PIN_MODE_NONE);
 80a027e:	21ff      	movs	r1, #255	; 0xff
 80a0280:	8820      	ldrh	r0, [r4, #0]
 80a0282:	f002 feaf 	bl	80a2fe4 <pinMode>
    delay(100);
 80a0286:	2064      	movs	r0, #100	; 0x64
 80a0288:	f002 f806 	bl	80a2298 <delay>
    // delay and get tx data from serial.
    lastPhoto = Time.now();
 80a028c:	f001 ffea 	bl	80a2264 <_ZN9TimeClass3nowEv>
 80a0290:	17c1      	asrs	r1, r0, #31
 80a0292:	e9c6 0100 	strd	r0, r1, [r6]
  }
  while (true)
  {
    int8_t c = serBuf.read();
 80a0296:	4f30      	ldr	r7, [pc, #192]	; (80a0358 <_Z11TryGetPhotov+0x138>)
 80a0298:	4c30      	ldr	r4, [pc, #192]	; (80a035c <_Z11TryGetPhotov+0x13c>)
          imgIndex = 0;
          haveImage = true;
        }
      break;
    }
    if (!haveImage)
 80a029a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80a0370 <_Z11TryGetPhotov+0x150>
    int8_t c = serBuf.read();
 80a029e:	4638      	mov	r0, r7
 80a02a0:	f001 f88e 	bl	80a13c0 <_ZN16SerialBufferBase4readEv>
 80a02a4:	fa4f f980 	sxtb.w	r9, r0
    if (c < 0)
 80a02a8:	f1b9 0f00 	cmp.w	r9, #0
    int8_t c = serBuf.read();
 80a02ac:	4605      	mov	r5, r0
    if (c < 0)
 80a02ae:	da26      	bge.n	80a02fe <_Z11TryGetPhotov+0xde>
      if(totalReceived>0)
 80a02b0:	6823      	ldr	r3, [r4, #0]
 80a02b2:	2b00      	cmp	r3, #0
 80a02b4:	dd20      	ble.n	80a02f8 <_Z11TryGetPhotov+0xd8>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a02b6:	492a      	ldr	r1, [pc, #168]	; (80a0360 <_Z11TryGetPhotov+0x140>)
 80a02b8:	a804      	add	r0, sp, #16
 80a02ba:	f001 fd2a 	bl	80a1d12 <_ZN6StringC1EPKc>
          Log.info("Recieved image " + String(totalReceived) + " bytes large./n");
 80a02be:	220a      	movs	r2, #10
 80a02c0:	6821      	ldr	r1, [r4, #0]
 80a02c2:	4668      	mov	r0, sp
 80a02c4:	f001 fd9a 	bl	80a1dfc <_ZN6StringC1Eih>
 80a02c8:	4669      	mov	r1, sp
 80a02ca:	a804      	add	r0, sp, #16
 80a02cc:	f001 fde0 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a02d0:	4924      	ldr	r1, [pc, #144]	; (80a0364 <_Z11TryGetPhotov+0x144>)
 80a02d2:	f001 fde9 	bl	80a1ea8 <_ZplRK15StringSumHelperPKc>
 80a02d6:	6801      	ldr	r1, [r0, #0]
 80a02d8:	4823      	ldr	r0, [pc, #140]	; (80a0368 <_Z11TryGetPhotov+0x148>)
 80a02da:	f7ff ff89 	bl	80a01f0 <_ZNK5spark6Logger4infoEPKcz>
 80a02de:	4668      	mov	r0, sp
 80a02e0:	f001 fccd 	bl	80a1c7e <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a02e4:	a804      	add	r0, sp, #16
 80a02e6:	f001 fcca 	bl	80a1c7e <_ZN6StringD1Ev>
          totalReceived = 0;
 80a02ea:	2300      	movs	r3, #0
          imgIndex = 0;
 80a02ec:	4a1f      	ldr	r2, [pc, #124]	; (80a036c <_Z11TryGetPhotov+0x14c>)
          totalReceived = 0;
 80a02ee:	6023      	str	r3, [r4, #0]
          imgIndex = 0;
 80a02f0:	6013      	str	r3, [r2, #0]
          haveImage = true;
 80a02f2:	2201      	movs	r2, #1
 80a02f4:	4b1e      	ldr	r3, [pc, #120]	; (80a0370 <_Z11TryGetPhotov+0x150>)
 80a02f6:	701a      	strb	r2, [r3, #0]
      Serial.print("Recieved byte " + String(c));
      lastImage[imgIndex] = c;      
    }
    totalReceived++;
  }
}
 80a02f8:	b009      	add	sp, #36	; 0x24
 80a02fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!haveImage)
 80a02fe:	f898 3000 	ldrb.w	r3, [r8]
 80a0302:	b9eb      	cbnz	r3, 80a0340 <_Z11TryGetPhotov+0x120>
      Serial.print("Recieved byte " + String(c));
 80a0304:	f002 fbf2 	bl	80a2aec <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0308:	491a      	ldr	r1, [pc, #104]	; (80a0374 <_Z11TryGetPhotov+0x154>)
 80a030a:	4606      	mov	r6, r0
 80a030c:	a804      	add	r0, sp, #16
 80a030e:	f001 fd00 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a0312:	220a      	movs	r2, #10
 80a0314:	4649      	mov	r1, r9
 80a0316:	4668      	mov	r0, sp
 80a0318:	f001 fd70 	bl	80a1dfc <_ZN6StringC1Eih>
 80a031c:	4669      	mov	r1, sp
 80a031e:	a804      	add	r0, sp, #16
 80a0320:	f001 fdb6 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a0324:	6801      	ldr	r1, [r0, #0]
 80a0326:	4630      	mov	r0, r6
 80a0328:	f001 ff0d 	bl	80a2146 <_ZN5Print5printEPKc>
 80a032c:	4668      	mov	r0, sp
 80a032e:	f001 fca6 	bl	80a1c7e <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0332:	a804      	add	r0, sp, #16
 80a0334:	f001 fca3 	bl	80a1c7e <_ZN6StringD1Ev>
      lastImage[imgIndex] = c;      
 80a0338:	4b0c      	ldr	r3, [pc, #48]	; (80a036c <_Z11TryGetPhotov+0x14c>)
 80a033a:	4a0f      	ldr	r2, [pc, #60]	; (80a0378 <_Z11TryGetPhotov+0x158>)
 80a033c:	681b      	ldr	r3, [r3, #0]
 80a033e:	54d5      	strb	r5, [r2, r3]
    totalReceived++;
 80a0340:	6823      	ldr	r3, [r4, #0]
 80a0342:	3301      	adds	r3, #1
 80a0344:	6023      	str	r3, [r4, #0]
  }
 80a0346:	e7aa      	b.n	80a029e <_Z11TryGetPhotov+0x7e>
 80a0348:	20007b10 	.word	0x20007b10
 80a034c:	20000008 	.word	0x20000008
 80a0350:	42700000 	.word	0x42700000
 80a0354:	200080ec 	.word	0x200080ec
 80a0358:	20007c9c 	.word	0x20007c9c
 80a035c:	200080e8 	.word	0x200080e8
 80a0360:	080a3d4c 	.word	0x080a3d4c
 80a0364:	080a3d5c 	.word	0x080a3d5c
 80a0368:	20008128 	.word	0x20008128
 80a036c:	200000ac 	.word	0x200000ac
 80a0370:	2000009d 	.word	0x2000009d
 80a0374:	080a3d6c 	.word	0x080a3d6c
 80a0378:	2000030d 	.word	0x2000030d

080a037c <_Z12TrySendImagev>:

void TrySendImage(){
 80a037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (readyToSend && haveSentall&& haveImage)
 80a0380:	4b3d      	ldr	r3, [pc, #244]	; (80a0478 <_Z12TrySendImagev+0xfc>)
void TrySendImage(){
 80a0382:	b090      	sub	sp, #64	; 0x40
  if (readyToSend && haveSentall&& haveImage)
 80a0384:	781b      	ldrb	r3, [r3, #0]
 80a0386:	2b00      	cmp	r3, #0
 80a0388:	d06a      	beq.n	80a0460 <_Z12TrySendImagev+0xe4>
 80a038a:	4b3c      	ldr	r3, [pc, #240]	; (80a047c <_Z12TrySendImagev+0x100>)
 80a038c:	781b      	ldrb	r3, [r3, #0]
 80a038e:	2b00      	cmp	r3, #0
 80a0390:	d066      	beq.n	80a0460 <_Z12TrySendImagev+0xe4>
 80a0392:	4b3b      	ldr	r3, [pc, #236]	; (80a0480 <_Z12TrySendImagev+0x104>)
 80a0394:	781d      	ldrb	r5, [r3, #0]
 80a0396:	2d00      	cmp	r5, #0
 80a0398:	d062      	beq.n	80a0460 <_Z12TrySendImagev+0xe4>
 80a039a:	2000      	movs	r0, #0
      {
        imgMessage[i] = 0;
      }
      else if (imgIndex>imgSize)
      {
        imgMessage[i] = 255;
 80a039c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    for (size_t i = 0; i < imgMessageSize; i++)
 80a03a0:	4604      	mov	r4, r0
        imgMessage[i] = 0;
 80a03a2:	4686      	mov	lr, r0
    for (size_t i = 0; i < imgMessageSize; i++)
 80a03a4:	f240 265d 	movw	r6, #605	; 0x25d
 80a03a8:	4936      	ldr	r1, [pc, #216]	; (80a0484 <_Z12TrySendImagev+0x108>)
 80a03aa:	4a37      	ldr	r2, [pc, #220]	; (80a0488 <_Z12TrySendImagev+0x10c>)
 80a03ac:	680b      	ldr	r3, [r1, #0]
      }
      else
      {
        imgMessage[i] = lastImage[imgIndex];
 80a03ae:	4f37      	ldr	r7, [pc, #220]	; (80a048c <_Z12TrySendImagev+0x110>)
      if (imgIndex==imgSize)
 80a03b0:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80a03b4:	d157      	bne.n	80a0466 <_Z12TrySendImagev+0xea>
        imgMessage[i] = 0;
 80a03b6:	f882 e000 	strb.w	lr, [r2]
    for (size_t i = 0; i < imgMessageSize; i++)
 80a03ba:	3401      	adds	r4, #1
 80a03bc:	42b4      	cmp	r4, r6
 80a03be:	f102 0201 	add.w	r2, r2, #1
 80a03c2:	d1f5      	bne.n	80a03b0 <_Z12TrySendImagev+0x34>
 80a03c4:	b100      	cbz	r0, 80a03c8 <_Z12TrySendImagev+0x4c>
 80a03c6:	600b      	str	r3, [r1, #0]
        imgIndex++;
      }
    }
    messageQue[iReceiving] = "{\"Im\":" + String(imgMessage)+",\"Ii\":"+String(imageCount)+",\"Ip\":"+String(partCount)+"}";
 80a03c8:	4e31      	ldr	r6, [pc, #196]	; (80a0490 <_Z12TrySendImagev+0x114>)
 80a03ca:	4f32      	ldr	r7, [pc, #200]	; (80a0494 <_Z12TrySendImagev+0x118>)
 80a03cc:	6833      	ldr	r3, [r6, #0]
	StringSumHelper(const char *p) : String(p) {}
 80a03ce:	4932      	ldr	r1, [pc, #200]	; (80a0498 <_Z12TrySendImagev+0x11c>)
 80a03d0:	4668      	mov	r0, sp
 80a03d2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 80a03d6:	f001 fc9c 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a03da:	492b      	ldr	r1, [pc, #172]	; (80a0488 <_Z12TrySendImagev+0x10c>)
 80a03dc:	a804      	add	r0, sp, #16
 80a03de:	f001 fc98 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a03e2:	a904      	add	r1, sp, #16
 80a03e4:	4668      	mov	r0, sp
 80a03e6:	f001 fd53 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a03ea:	492c      	ldr	r1, [pc, #176]	; (80a049c <_Z12TrySendImagev+0x120>)
 80a03ec:	f001 fd5c 	bl	80a1ea8 <_ZplRK15StringSumHelperPKc>
 80a03f0:	4605      	mov	r5, r0
 80a03f2:	4c2b      	ldr	r4, [pc, #172]	; (80a04a0 <_Z12TrySendImagev+0x124>)
 80a03f4:	220a      	movs	r2, #10
 80a03f6:	6821      	ldr	r1, [r4, #0]
 80a03f8:	a808      	add	r0, sp, #32
 80a03fa:	f001 fcff 	bl	80a1dfc <_ZN6StringC1Eih>
 80a03fe:	4628      	mov	r0, r5
 80a0400:	a908      	add	r1, sp, #32
 80a0402:	f001 fd45 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a0406:	4927      	ldr	r1, [pc, #156]	; (80a04a4 <_Z12TrySendImagev+0x128>)
 80a0408:	f001 fd4e 	bl	80a1ea8 <_ZplRK15StringSumHelperPKc>
 80a040c:	4680      	mov	r8, r0
 80a040e:	4d26      	ldr	r5, [pc, #152]	; (80a04a8 <_Z12TrySendImagev+0x12c>)
 80a0410:	220a      	movs	r2, #10
 80a0412:	6829      	ldr	r1, [r5, #0]
 80a0414:	a80c      	add	r0, sp, #48	; 0x30
 80a0416:	f001 fcf1 	bl	80a1dfc <_ZN6StringC1Eih>
 80a041a:	a90c      	add	r1, sp, #48	; 0x30
 80a041c:	4640      	mov	r0, r8
 80a041e:	f001 fd37 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a0422:	4922      	ldr	r1, [pc, #136]	; (80a04ac <_Z12TrySendImagev+0x130>)
 80a0424:	f001 fd40 	bl	80a1ea8 <_ZplRK15StringSumHelperPKc>
 80a0428:	4601      	mov	r1, r0
 80a042a:	4638      	mov	r0, r7
 80a042c:	f001 fca1 	bl	80a1d72 <_ZN6StringaSERKS_>
 80a0430:	a80c      	add	r0, sp, #48	; 0x30
 80a0432:	f001 fc24 	bl	80a1c7e <_ZN6StringD1Ev>
 80a0436:	a808      	add	r0, sp, #32
 80a0438:	f001 fc21 	bl	80a1c7e <_ZN6StringD1Ev>
 80a043c:	a804      	add	r0, sp, #16
 80a043e:	f001 fc1e 	bl	80a1c7e <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0442:	4668      	mov	r0, sp
 80a0444:	f001 fc1b 	bl	80a1c7e <_ZN6StringD1Ev>
    iReceiving++;
    partCount++;
    imageCount++;
    sentPartImage = true;
 80a0448:	2201      	movs	r2, #1
    iReceiving++;
 80a044a:	6833      	ldr	r3, [r6, #0]
 80a044c:	3301      	adds	r3, #1
 80a044e:	6033      	str	r3, [r6, #0]
    partCount++;
 80a0450:	682b      	ldr	r3, [r5, #0]
 80a0452:	3301      	adds	r3, #1
 80a0454:	602b      	str	r3, [r5, #0]
    imageCount++;
 80a0456:	6823      	ldr	r3, [r4, #0]
 80a0458:	3301      	adds	r3, #1
 80a045a:	6023      	str	r3, [r4, #0]
    sentPartImage = true;
 80a045c:	4b14      	ldr	r3, [pc, #80]	; (80a04b0 <_Z12TrySendImagev+0x134>)
 80a045e:	701a      	strb	r2, [r3, #0]
  }
}
 80a0460:	b010      	add	sp, #64	; 0x40
 80a0462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        imgMessage[i] = lastImage[imgIndex];
 80a0466:	bf97      	itett	ls
 80a0468:	5cf8      	ldrbls	r0, [r7, r3]
        imgMessage[i] = 255;
 80a046a:	f882 c000 	strbhi.w	ip, [r2]
        imgMessage[i] = lastImage[imgIndex];
 80a046e:	7010      	strbls	r0, [r2, #0]
        imgIndex++;
 80a0470:	3301      	addls	r3, #1
 80a0472:	bf98      	it	ls
 80a0474:	4628      	movls	r0, r5
 80a0476:	e7a0      	b.n	80a03ba <_Z12TrySendImagev+0x3e>
 80a0478:	20007b74 	.word	0x20007b74
 80a047c:	2000009e 	.word	0x2000009e
 80a0480:	2000009d 	.word	0x2000009d
 80a0484:	200000ac 	.word	0x200000ac
 80a0488:	200000b0 	.word	0x200000b0
 80a048c:	2000030d 	.word	0x2000030d
 80a0490:	200000a0 	.word	0x200000a0
 80a0494:	20007b20 	.word	0x20007b20
 80a0498:	080a3d7b 	.word	0x080a3d7b
 80a049c:	080a3d82 	.word	0x080a3d82
 80a04a0:	200000a8 	.word	0x200000a8
 80a04a4:	080a3d89 	.word	0x080a3d89
 80a04a8:	20007b70 	.word	0x20007b70
 80a04ac:	080a3e6e 	.word	0x080a3e6e
 80a04b0:	20007c98 	.word	0x20007c98

080a04b4 <_Z10TrySendQuev>:

void TrySendQue()
{
 80a04b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (iSending != iReceiving && readyToSend)
 80a04b8:	4d37      	ldr	r5, [pc, #220]	; (80a0598 <_Z10TrySendQuev+0xe4>)
 80a04ba:	4e38      	ldr	r6, [pc, #224]	; (80a059c <_Z10TrySendQuev+0xe8>)
 80a04bc:	682b      	ldr	r3, [r5, #0]
 80a04be:	6832      	ldr	r2, [r6, #0]
 80a04c0:	4293      	cmp	r3, r2
 80a04c2:	d044      	beq.n	80a054e <_Z10TrySendQuev+0x9a>
 80a04c4:	4f36      	ldr	r7, [pc, #216]	; (80a05a0 <_Z10TrySendQuev+0xec>)
 80a04c6:	783a      	ldrb	r2, [r7, #0]
 80a04c8:	2a00      	cmp	r2, #0
 80a04ca:	d040      	beq.n	80a054e <_Z10TrySendQuev+0x9a>
        operator const char*() const { return c_str(); }
 80a04cc:	011a      	lsls	r2, r3, #4
 80a04ce:	4b35      	ldr	r3, [pc, #212]	; (80a05a4 <_Z10TrySendQuev+0xf0>)
  {
    Particle.publish(WebHookName, messageQue[iSending], 60, PUBLIC); // WebHook to Google Sheets
 80a04d0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80a05d4 <_Z10TrySendQuev+0x120>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a04d4:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a04d6:	4934      	ldr	r1, [pc, #208]	; (80a05a8 <_Z10TrySendQuev+0xf4>)
 80a04d8:	f88d 3000 	strb.w	r3, [sp]
 80a04dc:	f858 2002 	ldr.w	r2, [r8, r2]
 80a04e0:	233c      	movs	r3, #60	; 0x3c
 80a04e2:	6809      	ldr	r1, [r1, #0]
 80a04e4:	a802      	add	r0, sp, #8
 80a04e6:	f002 f8cb 	bl	80a2680 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a04ea:	9c03      	ldr	r4, [sp, #12]
 80a04ec:	b17c      	cbz	r4, 80a050e <_Z10TrySendQuev+0x5a>
      if (--_M_use_count == 0)
 80a04ee:	6863      	ldr	r3, [r4, #4]
 80a04f0:	3b01      	subs	r3, #1
 80a04f2:	6063      	str	r3, [r4, #4]
 80a04f4:	b95b      	cbnz	r3, 80a050e <_Z10TrySendQuev+0x5a>
          _M_dispose();
 80a04f6:	6823      	ldr	r3, [r4, #0]
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	689b      	ldr	r3, [r3, #8]
 80a04fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a04fe:	68a3      	ldr	r3, [r4, #8]
 80a0500:	3b01      	subs	r3, #1
 80a0502:	60a3      	str	r3, [r4, #8]
 80a0504:	b91b      	cbnz	r3, 80a050e <_Z10TrySendQuev+0x5a>
            _M_destroy();
 80a0506:	6823      	ldr	r3, [r4, #0]
 80a0508:	4620      	mov	r0, r4
 80a050a:	68db      	ldr	r3, [r3, #12]
 80a050c:	4798      	blx	r3
    Serial.println("Sent to cloud: ");
 80a050e:	f002 faed 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0512:	4926      	ldr	r1, [pc, #152]	; (80a05ac <_Z10TrySendQuev+0xf8>)
 80a0514:	f001 fe2a 	bl	80a216c <_ZN5Print7printlnEPKc>
    Serial.println(messageQue[iSending]);
 80a0518:	f002 fae8 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a051c:	682b      	ldr	r3, [r5, #0]
 80a051e:	011b      	lsls	r3, r3, #4
 80a0520:	f858 1003 	ldr.w	r1, [r8, r3]
 80a0524:	f001 fe22 	bl	80a216c <_ZN5Print7printlnEPKc>
    Serial.println(" ");
 80a0528:	f002 fae0 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a052c:	4920      	ldr	r1, [pc, #128]	; (80a05b0 <_Z10TrySendQuev+0xfc>)
 80a052e:	f001 fe1d 	bl	80a216c <_ZN5Print7printlnEPKc>
    lastSent = Time.now();
 80a0532:	f001 fe97 	bl	80a2264 <_ZN9TimeClass3nowEv>
 80a0536:	2200      	movs	r2, #0
 80a0538:	4b1e      	ldr	r3, [pc, #120]	; (80a05b4 <_Z10TrySendQuev+0x100>)
 80a053a:	17c1      	asrs	r1, r0, #31
 80a053c:	e9c3 0100 	strd	r0, r1, [r3]
    iSending++;
 80a0540:	682b      	ldr	r3, [r5, #0]
    if (iSending >= queLength)
    {
      iSending = 0;
    }
    readyToSend = false;
 80a0542:	703a      	strb	r2, [r7, #0]
    iSending++;
 80a0544:	3301      	adds	r3, #1
 80a0546:	2b04      	cmp	r3, #4
 80a0548:	bfc8      	it	gt
 80a054a:	4613      	movgt	r3, r2
 80a054c:	602b      	str	r3, [r5, #0]
  }
  if (!haveSentall)
 80a054e:	4b1a      	ldr	r3, [pc, #104]	; (80a05b8 <_Z10TrySendQuev+0x104>)
 80a0550:	6834      	ldr	r4, [r6, #0]
 80a0552:	781a      	ldrb	r2, [r3, #0]
 80a0554:	b9da      	cbnz	r2, 80a058e <_Z10TrySendQuev+0xda>
  {
    if (iSending == 0 && iReceiving == 0)
 80a0556:	682a      	ldr	r2, [r5, #0]
 80a0558:	4314      	orrs	r4, r2
 80a055a:	d115      	bne.n	80a0588 <_Z10TrySendQuev+0xd4>
    {
      haveSentall = true;
 80a055c:	2201      	movs	r2, #1
      Serial.println("\nSENT ALL\n");
      if (sentPartImage)
 80a055e:	4d17      	ldr	r5, [pc, #92]	; (80a05bc <_Z10TrySendQuev+0x108>)
      haveSentall = true;
 80a0560:	701a      	strb	r2, [r3, #0]
      Serial.println("\nSENT ALL\n");
 80a0562:	f002 fac3 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0566:	4916      	ldr	r1, [pc, #88]	; (80a05c0 <_Z10TrySendQuev+0x10c>)
 80a0568:	f001 fe00 	bl	80a216c <_ZN5Print7printlnEPKc>
      if (sentPartImage)
 80a056c:	782b      	ldrb	r3, [r5, #0]
 80a056e:	b15b      	cbz	r3, 80a0588 <_Z10TrySendQuev+0xd4>
      {
        Serial.println("\nSENT ALL IMAGE MESSAGE\n");
 80a0570:	f002 fabc 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0574:	4913      	ldr	r1, [pc, #76]	; (80a05c4 <_Z10TrySendQuev+0x110>)
 80a0576:	f001 fdf9 	bl	80a216c <_ZN5Print7printlnEPKc>
        sentPartImage=false;
        haveImage = false;
 80a057a:	4b13      	ldr	r3, [pc, #76]	; (80a05c8 <_Z10TrySendQuev+0x114>)
        sentPartImage=false;
 80a057c:	702c      	strb	r4, [r5, #0]
        haveImage = false;
 80a057e:	701c      	strb	r4, [r3, #0]
        partCount = 0;
 80a0580:	4b12      	ldr	r3, [pc, #72]	; (80a05cc <_Z10TrySendQuev+0x118>)
 80a0582:	601c      	str	r4, [r3, #0]
        imgIndex=0;
 80a0584:	4b12      	ldr	r3, [pc, #72]	; (80a05d0 <_Z10TrySendQuev+0x11c>)
 80a0586:	601c      	str	r4, [r3, #0]
    {
      haveSentall = false;
      // Serial.println("\nSENT ALL\n");
    }
  }
}
 80a0588:	b004      	add	sp, #16
 80a058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (iReceiving != 0)
 80a058e:	2c00      	cmp	r4, #0
 80a0590:	d0fa      	beq.n	80a0588 <_Z10TrySendQuev+0xd4>
      haveSentall = false;
 80a0592:	2200      	movs	r2, #0
 80a0594:	701a      	strb	r2, [r3, #0]
}
 80a0596:	e7f7      	b.n	80a0588 <_Z10TrySendQuev+0xd4>
 80a0598:	200000a4 	.word	0x200000a4
 80a059c:	200000a0 	.word	0x200000a0
 80a05a0:	20007b74 	.word	0x20007b74
 80a05a4:	2000009c 	.word	0x2000009c
 80a05a8:	2000008c 	.word	0x2000008c
 80a05ac:	080a3d90 	.word	0x080a3d90
 80a05b0:	080a3e5a 	.word	0x080a3e5a
 80a05b4:	20007b18 	.word	0x20007b18
 80a05b8:	2000009e 	.word	0x2000009e
 80a05bc:	20007c98 	.word	0x20007c98
 80a05c0:	080a3da0 	.word	0x080a3da0
 80a05c4:	080a3dab 	.word	0x080a3dab
 80a05c8:	2000009d 	.word	0x2000009d
 80a05cc:	20007b70 	.word	0x20007b70
 80a05d0:	200000ac 	.word	0x200000ac
 80a05d4:	20007b20 	.word	0x20007b20

080a05d8 <_GLOBAL__sub_I_rf95>:
    {
      Serial.println("recv failed");
    }
    Serial.println("");
  }
}
 80a05d8:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 80a05da:	2400      	movs	r4, #0
 80a05dc:	4b36      	ldr	r3, [pc, #216]	; (80a06b8 <_GLOBAL__sub_I_rf95+0xe0>)
 80a05de:	b088      	sub	sp, #32
RH_RF95 rf95;
 80a05e0:	2202      	movs	r2, #2
 80a05e2:	210c      	movs	r1, #12
 80a05e4:	701c      	strb	r4, [r3, #0]
 80a05e6:	4835      	ldr	r0, [pc, #212]	; (80a06bc <_GLOBAL__sub_I_rf95+0xe4>)
 80a05e8:	4b35      	ldr	r3, [pc, #212]	; (80a06c0 <_GLOBAL__sub_I_rf95+0xe8>)
 80a05ea:	f000 fbb3 	bl	80a0d54 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
String WebHookName = "OwlNode_System01"; // Webhook name set within particle console.
 80a05ee:	4935      	ldr	r1, [pc, #212]	; (80a06c4 <_GLOBAL__sub_I_rf95+0xec>)
 80a05f0:	4835      	ldr	r0, [pc, #212]	; (80a06c8 <_GLOBAL__sub_I_rf95+0xf0>)
 80a05f2:	f001 fb8e 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a05f6:	4a35      	ldr	r2, [pc, #212]	; (80a06cc <_GLOBAL__sub_I_rf95+0xf4>)
 80a05f8:	4935      	ldr	r1, [pc, #212]	; (80a06d0 <_GLOBAL__sub_I_rf95+0xf8>)
 80a05fa:	4833      	ldr	r0, [pc, #204]	; (80a06c8 <_GLOBAL__sub_I_rf95+0xf0>)
 80a05fc:	f002 fd74 	bl	80a30e8 <__aeabi_atexit>
String ImgHookName = "Img_Upload_01";
 80a0600:	4934      	ldr	r1, [pc, #208]	; (80a06d4 <_GLOBAL__sub_I_rf95+0xfc>)
 80a0602:	4835      	ldr	r0, [pc, #212]	; (80a06d8 <_GLOBAL__sub_I_rf95+0x100>)
 80a0604:	f001 fb85 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a0608:	4a30      	ldr	r2, [pc, #192]	; (80a06cc <_GLOBAL__sub_I_rf95+0xf4>)
 80a060a:	4931      	ldr	r1, [pc, #196]	; (80a06d0 <_GLOBAL__sub_I_rf95+0xf8>)
 80a060c:	4832      	ldr	r0, [pc, #200]	; (80a06d8 <_GLOBAL__sub_I_rf95+0x100>)
 80a060e:	f002 fd6b 	bl	80a30e8 <__aeabi_atexit>
String messageQue[queLength];
 80a0612:	4d32      	ldr	r5, [pc, #200]	; (80a06dc <_GLOBAL__sub_I_rf95+0x104>)
 80a0614:	4e32      	ldr	r6, [pc, #200]	; (80a06e0 <_GLOBAL__sub_I_rf95+0x108>)
 80a0616:	1928      	adds	r0, r5, r4
 80a0618:	4631      	mov	r1, r6
 80a061a:	3410      	adds	r4, #16
 80a061c:	f001 fb79 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a0620:	2c50      	cmp	r4, #80	; 0x50
 80a0622:	d1f8      	bne.n	80a0616 <_GLOBAL__sub_I_rf95+0x3e>
 80a0624:	4a29      	ldr	r2, [pc, #164]	; (80a06cc <_GLOBAL__sub_I_rf95+0xf4>)
 80a0626:	492f      	ldr	r1, [pc, #188]	; (80a06e4 <_GLOBAL__sub_I_rf95+0x10c>)
 80a0628:	2000      	movs	r0, #0
 80a062a:	f002 fd5d 	bl	80a30e8 <__aeabi_atexit>
SerialBuffer<1024> serBuf(Serial1);
 80a062e:	f002 fb37 	bl	80a2ca0 <_Z22__fetch_global_Serial1v>
	/**
	 * @brief Constructs a SerialBuffer object
	 *
	 * @param port The real serial port to get the data to buffer from.
	 */
	SerialBuffer(USARTSerial &port) : SerialBufferBase(staticBuffer, SIZE, port) {
 80a0632:	4c2d      	ldr	r4, [pc, #180]	; (80a06e8 <_GLOBAL__sub_I_rf95+0x110>)
 80a0634:	4603      	mov	r3, r0
 80a0636:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80a063a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a063e:	4620      	mov	r0, r4
 80a0640:	f000 feea 	bl	80a1418 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>
 80a0644:	4b29      	ldr	r3, [pc, #164]	; (80a06ec <_GLOBAL__sub_I_rf95+0x114>)
 80a0646:	4620      	mov	r0, r4
 80a0648:	6023      	str	r3, [r4, #0]
 80a064a:	4a20      	ldr	r2, [pc, #128]	; (80a06cc <_GLOBAL__sub_I_rf95+0xf4>)
 80a064c:	4928      	ldr	r1, [pc, #160]	; (80a06f0 <_GLOBAL__sub_I_rf95+0x118>)
 80a064e:	f002 fd4b 	bl	80a30e8 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0652:	4b28      	ldr	r3, [pc, #160]	; (80a06f4 <_GLOBAL__sub_I_rf95+0x11c>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a0654:	4c28      	ldr	r4, [pc, #160]	; (80a06f8 <_GLOBAL__sub_I_rf95+0x120>)
 80a0656:	9304      	str	r3, [sp, #16]
 80a0658:	4b28      	ldr	r3, [pc, #160]	; (80a06fc <_GLOBAL__sub_I_rf95+0x124>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a065a:	ad04      	add	r5, sp, #16
 80a065c:	6023      	str	r3, [r4, #0]
 80a065e:	2300      	movs	r3, #0
 80a0660:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a0664:	ae02      	add	r6, sp, #8
 80a0666:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a066a:	f104 020c 	add.w	r2, r4, #12
 80a066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a0672:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0676:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a067a:	e882 0003 	stmia.w	r2, {r0, r1}
 80a067e:	4a20      	ldr	r2, [pc, #128]	; (80a0700 <_GLOBAL__sub_I_rf95+0x128>)
 80a0680:	7123      	strb	r3, [r4, #4]
 80a0682:	6162      	str	r2, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0684:	69a2      	ldr	r2, [r4, #24]
 80a0686:	60a3      	str	r3, [r4, #8]
 80a0688:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a068a:	4a1e      	ldr	r2, [pc, #120]	; (80a0704 <_GLOBAL__sub_I_rf95+0x12c>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a068c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0690:	61a2      	str	r2, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a0692:	9306      	str	r3, [sp, #24]
 80a0694:	e9cd 3300 	strd	r3, r3, [sp]
 80a0698:	4a1b      	ldr	r2, [pc, #108]	; (80a0708 <_GLOBAL__sub_I_rf95+0x130>)
 80a069a:	4623      	mov	r3, r4
 80a069c:	f104 0008 	add.w	r0, r4, #8
 80a06a0:	f000 ff7c 	bl	80a159c <os_timer_create>
    class function<_Res(_ArgTypes...)>
 80a06a4:	4628      	mov	r0, r5
 80a06a6:	f7ff fd5c 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
Timer timer(1000, updateSender);
 80a06aa:	4620      	mov	r0, r4
 80a06ac:	4a07      	ldr	r2, [pc, #28]	; (80a06cc <_GLOBAL__sub_I_rf95+0xf4>)
 80a06ae:	4917      	ldr	r1, [pc, #92]	; (80a070c <_GLOBAL__sub_I_rf95+0x134>)
 80a06b0:	f002 fd1a 	bl	80a30e8 <__aeabi_atexit>
}
 80a06b4:	b008      	add	sp, #32
 80a06b6:	bd70      	pop	{r4, r5, r6, pc}
 80a06b8:	2000009c 	.word	0x2000009c
 80a06bc:	20007b78 	.word	0x20007b78
 80a06c0:	20008100 	.word	0x20008100
 80a06c4:	080a3dc4 	.word	0x080a3dc4
 80a06c8:	2000008c 	.word	0x2000008c
 80a06cc:	20000078 	.word	0x20000078
 80a06d0:	080a1c7f 	.word	0x080a1c7f
 80a06d4:	080a3dd5 	.word	0x080a3dd5
 80a06d8:	2000007c 	.word	0x2000007c
 80a06dc:	20007b20 	.word	0x20007b20
 80a06e0:	080a3dc3 	.word	0x080a3dc3
 80a06e4:	080a00f5 	.word	0x080a00f5
 80a06e8:	20007c9c 	.word	0x20007c9c
 80a06ec:	080a3f14 	.word	0x080a3f14
 80a06f0:	080a00f3 	.word	0x080a00f3
 80a06f4:	080a00cd 	.word	0x080a00cd
 80a06f8:	200080cc 	.word	0x200080cc
 80a06fc:	080a3f00 	.word	0x080a3f00
 80a0700:	080a00dd 	.word	0x080a00dd
 80a0704:	080a00d9 	.word	0x080a00d9
 80a0708:	080a0129 	.word	0x080a0129
 80a070c:	080a0195 	.word	0x080a0195

080a0710 <setup>:
{
 80a0710:	b510      	push	{r4, lr}
  pinMode(led, OUTPUT);
 80a0712:	4b39      	ldr	r3, [pc, #228]	; (80a07f8 <setup+0xe8>)
{
 80a0714:	b08a      	sub	sp, #40	; 0x28
  pinMode(led, OUTPUT);
 80a0716:	8818      	ldrh	r0, [r3, #0]
 80a0718:	2101      	movs	r1, #1
 80a071a:	f002 fc63 	bl	80a2fe4 <pinMode>
  pinMode(activePin, INPUT);
 80a071e:	4b37      	ldr	r3, [pc, #220]	; (80a07fc <setup+0xec>)
 80a0720:	2100      	movs	r1, #0
 80a0722:	8818      	ldrh	r0, [r3, #0]
 80a0724:	f002 fc5e 	bl	80a2fe4 <pinMode>
  Serial1.begin(1000000, SERIAL_8N1);
 80a0728:	f002 faba 	bl	80a2ca0 <_Z22__fetch_global_Serial1v>
 80a072c:	2200      	movs	r2, #0
 80a072e:	4934      	ldr	r1, [pc, #208]	; (80a0800 <setup+0xf0>)
 80a0730:	f002 fab2 	bl	80a2c98 <_ZN11USARTSerial5beginEmm>
  serBuf.setup();
 80a0734:	4833      	ldr	r0, [pc, #204]	; (80a0804 <setup+0xf4>)
 80a0736:	f000 fe81 	bl	80a143c <_ZN16SerialBufferBase5setupEv>
  Serial.begin(9600);
 80a073a:	f002 f9d7 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a073e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0742:	f002 f9c7 	bl	80a2ad4 <_ZN9USBSerial5beginEl>
  delay(1000);
 80a0746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a074a:	f001 fda5 	bl	80a2298 <delay>
  if (!rf95.init())
 80a074e:	482e      	ldr	r0, [pc, #184]	; (80a0808 <setup+0xf8>)
 80a0750:	f000 fcde 	bl	80a1110 <_ZN7RH_RF954initEv>
 80a0754:	2800      	cmp	r0, #0
 80a0756:	d145      	bne.n	80a07e4 <setup+0xd4>
    Serial.println("init failed");
 80a0758:	f002 f9c8 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a075c:	492b      	ldr	r1, [pc, #172]	; (80a080c <setup+0xfc>)
 80a075e:	f001 fd05 	bl	80a216c <_ZN5Print7printlnEPKc>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0762:	2200      	movs	r2, #0
 80a0764:	4c2a      	ldr	r4, [pc, #168]	; (80a0810 <setup+0x100>)
 80a0766:	4611      	mov	r1, r2
 80a0768:	4620      	mov	r0, r4
 80a076a:	f7ff fd03 	bl	80a0174 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a076e:	68a0      	ldr	r0, [r4, #8]
 80a0770:	b140      	cbz	r0, 80a0784 <setup+0x74>
 80a0772:	2300      	movs	r3, #0
 80a0774:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80a0778:	4619      	mov	r1, r3
 80a077a:	e9cd 2300 	strd	r2, r3, [sp]
 80a077e:	461a      	mov	r2, r3
 80a0780:	f000 ff24 	bl	80a15cc <os_timer_change>
	StringSumHelper(const char *p) : String(p) {}
 80a0784:	4923      	ldr	r1, [pc, #140]	; (80a0814 <setup+0x104>)
 80a0786:	a806      	add	r0, sp, #24
 80a0788:	f001 fac3 	bl	80a1d12 <_ZN6StringC1EPKc>
  Log.info("Max lora message length is: " + String(rf95.maxMessageLength()));
 80a078c:	481e      	ldr	r0, [pc, #120]	; (80a0808 <setup+0xf8>)
 80a078e:	f000 fad1 	bl	80a0d34 <_ZN7RH_RF9516maxMessageLengthEv>
 80a0792:	220a      	movs	r2, #10
 80a0794:	4601      	mov	r1, r0
 80a0796:	a802      	add	r0, sp, #8
 80a0798:	f001 fb1e 	bl	80a1dd8 <_ZN6StringC1Ehh>
 80a079c:	a902      	add	r1, sp, #8
 80a079e:	a806      	add	r0, sp, #24
 80a07a0:	f001 fb76 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a07a4:	6801      	ldr	r1, [r0, #0]
 80a07a6:	481c      	ldr	r0, [pc, #112]	; (80a0818 <setup+0x108>)
 80a07a8:	f7ff fd22 	bl	80a01f0 <_ZNK5spark6Logger4infoEPKcz>
 80a07ac:	a802      	add	r0, sp, #8
 80a07ae:	f001 fa66 	bl	80a1c7e <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a07b2:	a806      	add	r0, sp, #24
 80a07b4:	f001 fa63 	bl	80a1c7e <_ZN6StringD1Ev>
  Log.info("Finished Setup loop.");
 80a07b8:	4918      	ldr	r1, [pc, #96]	; (80a081c <setup+0x10c>)
 80a07ba:	4817      	ldr	r0, [pc, #92]	; (80a0818 <setup+0x108>)
 80a07bc:	f7ff fd18 	bl	80a01f0 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("************************");
 80a07c0:	4917      	ldr	r1, [pc, #92]	; (80a0820 <setup+0x110>)
 80a07c2:	4815      	ldr	r0, [pc, #84]	; (80a0818 <setup+0x108>)
 80a07c4:	f7ff fd14 	bl	80a01f0 <_ZNK5spark6Logger4infoEPKcz>
  lastSent = Time.now();
 80a07c8:	f001 fd4c 	bl	80a2264 <_ZN9TimeClass3nowEv>
 80a07cc:	4b15      	ldr	r3, [pc, #84]	; (80a0824 <setup+0x114>)
 80a07ce:	17c1      	asrs	r1, r0, #31
 80a07d0:	e9c3 0100 	strd	r0, r1, [r3]
  lastPhoto = Time.now();
 80a07d4:	f001 fd46 	bl	80a2264 <_ZN9TimeClass3nowEv>
 80a07d8:	4b13      	ldr	r3, [pc, #76]	; (80a0828 <setup+0x118>)
 80a07da:	17c1      	asrs	r1, r0, #31
 80a07dc:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a07e0:	b00a      	add	sp, #40	; 0x28
 80a07e2:	bd10      	pop	{r4, pc}
    rf95.setFrequency(915);
 80a07e4:	4911      	ldr	r1, [pc, #68]	; (80a082c <setup+0x11c>)
 80a07e6:	4808      	ldr	r0, [pc, #32]	; (80a0808 <setup+0xf8>)
 80a07e8:	f000 fb1a 	bl	80a0e20 <_ZN7RH_RF9512setFrequencyEf>
    rf95.setTxPower(23, false);
 80a07ec:	2200      	movs	r2, #0
 80a07ee:	2117      	movs	r1, #23
 80a07f0:	4805      	ldr	r0, [pc, #20]	; (80a0808 <setup+0xf8>)
 80a07f2:	f000 fc25 	bl	80a1040 <_ZN7RH_RF9510setTxPowerEab>
 80a07f6:	e7b4      	b.n	80a0762 <setup+0x52>
 80a07f8:	20000004 	.word	0x20000004
 80a07fc:	20000000 	.word	0x20000000
 80a0800:	000f4240 	.word	0x000f4240
 80a0804:	20007c9c 	.word	0x20007c9c
 80a0808:	20007b78 	.word	0x20007b78
 80a080c:	080a3de3 	.word	0x080a3de3
 80a0810:	200080cc 	.word	0x200080cc
 80a0814:	080a3def 	.word	0x080a3def
 80a0818:	20008128 	.word	0x20008128
 80a081c:	080a3e0c 	.word	0x080a3e0c
 80a0820:	080a3e21 	.word	0x080a3e21
 80a0824:	20007b18 	.word	0x20007b18
 80a0828:	20007b10 	.word	0x20007b10
 80a082c:	4464c000 	.word	0x4464c000

080a0830 <_Z14TryGetMessagesv.part.0>:
    uint8_t len = sizeof(buf);
 80a0830:	23fb      	movs	r3, #251	; 0xfb
void TryGetMessages()
 80a0832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0836:	b0d4      	sub	sp, #336	; 0x150
 80a0838:	af00      	add	r7, sp, #0
    if (rf95.recv(buf, &len))
 80a083a:	4899      	ldr	r0, [pc, #612]	; (80a0aa0 <_Z14TryGetMessagesv.part.0+0x270>)
 80a083c:	1cfa      	adds	r2, r7, #3
 80a083e:	f107 0154 	add.w	r1, r7, #84	; 0x54
    uint8_t len = sizeof(buf);
 80a0842:	70fb      	strb	r3, [r7, #3]
    if (rf95.recv(buf, &len))
 80a0844:	f000 fac4 	bl	80a0dd0 <_ZN7RH_RF954recvEPhS0_>
 80a0848:	2800      	cmp	r0, #0
 80a084a:	f000 8122 	beq.w	80a0a92 <_Z14TryGetMessagesv.part.0+0x262>
      digitalWrite(led, HIGH);
 80a084e:	4d95      	ldr	r5, [pc, #596]	; (80a0aa4 <_Z14TryGetMessagesv.part.0+0x274>)
 80a0850:	2101      	movs	r1, #1
 80a0852:	8828      	ldrh	r0, [r5, #0]
 80a0854:	f002 fbd7 	bl	80a3006 <digitalWrite>
      Serial.println("got request: ");
 80a0858:	f002 f948 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a085c:	4992      	ldr	r1, [pc, #584]	; (80a0aa8 <_Z14TryGetMessagesv.part.0+0x278>)
 80a085e:	f001 fc85 	bl	80a216c <_ZN5Print7printlnEPKc>
      Serial.println((char *)buf);
 80a0862:	f002 f943 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0866:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80a086a:	f001 fc7f 	bl	80a216c <_ZN5Print7printlnEPKc>
      String newMsg = String((char *)buf);
 80a086e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80a0872:	1d38      	adds	r0, r7, #4
 80a0874:	f001 fa4d 	bl	80a1d12 <_ZN6StringC1EPKc>
      int msgStart = newMsg.indexOf("{");
 80a0878:	498c      	ldr	r1, [pc, #560]	; (80a0aac <_Z14TryGetMessagesv.part.0+0x27c>)
 80a087a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a087e:	f001 fa48 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a0882:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a0886:	1d38      	adds	r0, r7, #4
 80a0888:	f001 fb49 	bl	80a1f1e <_ZNK6String7indexOfERKS_>
 80a088c:	4604      	mov	r4, r0
 80a088e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0892:	f001 f9f4 	bl	80a1c7e <_ZN6StringD1Ev>
      int msgEnd = newMsg.indexOf("}");
 80a0896:	4986      	ldr	r1, [pc, #536]	; (80a0ab0 <_Z14TryGetMessagesv.part.0+0x280>)
 80a0898:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a089c:	f001 fa39 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a08a0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a08a4:	1d38      	adds	r0, r7, #4
 80a08a6:	f001 fb3a 	bl	80a1f1e <_ZNK6String7indexOfERKS_>
 80a08aa:	4606      	mov	r6, r0
 80a08ac:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a08b0:	f001 f9e5 	bl	80a1c7e <_ZN6StringD1Ev>
      if (msgStart > 0 && msgEnd > 0)
 80a08b4:	2c00      	cmp	r4, #0
 80a08b6:	f340 80e6 	ble.w	80a0a86 <_Z14TryGetMessagesv.part.0+0x256>
 80a08ba:	2e00      	cmp	r6, #0
 80a08bc:	f340 80e3 	ble.w	80a0a86 <_Z14TryGetMessagesv.part.0+0x256>
        String sender = newMsg.substring(0, msgStart);
 80a08c0:	4623      	mov	r3, r4
 80a08c2:	2200      	movs	r2, #0
 80a08c4:	1d39      	adds	r1, r7, #4
 80a08c6:	f107 0014 	add.w	r0, r7, #20
 80a08ca:	f001 fb51 	bl	80a1f70 <_ZNK6String9substringEjj>
        Serial.println(sender);
 80a08ce:	f002 f90d 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a08d2:	6979      	ldr	r1, [r7, #20]
 80a08d4:	f001 fc4a 	bl	80a216c <_ZN5Print7printlnEPKc>
        String msgRcived = newMsg.substring(msgStart, msgEnd + 1);
 80a08d8:	1c73      	adds	r3, r6, #1
 80a08da:	4622      	mov	r2, r4
 80a08dc:	1d39      	adds	r1, r7, #4
 80a08de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a08e2:	f001 fb45 	bl	80a1f70 <_ZNK6String9substringEjj>
        Serial.println(msgRcived);
 80a08e6:	f002 f901 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a08ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80a08ec:	f001 fc3e 	bl	80a216c <_ZN5Print7printlnEPKc>
        if (sender.length() > 0 && msgRcived.length() > 0)
 80a08f0:	69fb      	ldr	r3, [r7, #28]
 80a08f2:	2b00      	cmp	r3, #0
 80a08f4:	f000 808d 	beq.w	80a0a12 <_Z14TryGetMessagesv.part.0+0x1e2>
 80a08f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a08fa:	2b00      	cmp	r3, #0
 80a08fc:	f000 8089 	beq.w	80a0a12 <_Z14TryGetMessagesv.part.0+0x1e2>
          msgRcived.replace("Dv", "Dd");
 80a0900:	496c      	ldr	r1, [pc, #432]	; (80a0ab4 <_Z14TryGetMessagesv.part.0+0x284>)
 80a0902:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0906:	f001 fa04 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a090a:	496b      	ldr	r1, [pc, #428]	; (80a0ab8 <_Z14TryGetMessagesv.part.0+0x288>)
 80a090c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a0910:	f001 f9ff 	bl	80a1d12 <_ZN6StringC1EPKc>
 80a0914:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80a0918:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a091c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a0920:	f001 fb48 	bl	80a1fb4 <_ZN6String7replaceERKS_S1_>
 80a0924:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a0928:	f001 f9a9 	bl	80a1c7e <_ZN6StringD1Ev>
 80a092c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0930:	f001 f9a5 	bl	80a1c7e <_ZN6StringD1Ev>
          msgRcived.remove(msgRcived.length() - 1);
 80a0934:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80a0936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a093a:	3901      	subs	r1, #1
 80a093c:	f001 fbd9 	bl	80a20f2 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
 80a0940:	495e      	ldr	r1, [pc, #376]	; (80a0abc <_Z14TryGetMessagesv.part.0+0x28c>)
 80a0942:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0946:	f001 f9e4 	bl	80a1d12 <_ZN6StringC1EPKc>
          msgRcived.concat(",\"Si\": \"" + String(rf95.lastRssi()) + "\" ");
 80a094a:	4855      	ldr	r0, [pc, #340]	; (80a0aa0 <_Z14TryGetMessagesv.part.0+0x270>)
 80a094c:	f000 f946 	bl	80a0bdc <_ZN15RHGenericDriver8lastRssiEv>
 80a0950:	220a      	movs	r2, #10
 80a0952:	4601      	mov	r1, r0
 80a0954:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a0958:	f001 fa50 	bl	80a1dfc <_ZN6StringC1Eih>
 80a095c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80a0960:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0964:	f001 fa94 	bl	80a1e90 <_ZplRK15StringSumHelperRK6String>
 80a0968:	4955      	ldr	r1, [pc, #340]	; (80a0ac0 <_Z14TryGetMessagesv.part.0+0x290>)
 80a096a:	f001 fa9d 	bl	80a1ea8 <_ZplRK15StringSumHelperPKc>
 80a096e:	4601      	mov	r1, r0
 80a0970:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a0974:	f001 fa6c 	bl	80a1e50 <_ZN6String6concatERKS_>
 80a0978:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a097c:	f001 f97f 	bl	80a1c7e <_ZN6StringD1Ev>
          messageQue[iReceiving] = String(msgRcived);
 80a0980:	4c50      	ldr	r4, [pc, #320]	; (80a0ac4 <_Z14TryGetMessagesv.part.0+0x294>)
class StringSumHelper : public String
 80a0982:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0986:	f001 f97a 	bl	80a1c7e <_ZN6StringD1Ev>
          msgRcived.concat(",\"Dv\": \"Server01\" }");
 80a098a:	494f      	ldr	r1, [pc, #316]	; (80a0ac8 <_Z14TryGetMessagesv.part.0+0x298>)
 80a098c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a0990:	f001 fa62 	bl	80a1e58 <_ZN6String6concatEPKc>
          messageQue[iReceiving] = String(msgRcived);
 80a0994:	4b4d      	ldr	r3, [pc, #308]	; (80a0acc <_Z14TryGetMessagesv.part.0+0x29c>)
 80a0996:	6822      	ldr	r2, [r4, #0]
 80a0998:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80a099c:	eb03 1802 	add.w	r8, r3, r2, lsl #4
 80a09a0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a09a4:	f001 f9f4 	bl	80a1d90 <_ZN6StringC1ERKS_>
 80a09a8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a09ac:	4640      	mov	r0, r8
 80a09ae:	f001 f9fa 	bl	80a1da6 <_ZN6StringaSEOS_>
 80a09b2:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a09b6:	f001 f962 	bl	80a1c7e <_ZN6StringD1Ev>
          iReceiving++;
 80a09ba:	6823      	ldr	r3, [r4, #0]
          Serial.println("- as a reply.");
 80a09bc:	466e      	mov	r6, sp
          iReceiving++;
 80a09be:	3301      	adds	r3, #1
          if (iReceiving >= queLength)
 80a09c0:	2b04      	cmp	r3, #4
 80a09c2:	dc44      	bgt.n	80a0a4e <_Z14TryGetMessagesv.part.0+0x21e>
          sender.concat(' ');
 80a09c4:	2120      	movs	r1, #32
 80a09c6:	f107 0014 	add.w	r0, r7, #20
            iReceiving = 0;
 80a09ca:	6023      	str	r3, [r4, #0]
          sender.concat(' ');
 80a09cc:	f001 fa53 	bl	80a1e76 <_ZN6String6concatEc>
          char dataMsg[sender.length() + 1];
 80a09d0:	69fa      	ldr	r2, [r7, #28]
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a09d2:	f107 0014 	add.w	r0, r7, #20
 80a09d6:	f102 0308 	add.w	r3, r2, #8
 80a09da:	f023 0307 	bic.w	r3, r3, #7
 80a09de:	ebad 0d03 	sub.w	sp, sp, r3
 80a09e2:	4669      	mov	r1, sp
 80a09e4:	2300      	movs	r3, #0
 80a09e6:	f001 fa73 	bl	80a1ed0 <_ZNK6String8getBytesEPhjj>
          uint8_t data[sender.length() + 1];
 80a09ea:	69fa      	ldr	r2, [r7, #28]
          char dataMsg[sender.length() + 1];
 80a09ec:	466c      	mov	r4, sp
          uint8_t data[sender.length() + 1];
 80a09ee:	f102 0308 	add.w	r3, r2, #8
 80a09f2:	f023 0307 	bic.w	r3, r3, #7
 80a09f6:	ebad 0d03 	sub.w	sp, sp, r3
 80a09fa:	46e8      	mov	r8, sp
          for (size_t i = 0; i < sender.length() + 1; i++)
 80a09fc:	1e63      	subs	r3, r4, #1
 80a09fe:	f10d 31ff 	add.w	r1, sp, #4294967295
 80a0a02:	4414      	add	r4, r2
 80a0a04:	42a3      	cmp	r3, r4
 80a0a06:	d024      	beq.n	80a0a52 <_Z14TryGetMessagesv.part.0+0x222>
            data[i] = uint8_t(dataMsg[i]);
 80a0a08:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80a0a0c:	f801 0f01 	strb.w	r0, [r1, #1]!
          for (size_t i = 0; i < sender.length() + 1; i++)
 80a0a10:	e7f8      	b.n	80a0a04 <_Z14TryGetMessagesv.part.0+0x1d4>
          Serial.println("ID or message not found. No reply message sent.");
 80a0a12:	f002 f86b 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a16:	492e      	ldr	r1, [pc, #184]	; (80a0ad0 <_Z14TryGetMessagesv.part.0+0x2a0>)
 80a0a18:	f001 fba8 	bl	80a216c <_ZN5Print7printlnEPKc>
        String msgRcived = newMsg.substring(msgStart, msgEnd + 1);
 80a0a1c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a0a20:	f001 f92d 	bl	80a1c7e <_ZN6StringD1Ev>
        String sender = newMsg.substring(0, msgStart);
 80a0a24:	f107 0014 	add.w	r0, r7, #20
 80a0a28:	f001 f929 	bl	80a1c7e <_ZN6StringD1Ev>
      digitalWrite(led, LOW);
 80a0a2c:	8828      	ldrh	r0, [r5, #0]
 80a0a2e:	2100      	movs	r1, #0
 80a0a30:	f002 fae9 	bl	80a3006 <digitalWrite>
      String newMsg = String((char *)buf);
 80a0a34:	1d38      	adds	r0, r7, #4
 80a0a36:	f001 f922 	bl	80a1c7e <_ZN6StringD1Ev>
    Serial.println("");
 80a0a3a:	f002 f857 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a3e:	4925      	ldr	r1, [pc, #148]	; (80a0ad4 <_Z14TryGetMessagesv.part.0+0x2a4>)
 80a0a40:	f001 fb94 	bl	80a216c <_ZN5Print7printlnEPKc>
}
 80a0a44:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80a0a48:	46bd      	mov	sp, r7
 80a0a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            iReceiving = 0;
 80a0a4e:	2300      	movs	r3, #0
 80a0a50:	e7b8      	b.n	80a09c4 <_Z14TryGetMessagesv.part.0+0x194>
          rf95.send(data, sizeof(data));
 80a0a52:	3201      	adds	r2, #1
 80a0a54:	b2d2      	uxtb	r2, r2
 80a0a56:	4641      	mov	r1, r8
 80a0a58:	4811      	ldr	r0, [pc, #68]	; (80a0aa0 <_Z14TryGetMessagesv.part.0+0x270>)
 80a0a5a:	f000 fab9 	bl	80a0fd0 <_ZN7RH_RF954sendEPKhh>
          rf95.waitPacketSent();
 80a0a5e:	4810      	ldr	r0, [pc, #64]	; (80a0aa0 <_Z14TryGetMessagesv.part.0+0x270>)
 80a0a60:	f000 f866 	bl	80a0b30 <_ZN15RHGenericDriver14waitPacketSentEv>
          Serial.print("Sent -");
 80a0a64:	f002 f842 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a68:	491b      	ldr	r1, [pc, #108]	; (80a0ad8 <_Z14TryGetMessagesv.part.0+0x2a8>)
 80a0a6a:	f001 fb6c 	bl	80a2146 <_ZN5Print5printEPKc>
          Serial.print((char *)data);
 80a0a6e:	f002 f83d 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a72:	4641      	mov	r1, r8
 80a0a74:	f001 fb67 	bl	80a2146 <_ZN5Print5printEPKc>
          Serial.println("- as a reply.");
 80a0a78:	f002 f838 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a7c:	4917      	ldr	r1, [pc, #92]	; (80a0adc <_Z14TryGetMessagesv.part.0+0x2ac>)
 80a0a7e:	f001 fb75 	bl	80a216c <_ZN5Print7printlnEPKc>
 80a0a82:	46b5      	mov	sp, r6
 80a0a84:	e7ca      	b.n	80a0a1c <_Z14TryGetMessagesv.part.0+0x1ec>
        Serial.println("No start or end bracket found, no reply message sent.");
 80a0a86:	f002 f831 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a8a:	4915      	ldr	r1, [pc, #84]	; (80a0ae0 <_Z14TryGetMessagesv.part.0+0x2b0>)
 80a0a8c:	f001 fb6e 	bl	80a216c <_ZN5Print7printlnEPKc>
 80a0a90:	e7cc      	b.n	80a0a2c <_Z14TryGetMessagesv.part.0+0x1fc>
      Serial.println("recv failed");
 80a0a92:	f002 f82b 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0a96:	4913      	ldr	r1, [pc, #76]	; (80a0ae4 <_Z14TryGetMessagesv.part.0+0x2b4>)
 80a0a98:	f001 fb68 	bl	80a216c <_ZN5Print7printlnEPKc>
 80a0a9c:	e7cd      	b.n	80a0a3a <_Z14TryGetMessagesv.part.0+0x20a>
 80a0a9e:	bf00      	nop
 80a0aa0:	20007b78 	.word	0x20007b78
 80a0aa4:	20000004 	.word	0x20000004
 80a0aa8:	080a3e3a 	.word	0x080a3e3a
 80a0aac:	080a3e48 	.word	0x080a3e48
 80a0ab0:	080a3e6e 	.word	0x080a3e6e
 80a0ab4:	080a3e4a 	.word	0x080a3e4a
 80a0ab8:	080a3e4d 	.word	0x080a3e4d
 80a0abc:	080a3e50 	.word	0x080a3e50
 80a0ac0:	080a3e59 	.word	0x080a3e59
 80a0ac4:	200000a0 	.word	0x200000a0
 80a0ac8:	080a3e5c 	.word	0x080a3e5c
 80a0acc:	20007b20 	.word	0x20007b20
 80a0ad0:	080a3e70 	.word	0x080a3e70
 80a0ad4:	080a3dc3 	.word	0x080a3dc3
 80a0ad8:	080a3ea0 	.word	0x080a3ea0
 80a0adc:	080a3ea7 	.word	0x080a3ea7
 80a0ae0:	080a3eb5 	.word	0x080a3eb5
 80a0ae4:	080a3eeb 	.word	0x080a3eeb

080a0ae8 <_Z14TryGetMessagesv>:
{
 80a0ae8:	b508      	push	{r3, lr}
  if (rf95.available())
 80a0aea:	4804      	ldr	r0, [pc, #16]	; (80a0afc <_Z14TryGetMessagesv+0x14>)
 80a0aec:	f000 fa51 	bl	80a0f92 <_ZN7RH_RF959availableEv>
 80a0af0:	b118      	cbz	r0, 80a0afa <_Z14TryGetMessagesv+0x12>
}
 80a0af2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0af6:	f7ff be9b 	b.w	80a0830 <_Z14TryGetMessagesv.part.0>
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	20007b78 	.word	0x20007b78

080a0b00 <loop>:
{
 80a0b00:	b508      	push	{r3, lr}
  TryGetPhoto();
 80a0b02:	f7ff fb8d 	bl	80a0220 <_Z11TryGetPhotov>
  TryGetMessages();
 80a0b06:	f7ff ffef 	bl	80a0ae8 <_Z14TryGetMessagesv>
  TrySendQue();
 80a0b0a:	f7ff fcd3 	bl	80a04b4 <_Z10TrySendQuev>
  TrySendImage();
 80a0b0e:	f7ff fc35 	bl	80a037c <_Z12TrySendImagev>
}
 80a0b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TryGetMessages();
 80a0b16:	f7ff bfe7 	b.w	80a0ae8 <_Z14TryGetMessagesv>

080a0b1a <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 80a0b1a:	2001      	movs	r0, #1
 80a0b1c:	4770      	bx	lr

080a0b1e <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 80a0b1e:	b510      	push	{r4, lr}
 80a0b20:	4604      	mov	r4, r0
    while (!available())
 80a0b22:	6823      	ldr	r3, [r4, #0]
 80a0b24:	4620      	mov	r0, r4
 80a0b26:	685b      	ldr	r3, [r3, #4]
 80a0b28:	4798      	blx	r3
 80a0b2a:	2800      	cmp	r0, #0
 80a0b2c:	d0f9      	beq.n	80a0b22 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 80a0b2e:	bd10      	pop	{r4, pc}

080a0b30 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 80a0b30:	7903      	ldrb	r3, [r0, #4]
 80a0b32:	2b03      	cmp	r3, #3
 80a0b34:	d0fc      	beq.n	80a0b30 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 80a0b36:	2001      	movs	r0, #1
 80a0b38:	4770      	bx	lr

080a0b3a <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 80a0b3a:	7181      	strb	r1, [r0, #6]
}
 80a0b3c:	4770      	bx	lr

080a0b3e <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 80a0b3e:	7141      	strb	r1, [r0, #5]
}
 80a0b40:	4770      	bx	lr

080a0b42 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 80a0b42:	72c1      	strb	r1, [r0, #11]
}
 80a0b44:	4770      	bx	lr

080a0b46 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 80a0b46:	7301      	strb	r1, [r0, #12]
}
 80a0b48:	4770      	bx	lr

080a0b4a <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 80a0b4a:	7341      	strb	r1, [r0, #13]
}
 80a0b4c:	4770      	bx	lr

080a0b4e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 80a0b4e:	7b83      	ldrb	r3, [r0, #14]
 80a0b50:	ea23 0302 	bic.w	r3, r3, r2
    _txHeaderFlags |= set;
 80a0b54:	4319      	orrs	r1, r3
 80a0b56:	7381      	strb	r1, [r0, #14]
}
 80a0b58:	4770      	bx	lr

080a0b5a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 80a0b5a:	79c0      	ldrb	r0, [r0, #7]
}
 80a0b5c:	4770      	bx	lr

080a0b5e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 80a0b5e:	7a00      	ldrb	r0, [r0, #8]
}
 80a0b60:	4770      	bx	lr

080a0b62 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 80a0b62:	7a40      	ldrb	r0, [r0, #9]
}
 80a0b64:	4770      	bx	lr

080a0b66 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 80a0b66:	7a80      	ldrb	r0, [r0, #10]
}
 80a0b68:	4770      	bx	lr

080a0b6a <_ZN15RHGenericDriver5sleepEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
 80a0b6a:	2000      	movs	r0, #0
 80a0b6c:	4770      	bx	lr

080a0b6e <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 80a0b6e:	b570      	push	{r4, r5, r6, lr}
 80a0b70:	4604      	mov	r4, r0
 80a0b72:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0b74:	f000 fcd2 	bl	80a151c <HAL_Timer_Get_Milli_Seconds>
 80a0b78:	4605      	mov	r5, r0
 80a0b7a:	f000 fccf 	bl	80a151c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 80a0b7e:	1b40      	subs	r0, r0, r5
 80a0b80:	42b0      	cmp	r0, r6
 80a0b82:	d206      	bcs.n	80a0b92 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 80a0b84:	6823      	ldr	r3, [r4, #0]
 80a0b86:	4620      	mov	r0, r4
 80a0b88:	685b      	ldr	r3, [r3, #4]
 80a0b8a:	4798      	blx	r3
 80a0b8c:	2800      	cmp	r0, #0
 80a0b8e:	d0f4      	beq.n	80a0b7a <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 80a0b90:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a0b92:	2000      	movs	r0, #0
 80a0b94:	e7fc      	b.n	80a0b90 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

080a0b96 <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 80a0b96:	b570      	push	{r4, r5, r6, lr}
 80a0b98:	4604      	mov	r4, r0
 80a0b9a:	460e      	mov	r6, r1
 80a0b9c:	f000 fcbe 	bl	80a151c <HAL_Timer_Get_Milli_Seconds>
 80a0ba0:	4605      	mov	r5, r0
 80a0ba2:	f000 fcbb 	bl	80a151c <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 80a0ba6:	1b40      	subs	r0, r0, r5
 80a0ba8:	42b0      	cmp	r0, r6
 80a0baa:	d204      	bcs.n	80a0bb6 <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 80a0bac:	7923      	ldrb	r3, [r4, #4]
 80a0bae:	2b03      	cmp	r3, #3
 80a0bb0:	d0f7      	beq.n	80a0ba2 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 80a0bb2:	2001      	movs	r0, #1
}
 80a0bb4:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a0bb6:	2000      	movs	r0, #0
 80a0bb8:	e7fc      	b.n	80a0bb4 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>
	...

080a0bbc <_ZN15RHGenericDriverC1Ev>:
    _txGood(0)
 80a0bbc:	4a06      	ldr	r2, [pc, #24]	; (80a0bd8 <_ZN15RHGenericDriverC1Ev+0x1c>)
 80a0bbe:	21ff      	movs	r1, #255	; 0xff
 80a0bc0:	6002      	str	r2, [r0, #0]
 80a0bc2:	2200      	movs	r2, #0
 80a0bc4:	7141      	strb	r1, [r0, #5]
 80a0bc6:	7102      	strb	r2, [r0, #4]
 80a0bc8:	72c1      	strb	r1, [r0, #11]
 80a0bca:	8202      	strh	r2, [r0, #16]
 80a0bcc:	8181      	strh	r1, [r0, #12]
 80a0bce:	8242      	strh	r2, [r0, #18]
 80a0bd0:	7382      	strb	r2, [r0, #14]
 80a0bd2:	8282      	strh	r2, [r0, #20]
}
 80a0bd4:	4770      	bx	lr
 80a0bd6:	bf00      	nop
 80a0bd8:	080a3f40 	.word	0x080a3f40

080a0bdc <_ZN15RHGenericDriver8lastRssiEv>:
    return _lastRssi;
 80a0bdc:	7bc0      	ldrb	r0, [r0, #15]
}
 80a0bde:	b240      	sxtb	r0, r0
 80a0be0:	4770      	bx	lr

080a0be2 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// \param[in] frequency The data rate to use: one of RHGenericSPI::Frequency
    virtual void setFrequency(Frequency frequency);

    // Try to add SPI Transaction support
    // Note: Maybe add some way to set SPISettings?
    virtual void beginTransaction() {};
 80a0be2:	4770      	bx	lr

080a0be4 <_ZN12RHGenericSPI14endTransactionEv>:
    virtual void endTransaction() {};
 80a0be4:	4770      	bx	lr

080a0be6 <_ZN13RHHardwareSPI15attachInterruptEv>:
void RHHardwareSPI::attachInterrupt() 
{
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO)
    SPI.attachInterrupt();
#endif
}
 80a0be6:	4770      	bx	lr

080a0be8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a0be8:	b510      	push	{r4, lr}
 80a0bea:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0bec:	6880      	ldr	r0, [r0, #8]
 80a0bee:	b108      	cbz	r0, 80a0bf4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0bf0:	f000 fcfc 	bl	80a15ec <os_mutex_recursive_destroy>
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	bd10      	pop	{r4, pc}

080a0bf8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 80a0bf8:	b510      	push	{r4, lr}
 80a0bfa:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 80a0bfc:	f000 f890 	bl	80a0d20 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 80a0c00:	4b01      	ldr	r3, [pc, #4]	; (80a0c08 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x10>)
}
 80a0c02:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 80a0c04:	6023      	str	r3, [r4, #0]
}
 80a0c06:	bd10      	pop	{r4, pc}
 80a0c08:	080a3fa0 	.word	0x080a3fa0

080a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a0c0c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a0c0e:	4d0c      	ldr	r5, [pc, #48]	; (80a0c40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a0c10:	7829      	ldrb	r1, [r5, #0]
 80a0c12:	f3bf 8f5b 	dmb	ish
 80a0c16:	f011 0401 	ands.w	r4, r1, #1
 80a0c1a:	d10f      	bne.n	80a0c3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a0c1c:	4628      	mov	r0, r5
 80a0c1e:	f7ff fa4d 	bl	80a00bc <__cxa_guard_acquire>
 80a0c22:	b158      	cbz	r0, 80a0c3c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a0c24:	4621      	mov	r1, r4
 80a0c26:	4807      	ldr	r0, [pc, #28]	; (80a0c44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a0c28:	f000 ff19 	bl	80a1a5e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0c2c:	4628      	mov	r0, r5
 80a0c2e:	f7ff fa4a 	bl	80a00c6 <__cxa_guard_release>
 80a0c32:	4a05      	ldr	r2, [pc, #20]	; (80a0c48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80a0c34:	4905      	ldr	r1, [pc, #20]	; (80a0c4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80a0c36:	4803      	ldr	r0, [pc, #12]	; (80a0c44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a0c38:	f002 fa56 	bl	80a30e8 <__aeabi_atexit>
        return instance;
    }
 80a0c3c:	4801      	ldr	r0, [pc, #4]	; (80a0c44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a0c3e:	bd38      	pop	{r3, r4, r5, pc}
 80a0c40:	200080f0 	.word	0x200080f0
 80a0c44:	200080f4 	.word	0x200080f4
 80a0c48:	20000078 	.word	0x20000078
 80a0c4c:	080a0be9 	.word	0x080a0be9

080a0c50 <_ZN13RHHardwareSPI8transferEh>:
{
 80a0c50:	b510      	push	{r4, lr}
 80a0c52:	460c      	mov	r4, r1
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a0c54:	f7ff ffda 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0c58:	4621      	mov	r1, r4
}
 80a0c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c5e:	f000 bf85 	b.w	80a1b6c <_ZN8SPIClass8transferEh>

080a0c62 <_ZN13RHHardwareSPI3endEv>:
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif
}

void RHHardwareSPI::end() 
{
 80a0c62:	b508      	push	{r3, lr}
        instance().end();
 80a0c64:	f7ff ffd2 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
 80a0c68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0c6c:	f000 bf14 	b.w	80a1a98 <_ZN8SPIClass3endEv>

080a0c70 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE13setClockSpeedEjj.isra.0.constprop.0>:
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
 80a0c70:	b510      	push	{r4, lr}
 80a0c72:	4604      	mov	r4, r0
        return instance().setClockSpeed(value, scale);
 80a0c74:	f7ff ffca 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0c78:	4621      	mov	r1, r4
    }
 80a0c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().setClockSpeed(value, scale);
 80a0c7e:	4a01      	ldr	r2, [pc, #4]	; (80a0c84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE13setClockSpeedEjj.isra.0.constprop.0+0x14>)
 80a0c80:	f000 bf48 	b.w	80a1b14 <_ZN8SPIClass13setClockSpeedEjj>
 80a0c84:	000f4240 	.word	0x000f4240

080a0c88 <_ZN13RHHardwareSPI5beginEv>:
{
 80a0c88:	b538      	push	{r3, r4, r5, lr}
 80a0c8a:	4605      	mov	r5, r0
    Serial.println("HERE");
 80a0c8c:	f001 ff2e 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a0c90:	491a      	ldr	r1, [pc, #104]	; (80a0cfc <_ZN13RHHardwareSPI5beginEv+0x74>)
 80a0c92:	f001 fa6b 	bl	80a216c <_ZN5Print7printlnEPKc>
    if (_dataMode == DataMode0)
 80a0c96:	79ac      	ldrb	r4, [r5, #6]
 80a0c98:	b134      	cbz	r4, 80a0ca8 <_ZN13RHHardwareSPI5beginEv+0x20>
    else if (_dataMode == DataMode1)
 80a0c9a:	2c01      	cmp	r4, #1
 80a0c9c:	d004      	beq.n	80a0ca8 <_ZN13RHHardwareSPI5beginEv+0x20>
    else if (_dataMode == DataMode2)
 80a0c9e:	2c02      	cmp	r4, #2
 80a0ca0:	d002      	beq.n	80a0ca8 <_ZN13RHHardwareSPI5beginEv+0x20>
	dataMode = SPI_MODE0;
 80a0ca2:	2c03      	cmp	r4, #3
 80a0ca4:	bf18      	it	ne
 80a0ca6:	2400      	movne	r4, #0
        instance().setDataMode(mode);
 80a0ca8:	f7ff ffb0 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0cac:	4621      	mov	r1, r4
 80a0cae:	f000 ff0d 	bl	80a1acc <_ZN8SPIClass11setDataModeEh>
    if (_bitOrder == BitOrderLSBFirst)
 80a0cb2:	796b      	ldrb	r3, [r5, #5]
 80a0cb4:	2b01      	cmp	r3, #1
 80a0cb6:	d10c      	bne.n	80a0cd2 <_ZN13RHHardwareSPI5beginEv+0x4a>
        instance().setBitOrder(order);
 80a0cb8:	f7ff ffa8 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0cbc:	2100      	movs	r1, #0
 80a0cbe:	f000 fef7 	bl	80a1ab0 <_ZN8SPIClass11setBitOrderEh>
    switch (_frequency)
 80a0cc2:	792b      	ldrb	r3, [r5, #4]
 80a0cc4:	3b01      	subs	r3, #1
 80a0cc6:	2b03      	cmp	r3, #3
 80a0cc8:	d807      	bhi.n	80a0cda <_ZN13RHHardwareSPI5beginEv+0x52>
 80a0cca:	e8df f003 	tbb	[pc, r3]
 80a0cce:	110f      	.short	0x110f
 80a0cd0:	1513      	.short	0x1513
 80a0cd2:	f7ff ff9b 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0cd6:	2101      	movs	r1, #1
 80a0cd8:	e7f1      	b.n	80a0cbe <_ZN13RHHardwareSPI5beginEv+0x36>
	    SPI.setClockSpeed(1, MHZ);
 80a0cda:	2001      	movs	r0, #1
	    SPI.setClockSpeed(16, MHZ);
 80a0cdc:	f7ff ffc8 	bl	80a0c70 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE13setClockSpeedEjj.isra.0.constprop.0>
        instance().begin();
 80a0ce0:	f7ff ff94 	bl	80a0c0c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
 80a0ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0ce8:	f000 bec8 	b.w	80a1a7c <_ZN8SPIClass5beginEv>
	    SPI.setClockSpeed(2, MHZ);
 80a0cec:	2002      	movs	r0, #2
 80a0cee:	e7f5      	b.n	80a0cdc <_ZN13RHHardwareSPI5beginEv+0x54>
	    SPI.setClockSpeed(4, MHZ);
 80a0cf0:	2004      	movs	r0, #4
 80a0cf2:	e7f3      	b.n	80a0cdc <_ZN13RHHardwareSPI5beginEv+0x54>
	    SPI.setClockSpeed(8, MHZ);
 80a0cf4:	2008      	movs	r0, #8
 80a0cf6:	e7f1      	b.n	80a0cdc <_ZN13RHHardwareSPI5beginEv+0x54>
	    SPI.setClockSpeed(16, MHZ);
 80a0cf8:	2010      	movs	r0, #16
 80a0cfa:	e7ef      	b.n	80a0cdc <_ZN13RHHardwareSPI5beginEv+0x54>
 80a0cfc:	080a3f90 	.word	0x080a3f90

080a0d00 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 80a0d00:	2300      	movs	r3, #0
 80a0d02:	4802      	ldr	r0, [pc, #8]	; (80a0d0c <_GLOBAL__sub_I_hardware_spi+0xc>)
 80a0d04:	461a      	mov	r2, r3
 80a0d06:	4619      	mov	r1, r3
 80a0d08:	f7ff bf76 	b.w	80a0bf8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 80a0d0c:	20008100 	.word	0x20008100

080a0d10 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual void attachInterrupt() {};
 80a0d10:	4770      	bx	lr

080a0d12 <_ZN12RHGenericSPI15detachInterruptEv>:
    virtual void detachInterrupt() {};
 80a0d12:	4770      	bx	lr

080a0d14 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 80a0d14:	7141      	strb	r1, [r0, #5]
}
 80a0d16:	4770      	bx	lr

080a0d18 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 80a0d18:	7181      	strb	r1, [r0, #6]
}
 80a0d1a:	4770      	bx	lr

080a0d1c <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 80a0d1c:	7101      	strb	r1, [r0, #4]
}
 80a0d1e:	4770      	bx	lr

080a0d20 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 80a0d20:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 80a0d22:	4d03      	ldr	r5, [pc, #12]	; (80a0d30 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 80a0d24:	7101      	strb	r1, [r0, #4]
 80a0d26:	6005      	str	r5, [r0, #0]
 80a0d28:	7142      	strb	r2, [r0, #5]
 80a0d2a:	7183      	strb	r3, [r0, #6]
}
 80a0d2c:	bd30      	pop	{r4, r5, pc}
 80a0d2e:	bf00      	nop
 80a0d30:	080a3fd0 	.word	0x080a3fd0

080a0d34 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 80a0d34:	20fb      	movs	r0, #251	; 0xfb
 80a0d36:	4770      	bx	lr

080a0d38 <_ZN7RH_RF955sleepEv>:
	_mode = RHModeIdle;
    }
}

bool RH_RF95::sleep()
{
 80a0d38:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 80a0d3a:	7903      	ldrb	r3, [r0, #4]
{
 80a0d3c:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 80a0d3e:	2b01      	cmp	r3, #1
 80a0d40:	d005      	beq.n	80a0d4e <_ZN7RH_RF955sleepEv+0x16>
    {
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 80a0d42:	2200      	movs	r2, #0
 80a0d44:	2101      	movs	r1, #1
 80a0d46:	f000 fa9c 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 80a0d4a:	2301      	movs	r3, #1
 80a0d4c:	7123      	strb	r3, [r4, #4]
    }
    return true;
}
 80a0d4e:	2001      	movs	r0, #1
 80a0d50:	bd10      	pop	{r4, pc}
	...

080a0d54 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 80a0d54:	b538      	push	{r3, r4, r5, lr}
 80a0d56:	4604      	mov	r4, r0
 80a0d58:	4615      	mov	r5, r2
    _rxBufValid(0)
 80a0d5a:	461a      	mov	r2, r3
 80a0d5c:	f000 fa5c 	bl	80a1218 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 80a0d60:	4b04      	ldr	r3, [pc, #16]	; (80a0d74 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x20>)
}
 80a0d62:	4620      	mov	r0, r4
    _rxBufValid(0)
 80a0d64:	6023      	str	r3, [r4, #0]
 80a0d66:	2300      	movs	r3, #0
 80a0d68:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    _myInterruptIndex = 0xff; // Not allocated yet
 80a0d6c:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 80a0d6e:	7765      	strb	r5, [r4, #29]
    _myInterruptIndex = 0xff; // Not allocated yet
 80a0d70:	77a3      	strb	r3, [r4, #30]
}
 80a0d72:	bd38      	pop	{r3, r4, r5, pc}
 80a0d74:	080a4014 	.word	0x080a4014

080a0d78 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 80a0d78:	7fc3      	ldrb	r3, [r0, #31]
 80a0d7a:	2b03      	cmp	r3, #3
 80a0d7c:	d91b      	bls.n	80a0db6 <_ZN7RH_RF9513validateRxBufEv+0x3e>
    _rxHeaderTo    = _buf[0];
 80a0d7e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0d82:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 80a0d84:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80a0d88:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 80a0d8a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80a0d8e:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 80a0d90:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80a0d94:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 80a0d96:	7983      	ldrb	r3, [r0, #6]
 80a0d98:	b933      	cbnz	r3, 80a0da8 <_ZN7RH_RF9513validateRxBufEv+0x30>
 80a0d9a:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 80a0d9c:	7942      	ldrb	r2, [r0, #5]
 80a0d9e:	429a      	cmp	r2, r3
 80a0da0:	d002      	beq.n	80a0da8 <_ZN7RH_RF9513validateRxBufEv+0x30>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 80a0da2:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 80a0da4:	2bff      	cmp	r3, #255	; 0xff
 80a0da6:	d106      	bne.n	80a0db6 <_ZN7RH_RF9513validateRxBufEv+0x3e>
	_rxGood++;
 80a0da8:	8a43      	ldrh	r3, [r0, #18]
 80a0daa:	3301      	adds	r3, #1
 80a0dac:	b29b      	uxth	r3, r3
 80a0dae:	8243      	strh	r3, [r0, #18]
	_rxBufValid = true;
 80a0db0:	2301      	movs	r3, #1
 80a0db2:	f880 311f 	strb.w	r3, [r0, #287]	; 0x11f
}
 80a0db6:	4770      	bx	lr

080a0db8 <_ZN7RH_RF9510clearRxBufEv>:
{
 80a0db8:	b510      	push	{r4, lr}
 80a0dba:	4604      	mov	r4, r0
    ATOMIC_BLOCK_START;
 80a0dbc:	f000 fbb6 	bl	80a152c <HAL_disable_irq>
    _rxBufValid = false;
 80a0dc0:	2300      	movs	r3, #0
 80a0dc2:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    _bufLen = 0;
 80a0dc6:	77e3      	strb	r3, [r4, #31]
}
 80a0dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ATOMIC_BLOCK_END;
 80a0dcc:	f000 bbb6 	b.w	80a153c <HAL_enable_irq>

080a0dd0 <_ZN7RH_RF954recvEPhS0_>:
{
 80a0dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!available())
 80a0dd4:	6803      	ldr	r3, [r0, #0]
{
 80a0dd6:	4604      	mov	r4, r0
    if (!available())
 80a0dd8:	685b      	ldr	r3, [r3, #4]
{
 80a0dda:	460f      	mov	r7, r1
 80a0ddc:	4615      	mov	r5, r2
    if (!available())
 80a0dde:	4798      	blx	r3
 80a0de0:	4606      	mov	r6, r0
 80a0de2:	b1c8      	cbz	r0, 80a0e18 <_ZN7RH_RF954recvEPhS0_+0x48>
    if (buf && len)
 80a0de4:	b1af      	cbz	r7, 80a0e12 <_ZN7RH_RF954recvEPhS0_+0x42>
 80a0de6:	b1a5      	cbz	r5, 80a0e12 <_ZN7RH_RF954recvEPhS0_+0x42>
	ATOMIC_BLOCK_START;
 80a0de8:	f000 fba0 	bl	80a152c <HAL_disable_irq>
 80a0dec:	4680      	mov	r8, r0
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 80a0dee:	7fe3      	ldrb	r3, [r4, #31]
 80a0df0:	782a      	ldrb	r2, [r5, #0]
 80a0df2:	3b03      	subs	r3, #3
 80a0df4:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 80a0df6:	bfd8      	it	le
 80a0df8:	7fe3      	ldrble	r3, [r4, #31]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 80a0dfa:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 80a0dfc:	bfdc      	itt	le
 80a0dfe:	3b04      	suble	r3, #4
 80a0e00:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 80a0e02:	782a      	ldrb	r2, [r5, #0]
 80a0e04:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80a0e08:	f002 feec 	bl	80a3be4 <memcpy>
	ATOMIC_BLOCK_END;
 80a0e0c:	4640      	mov	r0, r8
 80a0e0e:	f000 fb95 	bl	80a153c <HAL_enable_irq>
    clearRxBuf(); // This message accepted and cleared
 80a0e12:	4620      	mov	r0, r4
 80a0e14:	f7ff ffd0 	bl	80a0db8 <_ZN7RH_RF9510clearRxBufEv>
}
 80a0e18:	4630      	mov	r0, r6
 80a0e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a0e20 <_ZN7RH_RF9512setFrequencyEf>:
{
 80a0e20:	b538      	push	{r3, r4, r5, lr}
 80a0e22:	4604      	mov	r4, r0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 80a0e24:	4608      	mov	r0, r1
 80a0e26:	f002 facf 	bl	80a33c8 <__aeabi_f2d>
 80a0e2a:	a311      	add	r3, pc, #68	; (adr r3, 80a0e70 <_ZN7RH_RF9512setFrequencyEf+0x50>)
 80a0e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0e30:	f002 fb22 	bl	80a3478 <__aeabi_dmul>
 80a0e34:	a310      	add	r3, pc, #64	; (adr r3, 80a0e78 <_ZN7RH_RF9512setFrequencyEf+0x58>)
 80a0e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0e3a:	f002 fc47 	bl	80a36cc <__aeabi_ddiv>
 80a0e3e:	f002 fd2d 	bl	80a389c <__aeabi_d2uiz>
 80a0e42:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 80a0e44:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80a0e48:	2106      	movs	r1, #6
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	f000 fa19 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 80a0e50:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0e54:	2107      	movs	r1, #7
 80a0e56:	4620      	mov	r0, r4
 80a0e58:	f000 fa13 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 80a0e5c:	2108      	movs	r1, #8
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	b2ea      	uxtb	r2, r5
 80a0e62:	f000 fa0e 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
}
 80a0e66:	2001      	movs	r0, #1
 80a0e68:	bd38      	pop	{r3, r4, r5, pc}
 80a0e6a:	bf00      	nop
 80a0e6c:	f3af 8000 	nop.w
 80a0e70:	00000000 	.word	0x00000000
 80a0e74:	412e8480 	.word	0x412e8480
 80a0e78:	00000000 	.word	0x00000000
 80a0e7c:	404e8480 	.word	0x404e8480

080a0e80 <_ZN7RH_RF9511setModeIdleEv>:
{
 80a0e80:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 80a0e82:	7903      	ldrb	r3, [r0, #4]
{
 80a0e84:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 80a0e86:	2b02      	cmp	r3, #2
 80a0e88:	d005      	beq.n	80a0e96 <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 80a0e8a:	2201      	movs	r2, #1
 80a0e8c:	4611      	mov	r1, r2
 80a0e8e:	f000 f9f8 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 80a0e92:	2302      	movs	r3, #2
 80a0e94:	7123      	strb	r3, [r4, #4]
}
 80a0e96:	bd10      	pop	{r4, pc}

080a0e98 <_ZN7RH_RF9515handleInterruptEv>:
{
 80a0e98:	b538      	push	{r3, r4, r5, lr}
 80a0e9a:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 80a0e9c:	2112      	movs	r1, #18
 80a0e9e:	f000 f9c9 	bl	80a1234 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 80a0ea2:	7923      	ldrb	r3, [r4, #4]
 80a0ea4:	2b04      	cmp	r3, #4
 80a0ea6:	d10d      	bne.n	80a0ec4 <_ZN7RH_RF9515handleInterruptEv+0x2c>
 80a0ea8:	f010 0fa0 	tst.w	r0, #160	; 0xa0
 80a0eac:	d00a      	beq.n	80a0ec4 <_ZN7RH_RF9515handleInterruptEv+0x2c>
	_rxBad++;
 80a0eae:	8a23      	ldrh	r3, [r4, #16]
 80a0eb0:	3301      	adds	r3, #1
 80a0eb2:	b29b      	uxth	r3, r3
 80a0eb4:	8223      	strh	r3, [r4, #16]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0eb6:	4620      	mov	r0, r4
}
 80a0eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0ebc:	22ff      	movs	r2, #255	; 0xff
 80a0ebe:	2112      	movs	r1, #18
 80a0ec0:	f000 b9df 	b.w	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 80a0ec4:	7923      	ldrb	r3, [r4, #4]
 80a0ec6:	2b04      	cmp	r3, #4
 80a0ec8:	d101      	bne.n	80a0ece <_ZN7RH_RF9515handleInterruptEv+0x36>
 80a0eca:	0642      	lsls	r2, r0, #25
 80a0ecc:	d409      	bmi.n	80a0ee2 <_ZN7RH_RF9515handleInterruptEv+0x4a>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 80a0ece:	7923      	ldrb	r3, [r4, #4]
 80a0ed0:	2b03      	cmp	r3, #3
 80a0ed2:	d1f0      	bne.n	80a0eb6 <_ZN7RH_RF9515handleInterruptEv+0x1e>
 80a0ed4:	0703      	lsls	r3, r0, #28
 80a0ed6:	d5ee      	bpl.n	80a0eb6 <_ZN7RH_RF9515handleInterruptEv+0x1e>
	_txGood++;
 80a0ed8:	8aa3      	ldrh	r3, [r4, #20]
 80a0eda:	3301      	adds	r3, #1
 80a0edc:	b29b      	uxth	r3, r3
 80a0ede:	82a3      	strh	r3, [r4, #20]
 80a0ee0:	e028      	b.n	80a0f34 <_ZN7RH_RF9515handleInterruptEv+0x9c>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 80a0ee2:	2113      	movs	r1, #19
 80a0ee4:	4620      	mov	r0, r4
 80a0ee6:	f000 f9a5 	bl	80a1234 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80a0eea:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 80a0eec:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80a0eee:	4620      	mov	r0, r4
 80a0ef0:	f000 f9a0 	bl	80a1234 <_ZN11RHSPIDriver7spiReadEh>
 80a0ef4:	210d      	movs	r1, #13
 80a0ef6:	4602      	mov	r2, r0
 80a0ef8:	4620      	mov	r0, r4
 80a0efa:	f000 f9c2 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 80a0efe:	462b      	mov	r3, r5
 80a0f00:	2100      	movs	r1, #0
 80a0f02:	f104 0220 	add.w	r2, r4, #32
 80a0f06:	4620      	mov	r0, r4
 80a0f08:	f000 f9e3 	bl	80a12d2 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0f0c:	22ff      	movs	r2, #255	; 0xff
 80a0f0e:	2112      	movs	r1, #18
 80a0f10:	4620      	mov	r0, r4
	_bufLen = len;
 80a0f12:	77e5      	strb	r5, [r4, #31]
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0f14:	f000 f9b5 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE) - 137;
 80a0f18:	211a      	movs	r1, #26
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	f000 f98a 	bl	80a1234 <_ZN11RHSPIDriver7spiReadEh>
 80a0f20:	3077      	adds	r0, #119	; 0x77
 80a0f22:	b240      	sxtb	r0, r0
 80a0f24:	73e0      	strb	r0, [r4, #15]
	validateRxBuf(); 
 80a0f26:	4620      	mov	r0, r4
 80a0f28:	f7ff ff26 	bl	80a0d78 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 80a0f2c:	f894 311f 	ldrb.w	r3, [r4, #287]	; 0x11f
 80a0f30:	2b00      	cmp	r3, #0
 80a0f32:	d0c0      	beq.n	80a0eb6 <_ZN7RH_RF9515handleInterruptEv+0x1e>
	setModeIdle();
 80a0f34:	4620      	mov	r0, r4
 80a0f36:	f7ff ffa3 	bl	80a0e80 <_ZN7RH_RF9511setModeIdleEv>
 80a0f3a:	e7bc      	b.n	80a0eb6 <_ZN7RH_RF9515handleInterruptEv+0x1e>

080a0f3c <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 80a0f3c:	4b02      	ldr	r3, [pc, #8]	; (80a0f48 <_ZN7RH_RF954isr0Ev+0xc>)
 80a0f3e:	6818      	ldr	r0, [r3, #0]
 80a0f40:	b108      	cbz	r0, 80a0f46 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 80a0f42:	f7ff bfa9 	b.w	80a0e98 <_ZN7RH_RF9515handleInterruptEv>
}
 80a0f46:	4770      	bx	lr
 80a0f48:	2000810c 	.word	0x2000810c

080a0f4c <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 80a0f4c:	4b02      	ldr	r3, [pc, #8]	; (80a0f58 <_ZN7RH_RF954isr1Ev+0xc>)
 80a0f4e:	6858      	ldr	r0, [r3, #4]
 80a0f50:	b108      	cbz	r0, 80a0f56 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 80a0f52:	f7ff bfa1 	b.w	80a0e98 <_ZN7RH_RF9515handleInterruptEv>
}
 80a0f56:	4770      	bx	lr
 80a0f58:	2000810c 	.word	0x2000810c

080a0f5c <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 80a0f5c:	4b02      	ldr	r3, [pc, #8]	; (80a0f68 <_ZN7RH_RF954isr2Ev+0xc>)
 80a0f5e:	6898      	ldr	r0, [r3, #8]
 80a0f60:	b108      	cbz	r0, 80a0f66 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 80a0f62:	f7ff bf99 	b.w	80a0e98 <_ZN7RH_RF9515handleInterruptEv>
}
 80a0f66:	4770      	bx	lr
 80a0f68:	2000810c 	.word	0x2000810c

080a0f6c <_ZN7RH_RF959setModeRxEv>:

void RH_RF95::setModeRx()
{
 80a0f6c:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 80a0f6e:	7903      	ldrb	r3, [r0, #4]
{
 80a0f70:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 80a0f72:	2b04      	cmp	r3, #4
 80a0f74:	d00c      	beq.n	80a0f90 <_ZN7RH_RF959setModeRxEv+0x24>
    {
       //Serial.println("SetModeRx");
       _mode = RHModeRx;
 80a0f76:	2304      	movs	r3, #4
	   spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 80a0f78:	2205      	movs	r2, #5
 80a0f7a:	2101      	movs	r1, #1
       _mode = RHModeRx;
 80a0f7c:	7103      	strb	r3, [r0, #4]
	   spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 80a0f7e:	f000 f980 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	   spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 80a0f82:	4620      	mov	r0, r4
    }
}
 80a0f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 80a0f88:	2200      	movs	r2, #0
 80a0f8a:	2140      	movs	r1, #64	; 0x40
 80a0f8c:	f000 b979 	b.w	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
}
 80a0f90:	bd10      	pop	{r4, pc}

080a0f92 <_ZN7RH_RF959availableEv>:
{
 80a0f92:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 80a0f94:	7903      	ldrb	r3, [r0, #4]
{
 80a0f96:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 80a0f98:	2b03      	cmp	r3, #3
 80a0f9a:	d005      	beq.n	80a0fa8 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 80a0f9c:	f7ff ffe6 	bl	80a0f6c <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 80a0fa0:	f894 011f 	ldrb.w	r0, [r4, #287]	; 0x11f
 80a0fa4:	b2c0      	uxtb	r0, r0
}
 80a0fa6:	bd10      	pop	{r4, pc}
	return false;
 80a0fa8:	2000      	movs	r0, #0
 80a0faa:	e7fc      	b.n	80a0fa6 <_ZN7RH_RF959availableEv+0x14>

080a0fac <_ZN7RH_RF959setModeTxEv>:

void RH_RF95::setModeTx()
{
 80a0fac:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 80a0fae:	7903      	ldrb	r3, [r0, #4]
{
 80a0fb0:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 80a0fb2:	2b03      	cmp	r3, #3
 80a0fb4:	d00b      	beq.n	80a0fce <_ZN7RH_RF959setModeTxEv+0x22>
    {
    _mode = RHModeTx;       // set first to avoid possible race condition
 80a0fb6:	2203      	movs	r2, #3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 80a0fb8:	2101      	movs	r1, #1
    _mode = RHModeTx;       // set first to avoid possible race condition
 80a0fba:	7102      	strb	r2, [r0, #4]
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 80a0fbc:	f000 f961 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 80a0fc0:	2240      	movs	r2, #64	; 0x40
 80a0fc2:	4620      	mov	r0, r4
    }
}
 80a0fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 80a0fc8:	4611      	mov	r1, r2
 80a0fca:	f000 b95a 	b.w	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
}
 80a0fce:	bd10      	pop	{r4, pc}

080a0fd0 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 80a0fd0:	2afb      	cmp	r2, #251	; 0xfb
{
 80a0fd2:	b570      	push	{r4, r5, r6, lr}
 80a0fd4:	4604      	mov	r4, r0
 80a0fd6:	460e      	mov	r6, r1
 80a0fd8:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 80a0fda:	d82f      	bhi.n	80a103c <_ZN7RH_RF954sendEPKhh+0x6c>
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 80a0fdc:	6803      	ldr	r3, [r0, #0]
 80a0fde:	699b      	ldr	r3, [r3, #24]
 80a0fe0:	4798      	blx	r3
    setModeIdle();
 80a0fe2:	4620      	mov	r0, r4
 80a0fe4:	f7ff ff4c 	bl	80a0e80 <_ZN7RH_RF9511setModeIdleEv>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 80a0fe8:	2200      	movs	r2, #0
 80a0fea:	210d      	movs	r1, #13
 80a0fec:	4620      	mov	r0, r4
 80a0fee:	f000 f948 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 80a0ff2:	2100      	movs	r1, #0
 80a0ff4:	7ae2      	ldrb	r2, [r4, #11]
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	f000 f943 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 80a0ffc:	2100      	movs	r1, #0
 80a0ffe:	7b22      	ldrb	r2, [r4, #12]
 80a1000:	4620      	mov	r0, r4
 80a1002:	f000 f93e 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 80a1006:	2100      	movs	r1, #0
 80a1008:	7b62      	ldrb	r2, [r4, #13]
 80a100a:	4620      	mov	r0, r4
 80a100c:	f000 f939 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 80a1010:	2100      	movs	r1, #0
 80a1012:	7ba2      	ldrb	r2, [r4, #14]
 80a1014:	4620      	mov	r0, r4
 80a1016:	f000 f934 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 80a101a:	462b      	mov	r3, r5
 80a101c:	4632      	mov	r2, r6
 80a101e:	2100      	movs	r1, #0
 80a1020:	4620      	mov	r0, r4
 80a1022:	f000 f987 	bl	80a1334 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 80a1026:	1d2a      	adds	r2, r5, #4
 80a1028:	2122      	movs	r1, #34	; 0x22
 80a102a:	b2d2      	uxtb	r2, r2
 80a102c:	4620      	mov	r0, r4
 80a102e:	f000 f928 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 80a1032:	4620      	mov	r0, r4
 80a1034:	f7ff ffba 	bl	80a0fac <_ZN7RH_RF959setModeTxEv>
 80a1038:	2001      	movs	r0, #1
}
 80a103a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 80a103c:	2000      	movs	r0, #0
 80a103e:	e7fc      	b.n	80a103a <_ZN7RH_RF954sendEPKhh+0x6a>

080a1040 <_ZN7RH_RF9510setTxPowerEab>:

void RH_RF95::setTxPower(int8_t power, bool useRFO)
{
 80a1040:	b538      	push	{r3, r4, r5, lr}
 80a1042:	4605      	mov	r5, r0
 80a1044:	460c      	mov	r4, r1
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
 80a1046:	b16a      	cbz	r2, 80a1064 <_ZN7RH_RF9510setTxPowerEab+0x24>
    {
	if (power > 14)
	    power = 14;
	if (power < -1)
	    power = -1;
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 80a1048:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
 80a104c:	2a0e      	cmp	r2, #14
 80a104e:	bfa8      	it	ge
 80a1050:	220e      	movge	r2, #14
 80a1052:	2109      	movs	r1, #9
 80a1054:	3201      	adds	r2, #1
 80a1056:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80a105a:	b2d2      	uxtb	r2, r2
	// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
	// but OutputPower claims it would be 17dBm.
	// My measurements show 20dBm is correct
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 80a105c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 80a1060:	f000 b90f 	b.w	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 23)
 80a1064:	2917      	cmp	r1, #23
 80a1066:	dc11      	bgt.n	80a108c <_ZN7RH_RF9510setTxPowerEab+0x4c>
	if (power < 5)
 80a1068:	2904      	cmp	r1, #4
 80a106a:	dd11      	ble.n	80a1090 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power > 20)
 80a106c:	2914      	cmp	r1, #20
 80a106e:	dd10      	ble.n	80a1092 <_ZN7RH_RF9510setTxPowerEab+0x52>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 80a1070:	2207      	movs	r2, #7
 80a1072:	214d      	movs	r1, #77	; 0x4d
 80a1074:	4628      	mov	r0, r5
 80a1076:	f000 f904 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 80a107a:	3c03      	subs	r4, #3
 80a107c:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 80a107e:	1f62      	subs	r2, r4, #5
 80a1080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80a1084:	2109      	movs	r1, #9
 80a1086:	4628      	mov	r0, r5
 80a1088:	b2d2      	uxtb	r2, r2
 80a108a:	e7e7      	b.n	80a105c <_ZN7RH_RF9510setTxPowerEab+0x1c>
	    power = 23;
 80a108c:	2417      	movs	r4, #23
 80a108e:	e7ef      	b.n	80a1070 <_ZN7RH_RF9510setTxPowerEab+0x30>
	    power = 5;
 80a1090:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 80a1092:	2204      	movs	r2, #4
 80a1094:	214d      	movs	r1, #77	; 0x4d
 80a1096:	4628      	mov	r0, r5
 80a1098:	f000 f8f3 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
 80a109c:	e7ef      	b.n	80a107e <_ZN7RH_RF9510setTxPowerEab+0x3e>

080a109e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:

// Sets registers from a canned modem configuration structure
void RH_RF95::setModemRegisters(const ModemConfig* config)
{
 80a109e:	b538      	push	{r3, r4, r5, lr}
 80a10a0:	4605      	mov	r5, r0
 80a10a2:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 80a10a4:	780a      	ldrb	r2, [r1, #0]
 80a10a6:	211d      	movs	r1, #29
 80a10a8:	f000 f8eb 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 80a10ac:	7862      	ldrb	r2, [r4, #1]
 80a10ae:	211e      	movs	r1, #30
 80a10b0:	4628      	mov	r0, r5
 80a10b2:	f000 f8e6 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 80a10b6:	4628      	mov	r0, r5
 80a10b8:	78a2      	ldrb	r2, [r4, #2]
 80a10ba:	2126      	movs	r1, #38	; 0x26
}
 80a10bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 80a10c0:	f000 b8df 	b.w	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>

080a10c4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:

// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool RH_RF95::setModemConfig(ModemConfigChoice index)
{
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 80a10c4:	2906      	cmp	r1, #6
{
 80a10c6:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 80a10c8:	d80f      	bhi.n	80a10ea <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
        return false;

    ModemConfig cfg;
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 80a10ca:	4b09      	ldr	r3, [pc, #36]	; (80a10f0 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 80a10cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a10d0:	185c      	adds	r4, r3, r1
 80a10d2:	5a5a      	ldrh	r2, [r3, r1]
 80a10d4:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 80a10d6:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 80a10d8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a10dc:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 80a10e0:	f7ff ffdd 	bl	80a109e <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>

    return true;
 80a10e4:	2001      	movs	r0, #1
}
 80a10e6:	b002      	add	sp, #8
 80a10e8:	bd10      	pop	{r4, pc}
        return false;
 80a10ea:	2000      	movs	r0, #0
 80a10ec:	e7fb      	b.n	80a10e6 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 80a10ee:	bf00      	nop
 80a10f0:	080a3ff8 	.word	0x080a3ff8

080a10f4 <_ZN7RH_RF9517setPreambleLengthEt>:

void RH_RF95::setPreambleLength(uint16_t bytes)
{
 80a10f4:	b538      	push	{r3, r4, r5, lr}
 80a10f6:	4605      	mov	r5, r0
 80a10f8:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 80a10fa:	0a0a      	lsrs	r2, r1, #8
 80a10fc:	2120      	movs	r1, #32
 80a10fe:	f000 f8c0 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80a1102:	4628      	mov	r0, r5
 80a1104:	b2e2      	uxtb	r2, r4
 80a1106:	2121      	movs	r1, #33	; 0x21
}
 80a1108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80a110c:	f000 b8b9 	b.w	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>

080a1110 <_ZN7RH_RF954initEv>:
{
 80a1110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1112:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 80a1114:	f000 f86c 	bl	80a11f0 <_ZN11RHSPIDriver4initEv>
 80a1118:	4605      	mov	r5, r0
 80a111a:	b918      	cbnz	r0, 80a1124 <_ZN7RH_RF954initEv+0x14>
	return false;
 80a111c:	2500      	movs	r5, #0
}
 80a111e:	4628      	mov	r0, r5
 80a1120:	b002      	add	sp, #8
 80a1122:	bd70      	pop	{r4, r5, r6, pc}
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80a1124:	2280      	movs	r2, #128	; 0x80
 80a1126:	2101      	movs	r1, #1
 80a1128:	4620      	mov	r0, r4
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 80a112a:	7f66      	ldrb	r6, [r4, #29]
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80a112c:	f000 f8a9 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 80a1130:	200a      	movs	r0, #10
 80a1132:	f001 f8b1 	bl	80a2298 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 80a1136:	2101      	movs	r1, #1
 80a1138:	4620      	mov	r0, r4
 80a113a:	f000 f87b 	bl	80a1234 <_ZN11RHSPIDriver7spiReadEh>
 80a113e:	2880      	cmp	r0, #128	; 0x80
 80a1140:	d1ec      	bne.n	80a111c <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 80a1142:	2100      	movs	r1, #0
 80a1144:	7f60      	ldrb	r0, [r4, #29]
 80a1146:	f001 ff4d 	bl	80a2fe4 <pinMode>
    if (_myInterruptIndex == 0xff)
 80a114a:	7fa3      	ldrb	r3, [r4, #30]
 80a114c:	2bff      	cmp	r3, #255	; 0xff
 80a114e:	d106      	bne.n	80a115e <_ZN7RH_RF954initEv+0x4e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 80a1150:	4a21      	ldr	r2, [pc, #132]	; (80a11d8 <_ZN7RH_RF954initEv+0xc8>)
 80a1152:	7813      	ldrb	r3, [r2, #0]
 80a1154:	2b03      	cmp	r3, #3
 80a1156:	d8e1      	bhi.n	80a111c <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 80a1158:	1c59      	adds	r1, r3, #1
 80a115a:	7011      	strb	r1, [r2, #0]
 80a115c:	77a3      	strb	r3, [r4, #30]
    _deviceForInterrupt[_myInterruptIndex] = this;
 80a115e:	7fa2      	ldrb	r2, [r4, #30]
 80a1160:	4b1e      	ldr	r3, [pc, #120]	; (80a11dc <_ZN7RH_RF954initEv+0xcc>)
 80a1162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 80a1166:	bb32      	cbnz	r2, 80a11b6 <_ZN7RH_RF954initEv+0xa6>
	attachInterrupt(interruptNumber, isr0, RISING);
 80a1168:	9200      	str	r2, [sp, #0]
 80a116a:	f04f 33ff 	mov.w	r3, #4294967295
 80a116e:	2201      	movs	r2, #1
 80a1170:	491b      	ldr	r1, [pc, #108]	; (80a11e0 <_ZN7RH_RF954initEv+0xd0>)
	attachInterrupt(interruptNumber, isr2, RISING);
 80a1172:	4630      	mov	r0, r6
 80a1174:	f001 fd14 	bl	80a2ba0 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 80a1178:	2200      	movs	r2, #0
 80a117a:	210e      	movs	r1, #14
 80a117c:	4620      	mov	r0, r4
 80a117e:	f000 f880 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 80a1182:	2200      	movs	r2, #0
 80a1184:	210f      	movs	r1, #15
 80a1186:	4620      	mov	r0, r4
 80a1188:	f000 f87b 	bl	80a1282 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 80a118c:	4620      	mov	r0, r4
 80a118e:	f7ff fe77 	bl	80a0e80 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw500Cr45Sf512);
 80a1192:	2105      	movs	r1, #5
 80a1194:	4620      	mov	r0, r4
 80a1196:	f7ff ff95 	bl	80a10c4 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 80a119a:	4620      	mov	r0, r4
 80a119c:	2108      	movs	r1, #8
 80a119e:	f7ff ffa9 	bl	80a10f4 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(915.0);
 80a11a2:	4620      	mov	r0, r4
 80a11a4:	490f      	ldr	r1, [pc, #60]	; (80a11e4 <_ZN7RH_RF954initEv+0xd4>)
 80a11a6:	f7ff fe3b 	bl	80a0e20 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(17, false);
 80a11aa:	2200      	movs	r2, #0
 80a11ac:	2111      	movs	r1, #17
 80a11ae:	4620      	mov	r0, r4
 80a11b0:	f7ff ff46 	bl	80a1040 <_ZN7RH_RF9510setTxPowerEab>
    return true;
 80a11b4:	e7b3      	b.n	80a111e <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 80a11b6:	2a01      	cmp	r2, #1
 80a11b8:	f04f 0300 	mov.w	r3, #0
 80a11bc:	d104      	bne.n	80a11c8 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr1, RISING);
 80a11be:	9300      	str	r3, [sp, #0]
 80a11c0:	4909      	ldr	r1, [pc, #36]	; (80a11e8 <_ZN7RH_RF954initEv+0xd8>)
 80a11c2:	f04f 33ff 	mov.w	r3, #4294967295
 80a11c6:	e7d4      	b.n	80a1172 <_ZN7RH_RF954initEv+0x62>
    else if (_myInterruptIndex == 2)
 80a11c8:	2a02      	cmp	r2, #2
 80a11ca:	d1a7      	bne.n	80a111c <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 80a11cc:	9300      	str	r3, [sp, #0]
 80a11ce:	2201      	movs	r2, #1
 80a11d0:	f04f 33ff 	mov.w	r3, #4294967295
 80a11d4:	4905      	ldr	r1, [pc, #20]	; (80a11ec <_ZN7RH_RF954initEv+0xdc>)
 80a11d6:	e7cc      	b.n	80a1172 <_ZN7RH_RF954initEv+0x62>
 80a11d8:	20008108 	.word	0x20008108
 80a11dc:	2000810c 	.word	0x2000810c
 80a11e0:	080a0f3d 	.word	0x080a0f3d
 80a11e4:	4464c000 	.word	0x4464c000
 80a11e8:	080a0f4d 	.word	0x080a0f4d
 80a11ec:	080a0f5d 	.word	0x080a0f5d

080a11f0 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 80a11f0:	b510      	push	{r4, lr}
 80a11f2:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 80a11f4:	6980      	ldr	r0, [r0, #24]
 80a11f6:	6803      	ldr	r3, [r0, #0]
 80a11f8:	68db      	ldr	r3, [r3, #12]
 80a11fa:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 80a11fc:	7f20      	ldrb	r0, [r4, #28]
 80a11fe:	2101      	movs	r1, #1
 80a1200:	f001 fef0 	bl	80a2fe4 <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 80a1204:	2101      	movs	r1, #1
 80a1206:	7f20      	ldrb	r0, [r4, #28]
 80a1208:	f001 fefd 	bl	80a3006 <digitalWrite>

    delay(100);
 80a120c:	2064      	movs	r0, #100	; 0x64
 80a120e:	f001 f843 	bl	80a2298 <delay>
    return true;
}
 80a1212:	2001      	movs	r0, #1
 80a1214:	bd10      	pop	{r4, pc}
	...

080a1218 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 80a1218:	b570      	push	{r4, r5, r6, lr}
 80a121a:	4604      	mov	r4, r0
 80a121c:	460d      	mov	r5, r1
 80a121e:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 80a1220:	f7ff fccc 	bl	80a0bbc <_ZN15RHGenericDriverC1Ev>
 80a1224:	4b02      	ldr	r3, [pc, #8]	; (80a1230 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x18>)
}
 80a1226:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 80a1228:	6023      	str	r3, [r4, #0]
 80a122a:	61a6      	str	r6, [r4, #24]
 80a122c:	7725      	strb	r5, [r4, #28]
}
 80a122e:	bd70      	pop	{r4, r5, r6, pc}
 80a1230:	080a406c 	.word	0x080a406c

080a1234 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 80a1234:	b570      	push	{r4, r5, r6, lr}
 80a1236:	4604      	mov	r4, r0
 80a1238:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
 80a123a:	f000 f977 	bl	80a152c <HAL_disable_irq>
 80a123e:	4606      	mov	r6, r0
    _spi.beginTransaction();
 80a1240:	69a0      	ldr	r0, [r4, #24]
 80a1242:	6803      	ldr	r3, [r0, #0]
 80a1244:	6a1b      	ldr	r3, [r3, #32]
 80a1246:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a1248:	7f20      	ldrb	r0, [r4, #28]
 80a124a:	2100      	movs	r1, #0
 80a124c:	f001 fedb 	bl	80a3006 <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 80a1250:	69a0      	ldr	r0, [r4, #24]
 80a1252:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 80a1256:	6803      	ldr	r3, [r0, #0]
 80a1258:	681b      	ldr	r3, [r3, #0]
 80a125a:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 80a125c:	69a0      	ldr	r0, [r4, #24]
 80a125e:	2100      	movs	r1, #0
 80a1260:	6803      	ldr	r3, [r0, #0]
 80a1262:	681b      	ldr	r3, [r3, #0]
 80a1264:	4798      	blx	r3
 80a1266:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 80a1268:	2101      	movs	r1, #1
 80a126a:	7f20      	ldrb	r0, [r4, #28]
 80a126c:	f001 fecb 	bl	80a3006 <digitalWrite>
    _spi.endTransaction();
 80a1270:	69a0      	ldr	r0, [r4, #24]
 80a1272:	6803      	ldr	r3, [r0, #0]
 80a1274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1276:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a1278:	4630      	mov	r0, r6
 80a127a:	f000 f95f 	bl	80a153c <HAL_enable_irq>
    return val;
}
 80a127e:	4628      	mov	r0, r5
 80a1280:	bd70      	pop	{r4, r5, r6, pc}

080a1282 <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 80a1282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1284:	4617      	mov	r7, r2
 80a1286:	4604      	mov	r4, r0
 80a1288:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a128a:	f000 f94f 	bl	80a152c <HAL_disable_irq>
 80a128e:	4606      	mov	r6, r0
    _spi.beginTransaction();
 80a1290:	69a0      	ldr	r0, [r4, #24]
 80a1292:	6803      	ldr	r3, [r0, #0]
 80a1294:	6a1b      	ldr	r3, [r3, #32]
 80a1296:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a1298:	7f20      	ldrb	r0, [r4, #28]
 80a129a:	2100      	movs	r1, #0
 80a129c:	f001 feb3 	bl	80a3006 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 80a12a0:	69a0      	ldr	r0, [r4, #24]
 80a12a2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a12a6:	6803      	ldr	r3, [r0, #0]
 80a12a8:	681b      	ldr	r3, [r3, #0]
 80a12aa:	4798      	blx	r3
 80a12ac:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 80a12ae:	69a0      	ldr	r0, [r4, #24]
 80a12b0:	4639      	mov	r1, r7
 80a12b2:	6803      	ldr	r3, [r0, #0]
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 80a12b8:	2101      	movs	r1, #1
 80a12ba:	7f20      	ldrb	r0, [r4, #28]
 80a12bc:	f001 fea3 	bl	80a3006 <digitalWrite>
    _spi.endTransaction();
 80a12c0:	69a0      	ldr	r0, [r4, #24]
 80a12c2:	6803      	ldr	r3, [r0, #0]
 80a12c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a12c6:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a12c8:	4630      	mov	r0, r6
 80a12ca:	f000 f937 	bl	80a153c <HAL_enable_irq>
    return status;
}
 80a12ce:	4628      	mov	r0, r5
 80a12d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12d2 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 80a12d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a12d6:	460f      	mov	r7, r1
 80a12d8:	4615      	mov	r5, r2
 80a12da:	4604      	mov	r4, r0
 80a12dc:	461e      	mov	r6, r3
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a12de:	f000 f925 	bl	80a152c <HAL_disable_irq>
 80a12e2:	4680      	mov	r8, r0
    _spi.beginTransaction();
 80a12e4:	69a0      	ldr	r0, [r4, #24]
 80a12e6:	442e      	add	r6, r5
 80a12e8:	6803      	ldr	r3, [r0, #0]
 80a12ea:	6a1b      	ldr	r3, [r3, #32]
 80a12ec:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a12ee:	2100      	movs	r1, #0
 80a12f0:	7f20      	ldrb	r0, [r4, #28]
 80a12f2:	f001 fe88 	bl	80a3006 <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 80a12f6:	69a0      	ldr	r0, [r4, #24]
 80a12f8:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 80a12fc:	6803      	ldr	r3, [r0, #0]
 80a12fe:	681b      	ldr	r3, [r3, #0]
 80a1300:	4798      	blx	r3
 80a1302:	4607      	mov	r7, r0
    while (len--)
 80a1304:	42b5      	cmp	r5, r6
 80a1306:	d007      	beq.n	80a1318 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x46>
	*dest++ = _spi.transfer(0);
 80a1308:	69a0      	ldr	r0, [r4, #24]
 80a130a:	2100      	movs	r1, #0
 80a130c:	6803      	ldr	r3, [r0, #0]
 80a130e:	681b      	ldr	r3, [r3, #0]
 80a1310:	4798      	blx	r3
 80a1312:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 80a1316:	e7f5      	b.n	80a1304 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x32>
    digitalWrite(_slaveSelectPin, HIGH);
 80a1318:	2101      	movs	r1, #1
 80a131a:	7f20      	ldrb	r0, [r4, #28]
 80a131c:	f001 fe73 	bl	80a3006 <digitalWrite>
    _spi.endTransaction();
 80a1320:	69a0      	ldr	r0, [r4, #24]
 80a1322:	6803      	ldr	r3, [r0, #0]
 80a1324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1326:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a1328:	4640      	mov	r0, r8
 80a132a:	f000 f907 	bl	80a153c <HAL_enable_irq>
    return status;
}
 80a132e:	4638      	mov	r0, r7
 80a1330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1334 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 80a1334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1338:	460f      	mov	r7, r1
 80a133a:	4615      	mov	r5, r2
 80a133c:	4604      	mov	r4, r0
 80a133e:	461e      	mov	r6, r3
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a1340:	f000 f8f4 	bl	80a152c <HAL_disable_irq>
 80a1344:	4680      	mov	r8, r0
    _spi.beginTransaction();
 80a1346:	69a0      	ldr	r0, [r4, #24]
 80a1348:	442e      	add	r6, r5
 80a134a:	6803      	ldr	r3, [r0, #0]
 80a134c:	6a1b      	ldr	r3, [r3, #32]
 80a134e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a1350:	2100      	movs	r1, #0
 80a1352:	7f20      	ldrb	r0, [r4, #28]
 80a1354:	f001 fe57 	bl	80a3006 <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 80a1358:	69a0      	ldr	r0, [r4, #24]
 80a135a:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 80a135e:	6803      	ldr	r3, [r0, #0]
 80a1360:	681b      	ldr	r3, [r3, #0]
 80a1362:	4798      	blx	r3
 80a1364:	4607      	mov	r7, r0
    while (len--)
 80a1366:	42b5      	cmp	r5, r6
 80a1368:	d006      	beq.n	80a1378 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x44>
	_spi.transfer(*src++);
 80a136a:	69a0      	ldr	r0, [r4, #24]
 80a136c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1370:	6803      	ldr	r3, [r0, #0]
 80a1372:	681b      	ldr	r3, [r3, #0]
 80a1374:	4798      	blx	r3
    while (len--)
 80a1376:	e7f6      	b.n	80a1366 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x32>
    digitalWrite(_slaveSelectPin, HIGH);
 80a1378:	2101      	movs	r1, #1
 80a137a:	7f20      	ldrb	r0, [r4, #28]
 80a137c:	f001 fe43 	bl	80a3006 <digitalWrite>
    _spi.endTransaction();
 80a1380:	69a0      	ldr	r0, [r4, #24]
 80a1382:	6803      	ldr	r3, [r0, #0]
 80a1384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1386:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a1388:	4640      	mov	r0, r8
 80a138a:	f000 f8d7 	bl	80a153c <HAL_enable_irq>
    return status;
}
 80a138e:	4638      	mov	r0, r7
 80a1390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1394 <_ZN16SerialBufferBase17availableForWriteEv>:
int SerialBufferBase::available() {
	return ring.availableForRead();
}

int SerialBufferBase::availableForWrite() {
	return port.availableForWrite();
 80a1394:	6980      	ldr	r0, [r0, #24]
 80a1396:	6803      	ldr	r3, [r0, #0]
 80a1398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a139a:	4718      	bx	r3

080a139c <_ZN16SerialBufferBase5flushEv>:
void SerialBufferBase::readClear() {
	ring.readClear();
}

void SerialBufferBase::flush() {
	port.flush();
 80a139c:	6980      	ldr	r0, [r0, #24]
 80a139e:	6803      	ldr	r3, [r0, #0]
 80a13a0:	69db      	ldr	r3, [r3, #28]
 80a13a2:	4718      	bx	r3

080a13a4 <_ZN16SerialBufferBase5writeEh>:
}

size_t SerialBufferBase::write(uint8_t c) {
	return port.write(c);
 80a13a4:	6980      	ldr	r0, [r0, #24]
 80a13a6:	6803      	ldr	r3, [r0, #0]
 80a13a8:	689b      	ldr	r3, [r3, #8]
 80a13aa:	4718      	bx	r3

080a13ac <_ZN16SerialBufferBase9availableEv>:
	 *
	 * This is mainly for informational purposes. It's more efficient to call preRead() and check for a non-NULL
	 * return value than it is to call availableForRead().
	 */
	size_t availableForRead() const {
		return (size + head - tail) % size;
 80a13ac:	6a02      	ldr	r2, [r0, #32]
 80a13ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80a13b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a13b2:	4413      	add	r3, r2
 80a13b4:	1a1b      	subs	r3, r3, r0
 80a13b6:	fbb3 f0f2 	udiv	r0, r3, r2
}
 80a13ba:	fb02 3010 	mls	r0, r2, r0, r3
 80a13be:	4770      	bx	lr

080a13c0 <_ZN16SerialBufferBase4readEv>:
int SerialBufferBase::read() {
 80a13c0:	b510      	push	{r4, lr}
	 *
	 * It's OK to not call postRead() if you're doing a peek at the data - look at the data that will be read without
	 * removing it.
	 */
	T *preRead() const {
		if (head == tail) {
 80a13c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80a13c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80a13c6:	429a      	cmp	r2, r3
 80a13c8:	d00e      	beq.n	80a13e8 <_ZN16SerialBufferBase4readEv+0x28>
			return NULL;
		}
		else {
			return &elems[tail];
 80a13ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80a13cc:	69c2      	ldr	r2, [r0, #28]
	 *
	 * @return Returns true if an element was copied or false if there was no data to read.
	 */
	bool read(T *elem) {
		T *src = preRead();
		if (src != NULL) {
 80a13ce:	42da      	cmn	r2, r3
 80a13d0:	d00a      	beq.n	80a13e8 <_ZN16SerialBufferBase4readEv+0x28>
			*elem = *src;
 80a13d2:	5cd3      	ldrb	r3, [r2, r3]
		size_t next = (tail + 1) % size;
 80a13d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80a13d6:	6a04      	ldr	r4, [r0, #32]
 80a13d8:	3201      	adds	r2, #1
 80a13da:	fbb2 f1f4 	udiv	r1, r2, r4
 80a13de:	fb04 2211 	mls	r2, r4, r1, r2
		tail = next;
 80a13e2:	6282      	str	r2, [r0, #40]	; 0x28
		return (int) temp;
 80a13e4:	4618      	mov	r0, r3
}
 80a13e6:	bd10      	pop	{r4, pc}
		return -1;
 80a13e8:	f04f 30ff 	mov.w	r0, #4294967295
 80a13ec:	e7fb      	b.n	80a13e6 <_ZN16SerialBufferBase4readEv+0x26>

080a13ee <_ZN16SerialBufferBaseD1Ev>:
class SerialBufferBase : public Stream {
 80a13ee:	4770      	bx	lr

080a13f0 <_ZN16SerialBufferBaseD0Ev>:
 80a13f0:	b510      	push	{r4, lr}
 80a13f2:	4604      	mov	r4, r0
 80a13f4:	2130      	movs	r1, #48	; 0x30
 80a13f6:	f001 fe7c 	bl	80a30f2 <_ZdlPvj>
 80a13fa:	4620      	mov	r0, r4
 80a13fc:	bd10      	pop	{r4, pc}

080a13fe <_ZN16SerialBufferBase4peekEv>:
		if (head == tail) {
 80a13fe:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80a1400:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80a1402:	429a      	cmp	r2, r3
 80a1404:	d005      	beq.n	80a1412 <_ZN16SerialBufferBase4peekEv+0x14>
			return &elems[tail];
 80a1406:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80a1408:	69c2      	ldr	r2, [r0, #28]
	if (p != NULL) {
 80a140a:	42da      	cmn	r2, r3
 80a140c:	d001      	beq.n	80a1412 <_ZN16SerialBufferBase4peekEv+0x14>
		return (int) *p;
 80a140e:	5cd0      	ldrb	r0, [r2, r3]
 80a1410:	4770      	bx	lr
		return -1;
 80a1412:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1416:	4770      	bx	lr

080a1418 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>:
SerialBufferBase::SerialBufferBase(uint8_t *buf, size_t bufSize, USARTSerial &port) :
 80a1418:	b570      	push	{r4, r5, r6, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a141a:	2500      	movs	r5, #0
 80a141c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80a1420:	e9c0 5601 	strd	r5, r6, [r0, #4]
	buf(buf), bufSize(bufSize), port(port), ring(buf, bufSize) {
 80a1424:	4e04      	ldr	r6, [pc, #16]	; (80a1438 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial+0x20>)
	RingBuffer(T *elems, size_t size) : elems(elems), size(size) {};
 80a1426:	6245      	str	r5, [r0, #36]	; 0x24
 80a1428:	e9c0 1204 	strd	r1, r2, [r0, #16]
 80a142c:	e9c0 3106 	strd	r3, r1, [r0, #24]
 80a1430:	6006      	str	r6, [r0, #0]
 80a1432:	6202      	str	r2, [r0, #32]
 80a1434:	6285      	str	r5, [r0, #40]	; 0x28
}
 80a1436:	bd70      	pop	{r4, r5, r6, pc}
 80a1438:	080a40d4 	.word	0x080a40d4

080a143c <_ZN16SerialBufferBase5setupEv>:
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
 80a143c:	f44f 7380 	mov.w	r3, #256	; 0x100
void SerialBufferBase::setup() {
 80a1440:	b507      	push	{r0, r1, r2, lr}
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
 80a1442:	2202      	movs	r2, #2
 80a1444:	e9cd 0300 	strd	r0, r3, [sp]
 80a1448:	4903      	ldr	r1, [pc, #12]	; (80a1458 <_ZN16SerialBufferBase5setupEv+0x1c>)
 80a144a:	4b04      	ldr	r3, [pc, #16]	; (80a145c <_ZN16SerialBufferBase5setupEv+0x20>)
 80a144c:	302c      	adds	r0, #44	; 0x2c
 80a144e:	f000 f88d 	bl	80a156c <os_thread_create>
}
 80a1452:	b003      	add	sp, #12
 80a1454:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1458:	080a40bc 	.word	0x080a40bc
 80a145c:	080a14a7 	.word	0x080a14a7

080a1460 <_ZN16SerialBufferBase14threadFunctionEv>:
}


void SerialBufferBase::threadFunction() {
 80a1460:	b570      	push	{r4, r5, r6, lr}
 80a1462:	4604      	mov	r4, r0
	 *
	 * If preWrite() returns a non-null value you must call postWrite() to commit the data, otherwise the data
	 * will not be saved. Don't call postWrite() if you get NULL back from preWrite()!
	 */
	T *preWrite() const {
		size_t next = (head + 1) % size;
 80a1464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a1466:	6a21      	ldr	r1, [r4, #32]
 80a1468:	3301      	adds	r3, #1
 80a146a:	fbb3 f2f1 	udiv	r2, r3, r1
 80a146e:	fb01 3312 	mls	r3, r1, r2, r3
		if (next == tail) {
 80a1472:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1474:	4283      	cmp	r3, r0
 80a1476:	d013      	beq.n	80a14a0 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
			// No space to write
			return NULL;
		}
		return &elems[head];
 80a1478:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a147a:	69e6      	ldr	r6, [r4, #28]
	while(true) {
		// Consume all of the outstanding data on the hardware port before yielding as long as there
		// is room in the ring buffer
		while(true) {
			uint8_t *p = ring.preWrite();
			if (!p) {
 80a147c:	42ee      	cmn	r6, r5
 80a147e:	d00f      	beq.n	80a14a0 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				// Ring buffer is full
				break;
			}

			int c = port.read();
 80a1480:	69a0      	ldr	r0, [r4, #24]
 80a1482:	6803      	ldr	r3, [r0, #0]
 80a1484:	695b      	ldr	r3, [r3, #20]
 80a1486:	4798      	blx	r3
			if (c < 0) {
 80a1488:	2800      	cmp	r0, #0
 80a148a:	db09      	blt.n	80a14a0 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				break;
			}

			*p = (uint8_t) c;
 80a148c:	5570      	strb	r0, [r6, r5]

	/**
	 * @brief Commits the write. Only call if preWrite() returned a non-NULL value.
	 */
	void postWrite() {
		size_t next = (head + 1) % size;
 80a148e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a1490:	6a21      	ldr	r1, [r4, #32]
 80a1492:	3301      	adds	r3, #1
 80a1494:	fbb3 f2f1 	udiv	r2, r3, r1
 80a1498:	fb01 3312 	mls	r3, r1, r2, r3
		head = next;
 80a149c:	6263      	str	r3, [r4, #36]	; 0x24
	}
 80a149e:	e7e1      	b.n	80a1464 <_ZN16SerialBufferBase14threadFunctionEv+0x4>
			ring.postWrite();
		}

		os_thread_yield();
 80a14a0:	f000 f86c 	bl	80a157c <os_thread_yield>
	}
 80a14a4:	e7de      	b.n	80a1464 <_ZN16SerialBufferBase14threadFunctionEv+0x4>

080a14a6 <_ZN16SerialBufferBase20threadFunctionStaticEPv>:
}

// [static]
void SerialBufferBase::threadFunctionStatic(void *param) {
 80a14a6:	b508      	push	{r3, lr}
	SerialBufferBase *This = (SerialBufferBase *)param;

	This->threadFunction();
 80a14a8:	f7ff ffda 	bl	80a1460 <_ZN16SerialBufferBase14threadFunctionEv>

080a14ac <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a14ac:	b508      	push	{r3, lr}
 80a14ae:	4b02      	ldr	r3, [pc, #8]	; (80a14b8 <HAL_Pin_Mode+0xc>)
 80a14b0:	681b      	ldr	r3, [r3, #0]
 80a14b2:	689b      	ldr	r3, [r3, #8]
 80a14b4:	9301      	str	r3, [sp, #4]
 80a14b6:	bd08      	pop	{r3, pc}
 80a14b8:	080601b0 	.word	0x080601b0

080a14bc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a14bc:	b508      	push	{r3, lr}
 80a14be:	4b02      	ldr	r3, [pc, #8]	; (80a14c8 <HAL_Get_Pin_Mode+0xc>)
 80a14c0:	681b      	ldr	r3, [r3, #0]
 80a14c2:	68db      	ldr	r3, [r3, #12]
 80a14c4:	9301      	str	r3, [sp, #4]
 80a14c6:	bd08      	pop	{r3, pc}
 80a14c8:	080601b0 	.word	0x080601b0

080a14cc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a14cc:	b508      	push	{r3, lr}
 80a14ce:	4b02      	ldr	r3, [pc, #8]	; (80a14d8 <HAL_GPIO_Write+0xc>)
 80a14d0:	681b      	ldr	r3, [r3, #0]
 80a14d2:	691b      	ldr	r3, [r3, #16]
 80a14d4:	9301      	str	r3, [sp, #4]
 80a14d6:	bd08      	pop	{r3, pc}
 80a14d8:	080601b0 	.word	0x080601b0

080a14dc <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a14dc:	b508      	push	{r3, lr}
 80a14de:	4b02      	ldr	r3, [pc, #8]	; (80a14e8 <HAL_Interrupts_Attach+0xc>)
 80a14e0:	681b      	ldr	r3, [r3, #0]
 80a14e2:	699b      	ldr	r3, [r3, #24]
 80a14e4:	9301      	str	r3, [sp, #4]
 80a14e6:	bd08      	pop	{r3, pc}
 80a14e8:	080601b0 	.word	0x080601b0

080a14ec <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a14ec:	b508      	push	{r3, lr}
 80a14ee:	4b02      	ldr	r3, [pc, #8]	; (80a14f8 <HAL_Interrupts_Detach+0xc>)
 80a14f0:	681b      	ldr	r3, [r3, #0]
 80a14f2:	69db      	ldr	r3, [r3, #28]
 80a14f4:	9301      	str	r3, [sp, #4]
 80a14f6:	bd08      	pop	{r3, pc}
 80a14f8:	080601b0 	.word	0x080601b0

080a14fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a14fc:	b508      	push	{r3, lr}
 80a14fe:	4b02      	ldr	r3, [pc, #8]	; (80a1508 <HAL_RNG_GetRandomNumber+0xc>)
 80a1500:	681b      	ldr	r3, [r3, #0]
 80a1502:	685b      	ldr	r3, [r3, #4]
 80a1504:	9301      	str	r3, [sp, #4]
 80a1506:	bd08      	pop	{r3, pc}
 80a1508:	0806019c 	.word	0x0806019c

080a150c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a150c:	b508      	push	{r3, lr}
 80a150e:	4b02      	ldr	r3, [pc, #8]	; (80a1518 <HAL_Delay_Microseconds+0xc>)
 80a1510:	681b      	ldr	r3, [r3, #0]
 80a1512:	68db      	ldr	r3, [r3, #12]
 80a1514:	9301      	str	r3, [sp, #4]
 80a1516:	bd08      	pop	{r3, pc}
 80a1518:	0806019c 	.word	0x0806019c

080a151c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a151c:	b508      	push	{r3, lr}
 80a151e:	4b02      	ldr	r3, [pc, #8]	; (80a1528 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1520:	681b      	ldr	r3, [r3, #0]
 80a1522:	695b      	ldr	r3, [r3, #20]
 80a1524:	9301      	str	r3, [sp, #4]
 80a1526:	bd08      	pop	{r3, pc}
 80a1528:	0806019c 	.word	0x0806019c

080a152c <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a152c:	b508      	push	{r3, lr}
 80a152e:	4b02      	ldr	r3, [pc, #8]	; (80a1538 <HAL_disable_irq+0xc>)
 80a1530:	681b      	ldr	r3, [r3, #0]
 80a1532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1534:	9301      	str	r3, [sp, #4]
 80a1536:	bd08      	pop	{r3, pc}
 80a1538:	0806019c 	.word	0x0806019c

080a153c <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a153c:	b508      	push	{r3, lr}
 80a153e:	4b02      	ldr	r3, [pc, #8]	; (80a1548 <HAL_enable_irq+0xc>)
 80a1540:	681b      	ldr	r3, [r3, #0]
 80a1542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1544:	9301      	str	r3, [sp, #4]
 80a1546:	bd08      	pop	{r3, pc}
 80a1548:	0806019c 	.word	0x0806019c

080a154c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a154c:	b508      	push	{r3, lr}
 80a154e:	4b02      	ldr	r3, [pc, #8]	; (80a1558 <hal_rtc_time_is_valid+0xc>)
 80a1550:	681b      	ldr	r3, [r3, #0]
 80a1552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1554:	9301      	str	r3, [sp, #4]
 80a1556:	bd08      	pop	{r3, pc}
 80a1558:	0806019c 	.word	0x0806019c

080a155c <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a155c:	b508      	push	{r3, lr}
 80a155e:	4b02      	ldr	r3, [pc, #8]	; (80a1568 <hal_rtc_get_time+0xc>)
 80a1560:	681b      	ldr	r3, [r3, #0]
 80a1562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1564:	9301      	str	r3, [sp, #4]
 80a1566:	bd08      	pop	{r3, pc}
 80a1568:	0806019c 	.word	0x0806019c

080a156c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a156c:	b508      	push	{r3, lr}
 80a156e:	4b02      	ldr	r3, [pc, #8]	; (80a1578 <os_thread_create+0xc>)
 80a1570:	681b      	ldr	r3, [r3, #0]
 80a1572:	685b      	ldr	r3, [r3, #4]
 80a1574:	9301      	str	r3, [sp, #4]
 80a1576:	bd08      	pop	{r3, pc}
 80a1578:	080601d0 	.word	0x080601d0

080a157c <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a157c:	b508      	push	{r3, lr}
 80a157e:	4b02      	ldr	r3, [pc, #8]	; (80a1588 <os_thread_yield+0xc>)
 80a1580:	681b      	ldr	r3, [r3, #0]
 80a1582:	68db      	ldr	r3, [r3, #12]
 80a1584:	9301      	str	r3, [sp, #4]
 80a1586:	bd08      	pop	{r3, pc}
 80a1588:	080601d0 	.word	0x080601d0

080a158c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a158c:	b508      	push	{r3, lr}
 80a158e:	4b02      	ldr	r3, [pc, #8]	; (80a1598 <os_thread_scheduling+0xc>)
 80a1590:	681b      	ldr	r3, [r3, #0]
 80a1592:	69db      	ldr	r3, [r3, #28]
 80a1594:	9301      	str	r3, [sp, #4]
 80a1596:	bd08      	pop	{r3, pc}
 80a1598:	080601d0 	.word	0x080601d0

080a159c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a159c:	b508      	push	{r3, lr}
 80a159e:	4b02      	ldr	r3, [pc, #8]	; (80a15a8 <os_timer_create+0xc>)
 80a15a0:	681b      	ldr	r3, [r3, #0]
 80a15a2:	6a1b      	ldr	r3, [r3, #32]
 80a15a4:	9301      	str	r3, [sp, #4]
 80a15a6:	bd08      	pop	{r3, pc}
 80a15a8:	080601d0 	.word	0x080601d0

080a15ac <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a15ac:	b508      	push	{r3, lr}
 80a15ae:	4b02      	ldr	r3, [pc, #8]	; (80a15b8 <os_timer_destroy+0xc>)
 80a15b0:	681b      	ldr	r3, [r3, #0]
 80a15b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a15b4:	9301      	str	r3, [sp, #4]
 80a15b6:	bd08      	pop	{r3, pc}
 80a15b8:	080601d0 	.word	0x080601d0

080a15bc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a15bc:	b508      	push	{r3, lr}
 80a15be:	4b02      	ldr	r3, [pc, #8]	; (80a15c8 <os_timer_get_id+0xc>)
 80a15c0:	681b      	ldr	r3, [r3, #0]
 80a15c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a15c4:	9301      	str	r3, [sp, #4]
 80a15c6:	bd08      	pop	{r3, pc}
 80a15c8:	080601d0 	.word	0x080601d0

080a15cc <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <os_timer_change+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601d0 	.word	0x080601d0

080a15dc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <os_mutex_recursive_create+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601d0 	.word	0x080601d0

080a15ec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <os_mutex_recursive_destroy+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601d0 	.word	0x080601d0

080a15fc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <os_mutex_recursive_lock+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	080601d0 	.word	0x080601d0

080a160c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <os_mutex_recursive_unlock+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601d0 	.word	0x080601d0

080a161c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <os_timer_set_id+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601d0 	.word	0x080601d0

080a162c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <hal_usart_init+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	699b      	ldr	r3, [r3, #24]
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601c4 	.word	0x080601c4

080a163c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <hal_usart_write+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601c4 	.word	0x080601c4

080a164c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <hal_usart_available+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601c4 	.word	0x080601c4

080a165c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <hal_usart_read+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601c4 	.word	0x080601c4

080a166c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <hal_usart_peek+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601c4 	.word	0x080601c4

080a167c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <hal_usart_flush+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601c4 	.word	0x080601c4

080a168c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <hal_usart_is_enabled+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601c4 	.word	0x080601c4

080a169c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a169c:	b508      	push	{r3, lr}
 80a169e:	4b02      	ldr	r3, [pc, #8]	; (80a16a8 <hal_usart_available_data_for_write+0xc>)
 80a16a0:	681b      	ldr	r3, [r3, #0]
 80a16a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16a4:	9301      	str	r3, [sp, #4]
 80a16a6:	bd08      	pop	{r3, pc}
 80a16a8:	080601c4 	.word	0x080601c4

080a16ac <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a16ac:	b508      	push	{r3, lr}
 80a16ae:	4b02      	ldr	r3, [pc, #8]	; (80a16b8 <hal_usart_begin_config+0xc>)
 80a16b0:	681b      	ldr	r3, [r3, #0]
 80a16b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a16b4:	9301      	str	r3, [sp, #4]
 80a16b6:	bd08      	pop	{r3, pc}
 80a16b8:	080601c4 	.word	0x080601c4

080a16bc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a16bc:	b508      	push	{r3, lr}
 80a16be:	4b02      	ldr	r3, [pc, #8]	; (80a16c8 <hal_i2c_write+0xc>)
 80a16c0:	681b      	ldr	r3, [r3, #0]
 80a16c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a16c4:	9301      	str	r3, [sp, #4]
 80a16c6:	bd08      	pop	{r3, pc}
 80a16c8:	080601ac 	.word	0x080601ac

080a16cc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a16cc:	b508      	push	{r3, lr}
 80a16ce:	4b02      	ldr	r3, [pc, #8]	; (80a16d8 <hal_i2c_available+0xc>)
 80a16d0:	681b      	ldr	r3, [r3, #0]
 80a16d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a16d4:	9301      	str	r3, [sp, #4]
 80a16d6:	bd08      	pop	{r3, pc}
 80a16d8:	080601ac 	.word	0x080601ac

080a16dc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a16dc:	b508      	push	{r3, lr}
 80a16de:	4b02      	ldr	r3, [pc, #8]	; (80a16e8 <hal_i2c_read+0xc>)
 80a16e0:	681b      	ldr	r3, [r3, #0]
 80a16e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a16e4:	9301      	str	r3, [sp, #4]
 80a16e6:	bd08      	pop	{r3, pc}
 80a16e8:	080601ac 	.word	0x080601ac

080a16ec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <hal_i2c_peek+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601ac 	.word	0x080601ac

080a16fc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <hal_i2c_flush+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601ac 	.word	0x080601ac

080a170c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <hal_i2c_is_enabled+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601ac 	.word	0x080601ac

080a171c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b03      	ldr	r3, [pc, #12]	; (80a172c <hal_i2c_init+0x10>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1726:	9301      	str	r3, [sp, #4]
 80a1728:	bd08      	pop	{r3, pc}
 80a172a:	0000      	.short	0x0000
 80a172c:	080601ac 	.word	0x080601ac

080a1730 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a1730:	b508      	push	{r3, lr}
 80a1732:	4b02      	ldr	r3, [pc, #8]	; (80a173c <hal_spi_begin+0xc>)
 80a1734:	681b      	ldr	r3, [r3, #0]
 80a1736:	681b      	ldr	r3, [r3, #0]
 80a1738:	9301      	str	r3, [sp, #4]
 80a173a:	bd08      	pop	{r3, pc}
 80a173c:	080601b4 	.word	0x080601b4

080a1740 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 80a1740:	b508      	push	{r3, lr}
 80a1742:	4b02      	ldr	r3, [pc, #8]	; (80a174c <hal_spi_end+0xc>)
 80a1744:	681b      	ldr	r3, [r3, #0]
 80a1746:	685b      	ldr	r3, [r3, #4]
 80a1748:	9301      	str	r3, [sp, #4]
 80a174a:	bd08      	pop	{r3, pc}
 80a174c:	080601b4 	.word	0x080601b4

080a1750 <hal_spi_set_bit_order>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 80a1750:	b508      	push	{r3, lr}
 80a1752:	4b02      	ldr	r3, [pc, #8]	; (80a175c <hal_spi_set_bit_order+0xc>)
 80a1754:	681b      	ldr	r3, [r3, #0]
 80a1756:	689b      	ldr	r3, [r3, #8]
 80a1758:	9301      	str	r3, [sp, #4]
 80a175a:	bd08      	pop	{r3, pc}
 80a175c:	080601b4 	.word	0x080601b4

080a1760 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 80a1760:	b508      	push	{r3, lr}
 80a1762:	4b02      	ldr	r3, [pc, #8]	; (80a176c <hal_spi_set_data_mode+0xc>)
 80a1764:	681b      	ldr	r3, [r3, #0]
 80a1766:	68db      	ldr	r3, [r3, #12]
 80a1768:	9301      	str	r3, [sp, #4]
 80a176a:	bd08      	pop	{r3, pc}
 80a176c:	080601b4 	.word	0x080601b4

080a1770 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 80a1770:	b508      	push	{r3, lr}
 80a1772:	4b02      	ldr	r3, [pc, #8]	; (80a177c <hal_spi_set_clock_divider+0xc>)
 80a1774:	681b      	ldr	r3, [r3, #0]
 80a1776:	691b      	ldr	r3, [r3, #16]
 80a1778:	9301      	str	r3, [sp, #4]
 80a177a:	bd08      	pop	{r3, pc}
 80a177c:	080601b4 	.word	0x080601b4

080a1780 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a1780:	b508      	push	{r3, lr}
 80a1782:	4b02      	ldr	r3, [pc, #8]	; (80a178c <hal_spi_transfer+0xc>)
 80a1784:	681b      	ldr	r3, [r3, #0]
 80a1786:	695b      	ldr	r3, [r3, #20]
 80a1788:	9301      	str	r3, [sp, #4]
 80a178a:	bd08      	pop	{r3, pc}
 80a178c:	080601b4 	.word	0x080601b4

080a1790 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1790:	b508      	push	{r3, lr}
 80a1792:	4b02      	ldr	r3, [pc, #8]	; (80a179c <hal_spi_init+0xc>)
 80a1794:	681b      	ldr	r3, [r3, #0]
 80a1796:	69db      	ldr	r3, [r3, #28]
 80a1798:	9301      	str	r3, [sp, #4]
 80a179a:	bd08      	pop	{r3, pc}
 80a179c:	080601b4 	.word	0x080601b4

080a17a0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a17a0:	b508      	push	{r3, lr}
 80a17a2:	4b02      	ldr	r3, [pc, #8]	; (80a17ac <hal_spi_is_enabled+0xc>)
 80a17a4:	681b      	ldr	r3, [r3, #0]
 80a17a6:	6a1b      	ldr	r3, [r3, #32]
 80a17a8:	9301      	str	r3, [sp, #4]
 80a17aa:	bd08      	pop	{r3, pc}
 80a17ac:	080601b4 	.word	0x080601b4

080a17b0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b02      	ldr	r3, [pc, #8]	; (80a17bc <hal_spi_info+0xc>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a17b8:	9301      	str	r3, [sp, #4]
 80a17ba:	bd08      	pop	{r3, pc}
 80a17bc:	080601b4 	.word	0x080601b4

080a17c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a17c0:	b508      	push	{r3, lr}
 80a17c2:	4b02      	ldr	r3, [pc, #8]	; (80a17cc <HAL_USB_USART_Init+0xc>)
 80a17c4:	681b      	ldr	r3, [r3, #0]
 80a17c6:	681b      	ldr	r3, [r3, #0]
 80a17c8:	9301      	str	r3, [sp, #4]
 80a17ca:	bd08      	pop	{r3, pc}
 80a17cc:	080601d8 	.word	0x080601d8

080a17d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a17d0:	b508      	push	{r3, lr}
 80a17d2:	4b02      	ldr	r3, [pc, #8]	; (80a17dc <HAL_USB_USART_Begin+0xc>)
 80a17d4:	681b      	ldr	r3, [r3, #0]
 80a17d6:	685b      	ldr	r3, [r3, #4]
 80a17d8:	9301      	str	r3, [sp, #4]
 80a17da:	bd08      	pop	{r3, pc}
 80a17dc:	080601d8 	.word	0x080601d8

080a17e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a17e0:	b508      	push	{r3, lr}
 80a17e2:	4b02      	ldr	r3, [pc, #8]	; (80a17ec <HAL_USB_USART_Available_Data+0xc>)
 80a17e4:	681b      	ldr	r3, [r3, #0]
 80a17e6:	691b      	ldr	r3, [r3, #16]
 80a17e8:	9301      	str	r3, [sp, #4]
 80a17ea:	bd08      	pop	{r3, pc}
 80a17ec:	080601d8 	.word	0x080601d8

080a17f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a17f0:	b508      	push	{r3, lr}
 80a17f2:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a17f4:	681b      	ldr	r3, [r3, #0]
 80a17f6:	695b      	ldr	r3, [r3, #20]
 80a17f8:	9301      	str	r3, [sp, #4]
 80a17fa:	bd08      	pop	{r3, pc}
 80a17fc:	080601d8 	.word	0x080601d8

080a1800 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1800:	b508      	push	{r3, lr}
 80a1802:	4b02      	ldr	r3, [pc, #8]	; (80a180c <HAL_USB_USART_Receive_Data+0xc>)
 80a1804:	681b      	ldr	r3, [r3, #0]
 80a1806:	699b      	ldr	r3, [r3, #24]
 80a1808:	9301      	str	r3, [sp, #4]
 80a180a:	bd08      	pop	{r3, pc}
 80a180c:	080601d8 	.word	0x080601d8

080a1810 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1810:	b508      	push	{r3, lr}
 80a1812:	4b02      	ldr	r3, [pc, #8]	; (80a181c <HAL_USB_USART_Send_Data+0xc>)
 80a1814:	681b      	ldr	r3, [r3, #0]
 80a1816:	69db      	ldr	r3, [r3, #28]
 80a1818:	9301      	str	r3, [sp, #4]
 80a181a:	bd08      	pop	{r3, pc}
 80a181c:	080601d8 	.word	0x080601d8

080a1820 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1820:	b508      	push	{r3, lr}
 80a1822:	4b02      	ldr	r3, [pc, #8]	; (80a182c <HAL_USB_USART_Flush_Data+0xc>)
 80a1824:	681b      	ldr	r3, [r3, #0]
 80a1826:	6a1b      	ldr	r3, [r3, #32]
 80a1828:	9301      	str	r3, [sp, #4]
 80a182a:	bd08      	pop	{r3, pc}
 80a182c:	080601d8 	.word	0x080601d8

080a1830 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1830:	b508      	push	{r3, lr}
 80a1832:	4b02      	ldr	r3, [pc, #8]	; (80a183c <inet_gethostbyname+0xc>)
 80a1834:	681b      	ldr	r3, [r3, #0]
 80a1836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1838:	9301      	str	r3, [sp, #4]
 80a183a:	bd08      	pop	{r3, pc}
 80a183c:	080601c0 	.word	0x080601c0

080a1840 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1840:	b508      	push	{r3, lr}
 80a1842:	4b02      	ldr	r3, [pc, #8]	; (80a184c <panic_+0xc>)
 80a1844:	681b      	ldr	r3, [r3, #0]
 80a1846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1848:	9301      	str	r3, [sp, #4]
 80a184a:	bd08      	pop	{r3, pc}
 80a184c:	080201a8 	.word	0x080201a8

080a1850 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a1850:	b508      	push	{r3, lr}
 80a1852:	4b02      	ldr	r3, [pc, #8]	; (80a185c <log_message_v+0xc>)
 80a1854:	681b      	ldr	r3, [r3, #0]
 80a1856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1858:	9301      	str	r3, [sp, #4]
 80a185a:	bd08      	pop	{r3, pc}
 80a185c:	080201a8 	.word	0x080201a8

080a1860 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1860:	b508      	push	{r3, lr}
 80a1862:	4b02      	ldr	r3, [pc, #8]	; (80a186c <system_mode+0xc>)
 80a1864:	681b      	ldr	r3, [r3, #0]
 80a1866:	681b      	ldr	r3, [r3, #0]
 80a1868:	9301      	str	r3, [sp, #4]
 80a186a:	bd08      	pop	{r3, pc}
 80a186c:	080601a4 	.word	0x080601a4

080a1870 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1870:	b508      	push	{r3, lr}
 80a1872:	4b02      	ldr	r3, [pc, #8]	; (80a187c <set_system_mode+0xc>)
 80a1874:	681b      	ldr	r3, [r3, #0]
 80a1876:	685b      	ldr	r3, [r3, #4]
 80a1878:	9301      	str	r3, [sp, #4]
 80a187a:	bd08      	pop	{r3, pc}
 80a187c:	080601a4 	.word	0x080601a4

080a1880 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1880:	b508      	push	{r3, lr}
 80a1882:	4b02      	ldr	r3, [pc, #8]	; (80a188c <system_delay_ms+0xc>)
 80a1884:	681b      	ldr	r3, [r3, #0]
 80a1886:	695b      	ldr	r3, [r3, #20]
 80a1888:	9301      	str	r3, [sp, #4]
 80a188a:	bd08      	pop	{r3, pc}
 80a188c:	080601a4 	.word	0x080601a4

080a1890 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1890:	b508      	push	{r3, lr}
 80a1892:	4b02      	ldr	r3, [pc, #8]	; (80a189c <application_thread_current+0xc>)
 80a1894:	681b      	ldr	r3, [r3, #0]
 80a1896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1898:	9301      	str	r3, [sp, #4]
 80a189a:	bd08      	pop	{r3, pc}
 80a189c:	080601a4 	.word	0x080601a4

080a18a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a18a0:	b508      	push	{r3, lr}
 80a18a2:	4b02      	ldr	r3, [pc, #8]	; (80a18ac <application_thread_invoke+0xc>)
 80a18a4:	681b      	ldr	r3, [r3, #0]
 80a18a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a18a8:	9301      	str	r3, [sp, #4]
 80a18aa:	bd08      	pop	{r3, pc}
 80a18ac:	080601a4 	.word	0x080601a4

080a18b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a18b0:	b508      	push	{r3, lr}
 80a18b2:	4b02      	ldr	r3, [pc, #8]	; (80a18bc <system_thread_get_state+0xc>)
 80a18b4:	681b      	ldr	r3, [r3, #0]
 80a18b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a18b8:	9301      	str	r3, [sp, #4]
 80a18ba:	bd08      	pop	{r3, pc}
 80a18bc:	080601a4 	.word	0x080601a4

080a18c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a18c0:	b508      	push	{r3, lr}
 80a18c2:	4b03      	ldr	r3, [pc, #12]	; (80a18d0 <system_ctrl_set_app_request_handler+0x10>)
 80a18c4:	681b      	ldr	r3, [r3, #0]
 80a18c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a18ca:	9301      	str	r3, [sp, #4]
 80a18cc:	bd08      	pop	{r3, pc}
 80a18ce:	0000      	.short	0x0000
 80a18d0:	080601a4 	.word	0x080601a4

080a18d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b03      	ldr	r3, [pc, #12]	; (80a18e4 <system_ctrl_set_result+0x10>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a18de:	9301      	str	r3, [sp, #4]
 80a18e0:	bd08      	pop	{r3, pc}
 80a18e2:	0000      	.short	0x0000
 80a18e4:	080601a4 	.word	0x080601a4

080a18e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <network_connect+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	685b      	ldr	r3, [r3, #4]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601c8 	.word	0x080601c8

080a18f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <network_connecting+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	689b      	ldr	r3, [r3, #8]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601c8 	.word	0x080601c8

080a1908 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <network_disconnect+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	68db      	ldr	r3, [r3, #12]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601c8 	.word	0x080601c8

080a1918 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <network_ready+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	691b      	ldr	r3, [r3, #16]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601c8 	.word	0x080601c8

080a1928 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <network_on+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	695b      	ldr	r3, [r3, #20]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601c8 	.word	0x080601c8

080a1938 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <network_off+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	699b      	ldr	r3, [r3, #24]
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601c8 	.word	0x080601c8

080a1948 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <network_listen+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	69db      	ldr	r3, [r3, #28]
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601c8 	.word	0x080601c8

080a1958 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <network_listening+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	6a1b      	ldr	r3, [r3, #32]
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601c8 	.word	0x080601c8

080a1968 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <network_set_listen_timeout+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601c8 	.word	0x080601c8

080a1978 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <network_get_listen_timeout+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601c8 	.word	0x080601c8

080a1988 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <network_is_on+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601c8 	.word	0x080601c8

080a1998 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <network_is_off+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601c8 	.word	0x080601c8

080a19a8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <spark_process+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	689b      	ldr	r3, [r3, #8]
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601cc 	.word	0x080601cc

080a19b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <spark_cloud_flag_connected+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	695b      	ldr	r3, [r3, #20]
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601cc 	.word	0x080601cc

080a19c8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a19c8:	b508      	push	{r3, lr}
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <spark_send_event+0xc>)
 80a19cc:	681b      	ldr	r3, [r3, #0]
 80a19ce:	6a1b      	ldr	r3, [r3, #32]
 80a19d0:	9301      	str	r3, [sp, #4]
 80a19d2:	bd08      	pop	{r3, pc}
 80a19d4:	080601cc 	.word	0x080601cc

080a19d8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a19d8:	b508      	push	{r3, lr}
 80a19da:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <spark_sync_time_pending+0xc>)
 80a19dc:	681b      	ldr	r3, [r3, #0]
 80a19de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19e0:	9301      	str	r3, [sp, #4]
 80a19e2:	bd08      	pop	{r3, pc}
 80a19e4:	080601cc 	.word	0x080601cc

080a19e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601cc 	.word	0x080601cc

080a19f8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19f8:	b508      	push	{r3, lr}
 80a19fa:	4b02      	ldr	r3, [pc, #8]	; (80a1a04 <malloc+0xc>)
 80a19fc:	681b      	ldr	r3, [r3, #0]
 80a19fe:	681b      	ldr	r3, [r3, #0]
 80a1a00:	9301      	str	r3, [sp, #4]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	080601a0 	.word	0x080601a0

080a1a08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1a08:	b508      	push	{r3, lr}
 80a1a0a:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <free+0xc>)
 80a1a0c:	681b      	ldr	r3, [r3, #0]
 80a1a0e:	685b      	ldr	r3, [r3, #4]
 80a1a10:	9301      	str	r3, [sp, #4]
 80a1a12:	bd08      	pop	{r3, pc}
 80a1a14:	080601a0 	.word	0x080601a0

080a1a18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <realloc+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	689b      	ldr	r3, [r3, #8]
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601a0 	.word	0x080601a0

080a1a28 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1a28:	b508      	push	{r3, lr}
 80a1a2a:	4b02      	ldr	r3, [pc, #8]	; (80a1a34 <abort+0xc>)
 80a1a2c:	681b      	ldr	r3, [r3, #0]
 80a1a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1a30:	9301      	str	r3, [sp, #4]
 80a1a32:	bd08      	pop	{r3, pc}
 80a1a34:	080601a0 	.word	0x080601a0

080a1a38 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b02      	ldr	r3, [pc, #8]	; (80a1a44 <_malloc_r+0xc>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a40:	9301      	str	r3, [sp, #4]
 80a1a42:	bd08      	pop	{r3, pc}
 80a1a44:	080601a0 	.word	0x080601a0

080a1a48 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a1a48:	b508      	push	{r3, lr}
 80a1a4a:	4b02      	ldr	r3, [pc, #8]	; (80a1a54 <newlib_impure_ptr_callback+0xc>)
 80a1a4c:	681b      	ldr	r3, [r3, #0]
 80a1a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1a50:	9301      	str	r3, [sp, #4]
 80a1a52:	bd08      	pop	{r3, pc}
 80a1a54:	080601a0 	.word	0x080601a0

080a1a58 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1a58:	6880      	ldr	r0, [r0, #8]
 80a1a5a:	f7ff bdd7 	b.w	80a160c <os_mutex_recursive_unlock>

080a1a5e <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a1a5e:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a1a60:	2600      	movs	r6, #0
 80a1a62:	4604      	mov	r4, r0
 80a1a64:	460d      	mov	r5, r1
 80a1a66:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a1a6a:	f7ff fdb7 	bl	80a15dc <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a1a6e:	4628      	mov	r0, r5
    _spi = spi;
 80a1a70:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a1a72:	f7ff fe8d 	bl	80a1790 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a1a76:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1a78:	6066      	str	r6, [r4, #4]
}
 80a1a7a:	bd70      	pop	{r4, r5, r6, pc}

080a1a7c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a1a7c:	b510      	push	{r4, lr}
 80a1a7e:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a1a80:	6880      	ldr	r0, [r0, #8]
 80a1a82:	f7ff fdbb 	bl	80a15fc <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a1a86:	7820      	ldrb	r0, [r4, #0]
 80a1a88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1a8c:	f7ff fe50 	bl	80a1730 <hal_spi_begin>
        unlock();
 80a1a90:	4620      	mov	r0, r4
 80a1a92:	f7ff ffe1 	bl	80a1a58 <_ZN8SPIClass6unlockEv>
    }
}
 80a1a96:	bd10      	pop	{r4, pc}

080a1a98 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 80a1a98:	b510      	push	{r4, lr}
 80a1a9a:	4604      	mov	r4, r0
 80a1a9c:	6880      	ldr	r0, [r0, #8]
 80a1a9e:	f7ff fdad 	bl	80a15fc <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_end(_spi);
 80a1aa2:	7820      	ldrb	r0, [r4, #0]
 80a1aa4:	f7ff fe4c 	bl	80a1740 <hal_spi_end>
        unlock();
 80a1aa8:	4620      	mov	r0, r4
 80a1aaa:	f7ff ffd5 	bl	80a1a58 <_ZN8SPIClass6unlockEv>
    }
}
 80a1aae:	bd10      	pop	{r4, pc}

080a1ab0 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a1ab0:	b538      	push	{r3, r4, r5, lr}
 80a1ab2:	4604      	mov	r4, r0
 80a1ab4:	460d      	mov	r5, r1
 80a1ab6:	6880      	ldr	r0, [r0, #8]
 80a1ab8:	f7ff fda0 	bl	80a15fc <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 80a1abc:	7820      	ldrb	r0, [r4, #0]
 80a1abe:	4629      	mov	r1, r5
 80a1ac0:	f7ff fe46 	bl	80a1750 <hal_spi_set_bit_order>
        unlock();
 80a1ac4:	4620      	mov	r0, r4
 80a1ac6:	f7ff ffc7 	bl	80a1a58 <_ZN8SPIClass6unlockEv>
    }
}
 80a1aca:	bd38      	pop	{r3, r4, r5, pc}

080a1acc <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 80a1acc:	b538      	push	{r3, r4, r5, lr}
 80a1ace:	4604      	mov	r4, r0
 80a1ad0:	460d      	mov	r5, r1
 80a1ad2:	6880      	ldr	r0, [r0, #8]
 80a1ad4:	f7ff fd92 	bl	80a15fc <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 80a1ad8:	7820      	ldrb	r0, [r4, #0]
 80a1ada:	4629      	mov	r1, r5
 80a1adc:	f7ff fe40 	bl	80a1760 <hal_spi_set_data_mode>
        unlock();
 80a1ae0:	4620      	mov	r0, r4
 80a1ae2:	f7ff ffb9 	bl	80a1a58 <_ZN8SPIClass6unlockEv>
    }
}
 80a1ae6:	bd38      	pop	{r3, r4, r5, pc}

080a1ae8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a1ae8:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a1aea:	2400      	movs	r4, #0
 80a1aec:	0840      	lsrs	r0, r0, #1
 80a1aee:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1af0:	6818      	ldr	r0, [r3, #0]
 80a1af2:	b2e5      	uxtb	r5, r4
 80a1af4:	4288      	cmp	r0, r1
 80a1af6:	d906      	bls.n	80a1b06 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1af8:	3401      	adds	r4, #1
 80a1afa:	2c08      	cmp	r4, #8
 80a1afc:	d002      	beq.n	80a1b04 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a1afe:	0840      	lsrs	r0, r0, #1
 80a1b00:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1b02:	e7f5      	b.n	80a1af0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1b04:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a1b06:	4b02      	ldr	r3, [pc, #8]	; (80a1b10 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1b08:	5d5b      	ldrb	r3, [r3, r5]
 80a1b0a:	7013      	strb	r3, [r2, #0]
}
 80a1b0c:	bd30      	pop	{r4, r5, pc}
 80a1b0e:	bf00      	nop
 80a1b10:	080a40f8 	.word	0x080a40f8

080a1b14 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 80a1b16:	2500      	movs	r5, #0
{
 80a1b18:	4604      	mov	r4, r0
 80a1b1a:	b089      	sub	sp, #36	; 0x24
 80a1b1c:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a1b1e:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 80a1b22:	9502      	str	r5, [sp, #8]
 80a1b24:	f7ff fd6a 	bl	80a15fc <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1b28:	4629      	mov	r1, r5
 80a1b2a:	2214      	movs	r2, #20
 80a1b2c:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a1b2e:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1b30:	f002 f880 	bl	80a3c34 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1b34:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a1b36:	462a      	mov	r2, r5
 80a1b38:	4638      	mov	r0, r7
 80a1b3a:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 80a1b3c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 80a1b40:	f7ff fe36 	bl	80a17b0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a1b44:	ab02      	add	r3, sp, #8
 80a1b46:	f10d 0207 	add.w	r2, sp, #7
 80a1b4a:	4631      	mov	r1, r6
 80a1b4c:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 80a1b4e:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a1b52:	f7ff ffc9 	bl	80a1ae8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 80a1b56:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1b5a:	7820      	ldrb	r0, [r4, #0]
 80a1b5c:	f7ff fe08 	bl	80a1770 <hal_spi_set_clock_divider>
        unlock();
 80a1b60:	4620      	mov	r0, r4
 80a1b62:	f7ff ff79 	bl	80a1a58 <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 80a1b66:	9802      	ldr	r0, [sp, #8]
 80a1b68:	b009      	add	sp, #36	; 0x24
 80a1b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b6c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a1b6c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a1b6e:	7800      	ldrb	r0, [r0, #0]
 80a1b70:	f7ff fe06 	bl	80a1780 <hal_spi_transfer>
}
 80a1b74:	b2c0      	uxtb	r0, r0
 80a1b76:	bd08      	pop	{r3, pc}

080a1b78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1b78:	b510      	push	{r4, lr}
 80a1b7a:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1b7c:	6800      	ldr	r0, [r0, #0]
 80a1b7e:	b118      	cbz	r0, 80a1b88 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a1b80:	f7ff ff42 	bl	80a1a08 <free>
            wakeupSource_ = nullptr;
 80a1b84:	2300      	movs	r3, #0
 80a1b86:	6023      	str	r3, [r4, #0]
        }
    }
 80a1b88:	bd10      	pop	{r4, pc}

080a1b8a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1b8a:	b510      	push	{r4, lr}
 80a1b8c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a1b8e:	f7ff fff3 	bl	80a1b78 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a1b92:	4620      	mov	r0, r4
 80a1b94:	bd10      	pop	{r4, pc}
	...

080a1b98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1b98:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a1b9a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1b9c:	b510      	push	{r4, lr}
 80a1b9e:	4b08      	ldr	r3, [pc, #32]	; (80a1bc0 <_GLOBAL__sub_I_System+0x28>)
 80a1ba0:	4c08      	ldr	r4, [pc, #32]	; (80a1bc4 <_GLOBAL__sub_I_System+0x2c>)
 80a1ba2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1ba4:	4b08      	ldr	r3, [pc, #32]	; (80a1bc8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a1ba6:	6020      	str	r0, [r4, #0]
 80a1ba8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a1baa:	71a0      	strb	r0, [r4, #6]
 80a1bac:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1bae:	f7ff fe5f 	bl	80a1870 <set_system_mode>
SystemClass System;
 80a1bb2:	4620      	mov	r0, r4
 80a1bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1bb8:	4a04      	ldr	r2, [pc, #16]	; (80a1bcc <_GLOBAL__sub_I_System+0x34>)
 80a1bba:	4905      	ldr	r1, [pc, #20]	; (80a1bd0 <_GLOBAL__sub_I_System+0x38>)
 80a1bbc:	f001 ba94 	b.w	80a30e8 <__aeabi_atexit>
 80a1bc0:	20008124 	.word	0x20008124
 80a1bc4:	20008118 	.word	0x20008118
 80a1bc8:	ffff0000 	.word	0xffff0000
 80a1bcc:	20000078 	.word	0x20000078
 80a1bd0:	080a1b8b 	.word	0x080a1b8b

080a1bd4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1bd4:	b510      	push	{r4, lr}
 80a1bd6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1bd8:	f002 f87b 	bl	80a3cd2 <strlen>
 80a1bdc:	1e43      	subs	r3, r0, #1
 80a1bde:	4620      	mov	r0, r4
 80a1be0:	4423      	add	r3, r4
	while(i<j){
 80a1be2:	4283      	cmp	r3, r0
 80a1be4:	d906      	bls.n	80a1bf4 <_Z11str_reversePc+0x20>
		c = *i;
 80a1be6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1be8:	7819      	ldrb	r1, [r3, #0]
 80a1bea:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1bee:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a1bf2:	e7f6      	b.n	80a1be2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a1bf4:	bd10      	pop	{r4, pc}

080a1bf6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1bf6:	b570      	push	{r4, r5, r6, lr}
 80a1bf8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1bfa:	1e91      	subs	r1, r2, #2
 80a1bfc:	2922      	cmp	r1, #34	; 0x22
 80a1bfe:	d822      	bhi.n	80a1c46 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a1c00:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a1c02:	b168      	cbz	r0, 80a1c20 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1c04:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1c08:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1c0c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1c0e:	2809      	cmp	r0, #9
                *ptr += '0';
 80a1c10:	bf94      	ite	ls
 80a1c12:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1c14:	3157      	addhi	r1, #87	; 0x57
 80a1c16:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a1c18:	4630      	mov	r0, r6
 80a1c1a:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a1c1e:	e7f0      	b.n	80a1c02 <ultoa+0xc>
 80a1c20:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a1c22:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a1c24:	4423      	add	r3, r4
 80a1c26:	4293      	cmp	r3, r2
 80a1c28:	d902      	bls.n	80a1c30 <ultoa+0x3a>
            *ptr++ = '0';
 80a1c2a:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a1c2e:	e7fa      	b.n	80a1c26 <ultoa+0x30>
 80a1c30:	1b5a      	subs	r2, r3, r5
 80a1c32:	42ab      	cmp	r3, r5
 80a1c34:	bf38      	it	cc
 80a1c36:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a1c38:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1c3a:	4620      	mov	r0, r4
	*ptr = '\0';
 80a1c3c:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a1c3e:	f7ff ffc9 	bl	80a1bd4 <_Z11str_reversePc>
	return buffer;
 80a1c42:	4620      	mov	r0, r4
}
 80a1c44:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a1c46:	2000      	movs	r0, #0
 80a1c48:	e7fc      	b.n	80a1c44 <ultoa+0x4e>

080a1c4a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1c4a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a1c4c:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1c4e:	460c      	mov	r4, r1
 80a1c50:	4615      	mov	r5, r2
	if(a<0){
 80a1c52:	da0d      	bge.n	80a1c70 <itoa+0x26>
		*buffer = '-';
 80a1c54:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1c5a:	bf0c      	ite	eq
 80a1c5c:	4618      	moveq	r0, r3
 80a1c5e:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a1c60:	2301      	movs	r3, #1
		*buffer = '-';
 80a1c62:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a1c64:	462a      	mov	r2, r5
 80a1c66:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a1c68:	f7ff ffc5 	bl	80a1bf6 <ultoa>
	}
	return buffer;
}
 80a1c6c:	4620      	mov	r0, r4
 80a1c6e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a1c70:	2301      	movs	r3, #1
 80a1c72:	e7f9      	b.n	80a1c68 <itoa+0x1e>

080a1c74 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a1c74:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a1c76:	2301      	movs	r3, #1
 80a1c78:	f7ff ffbd 	bl	80a1bf6 <ultoa>
}
 80a1c7c:	bd08      	pop	{r3, pc}

080a1c7e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1c7e:	b510      	push	{r4, lr}
 80a1c80:	4604      	mov	r4, r0
{
	free(buffer);
 80a1c82:	6800      	ldr	r0, [r0, #0]
 80a1c84:	f7ff fec0 	bl	80a1a08 <free>
}
 80a1c88:	4620      	mov	r0, r4
 80a1c8a:	bd10      	pop	{r4, pc}

080a1c8c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1c8c:	b510      	push	{r4, lr}
 80a1c8e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1c90:	6800      	ldr	r0, [r0, #0]
 80a1c92:	b108      	cbz	r0, 80a1c98 <_ZN6String10invalidateEv+0xc>
 80a1c94:	f7ff feb8 	bl	80a1a08 <free>
	buffer = NULL;
 80a1c98:	2300      	movs	r3, #0
	capacity = len = 0;
 80a1c9a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a1c9e:	6023      	str	r3, [r4, #0]
}
 80a1ca0:	bd10      	pop	{r4, pc}

080a1ca2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1ca2:	b538      	push	{r3, r4, r5, lr}
 80a1ca4:	4604      	mov	r4, r0
 80a1ca6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1ca8:	6800      	ldr	r0, [r0, #0]
 80a1caa:	3101      	adds	r1, #1
 80a1cac:	f7ff feb4 	bl	80a1a18 <realloc>
	if (newbuffer) {
 80a1cb0:	b110      	cbz	r0, 80a1cb8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1cb2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1cb6:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1cb8:	bd38      	pop	{r3, r4, r5, pc}

080a1cba <_ZN6String7reserveEj>:
{
 80a1cba:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1cbc:	6803      	ldr	r3, [r0, #0]
{
 80a1cbe:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1cc0:	b123      	cbz	r3, 80a1ccc <_ZN6String7reserveEj+0x12>
 80a1cc2:	6843      	ldr	r3, [r0, #4]
 80a1cc4:	428b      	cmp	r3, r1
 80a1cc6:	d301      	bcc.n	80a1ccc <_ZN6String7reserveEj+0x12>
 80a1cc8:	2001      	movs	r0, #1
}
 80a1cca:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	f7ff ffe8 	bl	80a1ca2 <_ZN6String12changeBufferEj>
 80a1cd2:	2800      	cmp	r0, #0
 80a1cd4:	d0f9      	beq.n	80a1cca <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1cd6:	68a3      	ldr	r3, [r4, #8]
 80a1cd8:	2b00      	cmp	r3, #0
 80a1cda:	d1f5      	bne.n	80a1cc8 <_ZN6String7reserveEj+0xe>
 80a1cdc:	6822      	ldr	r2, [r4, #0]
 80a1cde:	7013      	strb	r3, [r2, #0]
 80a1ce0:	e7f2      	b.n	80a1cc8 <_ZN6String7reserveEj+0xe>

080a1ce2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1ce2:	b570      	push	{r4, r5, r6, lr}
 80a1ce4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1ce6:	4611      	mov	r1, r2
{
 80a1ce8:	4604      	mov	r4, r0
 80a1cea:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1cec:	f7ff ffe5 	bl	80a1cba <_ZN6String7reserveEj>
 80a1cf0:	b920      	cbnz	r0, 80a1cfc <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1cf2:	4620      	mov	r0, r4
 80a1cf4:	f7ff ffca 	bl	80a1c8c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1cf8:	4620      	mov	r0, r4
 80a1cfa:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a1cfc:	462a      	mov	r2, r5
 80a1cfe:	4631      	mov	r1, r6
 80a1d00:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1d02:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1d04:	f001 ff6e 	bl	80a3be4 <memcpy>
	buffer[len] = 0;
 80a1d08:	2100      	movs	r1, #0
 80a1d0a:	6822      	ldr	r2, [r4, #0]
 80a1d0c:	68a3      	ldr	r3, [r4, #8]
 80a1d0e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1d10:	e7f2      	b.n	80a1cf8 <_ZN6String4copyEPKcj+0x16>

080a1d12 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1d12:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1d14:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1d16:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1d18:	460d      	mov	r5, r1
	capacity = 0;
 80a1d1a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1d1e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d20:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1d22:	b139      	cbz	r1, 80a1d34 <_ZN6StringC1EPKc+0x22>
 80a1d24:	4608      	mov	r0, r1
 80a1d26:	f001 ffd4 	bl	80a3cd2 <strlen>
 80a1d2a:	4629      	mov	r1, r5
 80a1d2c:	4602      	mov	r2, r0
 80a1d2e:	4620      	mov	r0, r4
 80a1d30:	f7ff ffd7 	bl	80a1ce2 <_ZN6String4copyEPKcj>
}
 80a1d34:	4620      	mov	r0, r4
 80a1d36:	bd38      	pop	{r3, r4, r5, pc}

080a1d38 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1d38:	b538      	push	{r3, r4, r5, lr}
 80a1d3a:	4605      	mov	r5, r0
	if (buffer) {
 80a1d3c:	6800      	ldr	r0, [r0, #0]
{
 80a1d3e:	460c      	mov	r4, r1
	if (buffer) {
 80a1d40:	b168      	cbz	r0, 80a1d5e <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a1d42:	686a      	ldr	r2, [r5, #4]
 80a1d44:	688b      	ldr	r3, [r1, #8]
 80a1d46:	429a      	cmp	r2, r3
 80a1d48:	d307      	bcc.n	80a1d5a <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a1d4a:	6809      	ldr	r1, [r1, #0]
 80a1d4c:	f001 ff9e 	bl	80a3c8c <strcpy>
			len = rhs.len;
 80a1d50:	68a3      	ldr	r3, [r4, #8]
 80a1d52:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a1d54:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a1d56:	60a3      	str	r3, [r4, #8]
}
 80a1d58:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a1d5a:	f7ff fe55 	bl	80a1a08 <free>
	buffer = rhs.buffer;
 80a1d5e:	6823      	ldr	r3, [r4, #0]
 80a1d60:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1d62:	6863      	ldr	r3, [r4, #4]
 80a1d64:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a1d66:	68a3      	ldr	r3, [r4, #8]
 80a1d68:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1d6a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a1d6c:	e9c4 3300 	strd	r3, r3, [r4]
 80a1d70:	e7f1      	b.n	80a1d56 <_ZN6String4moveERS_+0x1e>

080a1d72 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1d72:	4288      	cmp	r0, r1
{
 80a1d74:	b510      	push	{r4, lr}
 80a1d76:	460b      	mov	r3, r1
 80a1d78:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1d7a:	d004      	beq.n	80a1d86 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1d7c:	6809      	ldr	r1, [r1, #0]
 80a1d7e:	b121      	cbz	r1, 80a1d8a <_ZN6StringaSERKS_+0x18>
 80a1d80:	689a      	ldr	r2, [r3, #8]
 80a1d82:	f7ff ffae 	bl	80a1ce2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1d86:	4620      	mov	r0, r4
 80a1d88:	bd10      	pop	{r4, pc}
	else invalidate();
 80a1d8a:	f7ff ff7f 	bl	80a1c8c <_ZN6String10invalidateEv>
 80a1d8e:	e7fa      	b.n	80a1d86 <_ZN6StringaSERKS_+0x14>

080a1d90 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1d90:	2300      	movs	r3, #0
String::String(const String &value)
 80a1d92:	b510      	push	{r4, lr}
 80a1d94:	4604      	mov	r4, r0
	capacity = 0;
 80a1d96:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a1d9a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d9c:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a1d9e:	f7ff ffe8 	bl	80a1d72 <_ZN6StringaSERKS_>
}
 80a1da2:	4620      	mov	r0, r4
 80a1da4:	bd10      	pop	{r4, pc}

080a1da6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1da6:	4288      	cmp	r0, r1
{
 80a1da8:	b510      	push	{r4, lr}
 80a1daa:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a1dac:	d001      	beq.n	80a1db2 <_ZN6StringaSEOS_+0xc>
 80a1dae:	f7ff ffc3 	bl	80a1d38 <_ZN6String4moveERS_>
	return *this;
}
 80a1db2:	4620      	mov	r0, r4
 80a1db4:	bd10      	pop	{r4, pc}

080a1db6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1db6:	b538      	push	{r3, r4, r5, lr}
 80a1db8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1dba:	460c      	mov	r4, r1
 80a1dbc:	b149      	cbz	r1, 80a1dd2 <_ZN6StringaSEPKc+0x1c>
 80a1dbe:	4608      	mov	r0, r1
 80a1dc0:	f001 ff87 	bl	80a3cd2 <strlen>
 80a1dc4:	4621      	mov	r1, r4
 80a1dc6:	4602      	mov	r2, r0
 80a1dc8:	4628      	mov	r0, r5
 80a1dca:	f7ff ff8a 	bl	80a1ce2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a1dce:	4628      	mov	r0, r5
 80a1dd0:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1dd2:	f7ff ff5b 	bl	80a1c8c <_ZN6String10invalidateEv>
 80a1dd6:	e7fa      	b.n	80a1dce <_ZN6StringaSEPKc+0x18>

080a1dd8 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a1dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1dda:	4604      	mov	r4, r0
	buffer = NULL;
 80a1ddc:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a1dde:	4608      	mov	r0, r1
	capacity = 0;
 80a1de0:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1de4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1de6:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a1de8:	a901      	add	r1, sp, #4
 80a1dea:	f7ff ff43 	bl	80a1c74 <utoa>
	*this = buf;
 80a1dee:	4620      	mov	r0, r4
 80a1df0:	a901      	add	r1, sp, #4
 80a1df2:	f7ff ffe0 	bl	80a1db6 <_ZN6StringaSEPKc>
}
 80a1df6:	4620      	mov	r0, r4
 80a1df8:	b004      	add	sp, #16
 80a1dfa:	bd10      	pop	{r4, pc}

080a1dfc <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a1dfc:	b510      	push	{r4, lr}
	buffer = NULL;
 80a1dfe:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a1e00:	4604      	mov	r4, r0
 80a1e02:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1e04:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1e08:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1e0a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a1e0c:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a1e0e:	a901      	add	r1, sp, #4
 80a1e10:	f7ff ff1b 	bl	80a1c4a <itoa>
	*this = buf;
 80a1e14:	4620      	mov	r0, r4
 80a1e16:	a901      	add	r1, sp, #4
 80a1e18:	f7ff ffcd 	bl	80a1db6 <_ZN6StringaSEPKc>
}
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	b00a      	add	sp, #40	; 0x28
 80a1e20:	bd10      	pop	{r4, pc}

080a1e22 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1e22:	b570      	push	{r4, r5, r6, lr}
 80a1e24:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1e26:	460e      	mov	r6, r1
 80a1e28:	b909      	cbnz	r1, 80a1e2e <_ZN6String6concatEPKcj+0xc>
 80a1e2a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1e2c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1e2e:	b16a      	cbz	r2, 80a1e4c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a1e30:	6884      	ldr	r4, [r0, #8]
 80a1e32:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a1e34:	4621      	mov	r1, r4
 80a1e36:	f7ff ff40 	bl	80a1cba <_ZN6String7reserveEj>
 80a1e3a:	2800      	cmp	r0, #0
 80a1e3c:	d0f5      	beq.n	80a1e2a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1e3e:	6828      	ldr	r0, [r5, #0]
 80a1e40:	68ab      	ldr	r3, [r5, #8]
 80a1e42:	4631      	mov	r1, r6
 80a1e44:	4418      	add	r0, r3
 80a1e46:	f001 ff21 	bl	80a3c8c <strcpy>
	len = newlen;
 80a1e4a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a1e4c:	2001      	movs	r0, #1
 80a1e4e:	e7ed      	b.n	80a1e2c <_ZN6String6concatEPKcj+0xa>

080a1e50 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a1e50:	688a      	ldr	r2, [r1, #8]
 80a1e52:	6809      	ldr	r1, [r1, #0]
 80a1e54:	f7ff bfe5 	b.w	80a1e22 <_ZN6String6concatEPKcj>

080a1e58 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a1e58:	b538      	push	{r3, r4, r5, lr}
 80a1e5a:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a1e5c:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a1e5e:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a1e60:	b141      	cbz	r1, 80a1e74 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a1e62:	f001 ff36 	bl	80a3cd2 <strlen>
 80a1e66:	4621      	mov	r1, r4
 80a1e68:	4602      	mov	r2, r0
 80a1e6a:	4628      	mov	r0, r5
}
 80a1e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a1e70:	f7ff bfd7 	b.w	80a1e22 <_ZN6String6concatEPKcj>
}
 80a1e74:	bd38      	pop	{r3, r4, r5, pc}

080a1e76 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a1e76:	2300      	movs	r3, #0
{
 80a1e78:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a1e7a:	2201      	movs	r2, #1
	buf[0] = c;
 80a1e7c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a1e80:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a1e82:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a1e86:	f7ff ffcc 	bl	80a1e22 <_ZN6String6concatEPKcj>
}
 80a1e8a:	b003      	add	sp, #12
 80a1e8c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1e90 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1e90:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1e92:	688a      	ldr	r2, [r1, #8]
 80a1e94:	6809      	ldr	r1, [r1, #0]
{
 80a1e96:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1e98:	f7ff ffc3 	bl	80a1e22 <_ZN6String6concatEPKcj>
 80a1e9c:	b910      	cbnz	r0, 80a1ea4 <_ZplRK15StringSumHelperRK6String+0x14>
 80a1e9e:	4620      	mov	r0, r4
 80a1ea0:	f7ff fef4 	bl	80a1c8c <_ZN6String10invalidateEv>
	return a;
}
 80a1ea4:	4620      	mov	r0, r4
 80a1ea6:	bd10      	pop	{r4, pc}

080a1ea8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1ea8:	b538      	push	{r3, r4, r5, lr}
 80a1eaa:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1eac:	460d      	mov	r5, r1
 80a1eae:	b921      	cbnz	r1, 80a1eba <_ZplRK15StringSumHelperPKc+0x12>
 80a1eb0:	4620      	mov	r0, r4
 80a1eb2:	f7ff feeb 	bl	80a1c8c <_ZN6String10invalidateEv>
	return a;
}
 80a1eb6:	4620      	mov	r0, r4
 80a1eb8:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1eba:	4608      	mov	r0, r1
 80a1ebc:	f001 ff09 	bl	80a3cd2 <strlen>
 80a1ec0:	4629      	mov	r1, r5
 80a1ec2:	4602      	mov	r2, r0
 80a1ec4:	4620      	mov	r0, r4
 80a1ec6:	f7ff ffac 	bl	80a1e22 <_ZN6String6concatEPKcj>
 80a1eca:	2800      	cmp	r0, #0
 80a1ecc:	d0f0      	beq.n	80a1eb0 <_ZplRK15StringSumHelperPKc+0x8>
 80a1ece:	e7f2      	b.n	80a1eb6 <_ZplRK15StringSumHelperPKc+0xe>

080a1ed0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a1ed0:	b558      	push	{r3, r4, r6, lr}
 80a1ed2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a1ed4:	b12a      	cbz	r2, 80a1ee2 <_ZNK6String8getBytesEPhjj+0x12>
 80a1ed6:	b121      	cbz	r1, 80a1ee2 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 80a1ed8:	6884      	ldr	r4, [r0, #8]
 80a1eda:	42a3      	cmp	r3, r4
 80a1edc:	d302      	bcc.n	80a1ee4 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a1ede:	2300      	movs	r3, #0
 80a1ee0:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 80a1ee2:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 80a1ee4:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 80a1ee6:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 80a1ee8:	4294      	cmp	r4, r2
 80a1eea:	bf28      	it	cs
 80a1eec:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80a1eee:	6801      	ldr	r1, [r0, #0]
 80a1ef0:	4622      	mov	r2, r4
 80a1ef2:	4419      	add	r1, r3
 80a1ef4:	4630      	mov	r0, r6
 80a1ef6:	f001 fef4 	bl	80a3ce2 <strncpy>
	buf[n] = 0;
 80a1efa:	2300      	movs	r3, #0
 80a1efc:	5533      	strb	r3, [r6, r4]
 80a1efe:	e7f0      	b.n	80a1ee2 <_ZNK6String8getBytesEPhjj+0x12>

080a1f00 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a1f00:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a1f02:	6883      	ldr	r3, [r0, #8]
 80a1f04:	4293      	cmp	r3, r2
 80a1f06:	d907      	bls.n	80a1f18 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a1f08:	6804      	ldr	r4, [r0, #0]
 80a1f0a:	6809      	ldr	r1, [r1, #0]
 80a1f0c:	18a0      	adds	r0, r4, r2
 80a1f0e:	f001 fefb 	bl	80a3d08 <strstr>
	if (found == NULL) return -1;
 80a1f12:	b108      	cbz	r0, 80a1f18 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a1f14:	1b00      	subs	r0, r0, r4
}
 80a1f16:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a1f18:	f04f 30ff 	mov.w	r0, #4294967295
 80a1f1c:	e7fb      	b.n	80a1f16 <_ZNK6String7indexOfERKS_j+0x16>

080a1f1e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a1f1e:	2200      	movs	r2, #0
 80a1f20:	f7ff bfee 	b.w	80a1f00 <_ZNK6String7indexOfERKS_j>

080a1f24 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 80a1f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1f28:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a1f2a:	688a      	ldr	r2, [r1, #8]
{
 80a1f2c:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a1f2e:	b1ca      	cbz	r2, 80a1f64 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80a1f30:	6883      	ldr	r3, [r0, #8]
 80a1f32:	b1bb      	cbz	r3, 80a1f64 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80a1f34:	429a      	cmp	r2, r3
 80a1f36:	d815      	bhi.n	80a1f64 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1f38:	6807      	ldr	r7, [r0, #0]
	int found = -1;
 80a1f3a:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1f3e:	4638      	mov	r0, r7
	if (fromIndex >= len) fromIndex = len - 1;
 80a1f40:	42ab      	cmp	r3, r5
 80a1f42:	bf98      	it	ls
 80a1f44:	f103 35ff 	addls.w	r5, r3, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1f48:	eb07 0805 	add.w	r8, r7, r5
 80a1f4c:	4540      	cmp	r0, r8
 80a1f4e:	d80b      	bhi.n	80a1f68 <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
 80a1f50:	6831      	ldr	r1, [r6, #0]
 80a1f52:	f001 fed9 	bl	80a3d08 <strstr>
		if (!p) break;
 80a1f56:	b138      	cbz	r0, 80a1f68 <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 80a1f58:	1bc3      	subs	r3, r0, r7
 80a1f5a:	42ab      	cmp	r3, r5
 80a1f5c:	bf98      	it	ls
 80a1f5e:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1f60:	3001      	adds	r0, #1
 80a1f62:	e7f3      	b.n	80a1f4c <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a1f64:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return found;
}
 80a1f68:	4620      	mov	r0, r4
 80a1f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1f70 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f72:	461d      	mov	r5, r3
	if (left > right) {
 80a1f74:	429a      	cmp	r2, r3
 80a1f76:	bf88      	it	hi
 80a1f78:	4613      	movhi	r3, r2
{
 80a1f7a:	460f      	mov	r7, r1
 80a1f7c:	4614      	mov	r4, r2
	if (left > right) {
 80a1f7e:	bf88      	it	hi
 80a1f80:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1f82:	490b      	ldr	r1, [pc, #44]	; (80a1fb0 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a1f84:	bf88      	it	hi
 80a1f86:	461d      	movhi	r5, r3
{
 80a1f88:	4606      	mov	r6, r0
	String out;
 80a1f8a:	f7ff fec2 	bl	80a1d12 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a1f8e:	68ba      	ldr	r2, [r7, #8]
 80a1f90:	42a2      	cmp	r2, r4
 80a1f92:	d30a      	bcc.n	80a1faa <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a1f94:	6839      	ldr	r1, [r7, #0]
 80a1f96:	42aa      	cmp	r2, r5
 80a1f98:	bf94      	ite	ls
 80a1f9a:	ebc4 0202 	rsbls	r2, r4, r2
 80a1f9e:	ebc4 0205 	rsbhi	r2, r4, r5
 80a1fa2:	4630      	mov	r0, r6
 80a1fa4:	4421      	add	r1, r4
 80a1fa6:	f7ff fe9c 	bl	80a1ce2 <_ZN6String4copyEPKcj>
	return out;
}
 80a1faa:	4630      	mov	r0, r6
 80a1fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1fae:	bf00      	nop
 80a1fb0:	080a3dc3 	.word	0x080a3dc3

080a1fb4 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 80a1fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 80a1fb8:	f8d0 a008 	ldr.w	sl, [r0, #8]
{
 80a1fbc:	4605      	mov	r5, r0
 80a1fbe:	460f      	mov	r7, r1
 80a1fc0:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 80a1fc2:	f1ba 0f00 	cmp.w	sl, #0
 80a1fc6:	d046      	beq.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>
 80a1fc8:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80a1fcc:	f1bb 0f00 	cmp.w	fp, #0
 80a1fd0:	d041      	beq.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>
	int diff = replace.len - find.len;
 80a1fd2:	6893      	ldr	r3, [r2, #8]
	char *readFrom = buffer;
 80a1fd4:	6804      	ldr	r4, [r0, #0]
	int diff = replace.len - find.len;
 80a1fd6:	eba3 080b 	sub.w	r8, r3, fp
	char *foundAt;
	if (diff == 0) {
 80a1fda:	f1b8 0f00 	cmp.w	r8, #0
 80a1fde:	d10d      	bne.n	80a1ffc <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1fe0:	4620      	mov	r0, r4
 80a1fe2:	6839      	ldr	r1, [r7, #0]
 80a1fe4:	f001 fe90 	bl	80a3d08 <strstr>
 80a1fe8:	4604      	mov	r4, r0
 80a1fea:	2800      	cmp	r0, #0
 80a1fec:	d033      	beq.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>
			memcpy(foundAt, replace.buffer, replace.len);
 80a1fee:	68b2      	ldr	r2, [r6, #8]
 80a1ff0:	6831      	ldr	r1, [r6, #0]
 80a1ff2:	f001 fdf7 	bl	80a3be4 <memcpy>
			readFrom = foundAt + replace.len;
 80a1ff6:	68b0      	ldr	r0, [r6, #8]
 80a1ff8:	4404      	add	r4, r0
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1ffa:	e7f1      	b.n	80a1fe0 <_ZN6String7replaceERKS_S1_+0x2c>
		}
	} else if (diff < 0) {
 80a1ffc:	db0b      	blt.n	80a2016 <_ZN6String7replaceERKS_S1_+0x62>
 80a1ffe:	46d1      	mov	r9, sl
 80a2000:	6809      	ldr	r1, [r1, #0]
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a2002:	4620      	mov	r0, r4
 80a2004:	9101      	str	r1, [sp, #4]
 80a2006:	f001 fe7f 	bl	80a3d08 <strstr>
 80a200a:	b340      	cbz	r0, 80a205e <_ZN6String7replaceERKS_S1_+0xaa>
 80a200c:	9901      	ldr	r1, [sp, #4]
			readFrom = foundAt + find.len;
 80a200e:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 80a2012:	44c1      	add	r9, r8
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a2014:	e7f5      	b.n	80a2002 <_ZN6String7replaceERKS_S1_+0x4e>
		char *writeTo = buffer;
 80a2016:	46a1      	mov	r9, r4
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a2018:	4620      	mov	r0, r4
 80a201a:	6839      	ldr	r1, [r7, #0]
 80a201c:	f001 fe74 	bl	80a3d08 <strstr>
 80a2020:	4682      	mov	sl, r0
 80a2022:	b1a0      	cbz	r0, 80a204e <_ZN6String7replaceERKS_S1_+0x9a>
			unsigned int n = foundAt - readFrom;
 80a2024:	eba0 0b04 	sub.w	fp, r0, r4
			memcpy(writeTo, readFrom, n);
 80a2028:	4621      	mov	r1, r4
 80a202a:	465a      	mov	r2, fp
 80a202c:	4648      	mov	r0, r9
			writeTo += n;
 80a202e:	44d9      	add	r9, fp
			memcpy(writeTo, readFrom, n);
 80a2030:	f001 fdd8 	bl	80a3be4 <memcpy>
			memcpy(writeTo, replace.buffer, replace.len);
 80a2034:	4648      	mov	r0, r9
 80a2036:	68b2      	ldr	r2, [r6, #8]
 80a2038:	6831      	ldr	r1, [r6, #0]
 80a203a:	f001 fdd3 	bl	80a3be4 <memcpy>
			len += diff;
 80a203e:	68ab      	ldr	r3, [r5, #8]
			writeTo += replace.len;
 80a2040:	68b2      	ldr	r2, [r6, #8]
			readFrom = foundAt + find.len;
 80a2042:	68bc      	ldr	r4, [r7, #8]
			len += diff;
 80a2044:	4443      	add	r3, r8
			writeTo += replace.len;
 80a2046:	4491      	add	r9, r2
			readFrom = foundAt + find.len;
 80a2048:	4454      	add	r4, sl
			len += diff;
 80a204a:	60ab      	str	r3, [r5, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a204c:	e7e4      	b.n	80a2018 <_ZN6String7replaceERKS_S1_+0x64>
		strcpy(writeTo, readFrom);
 80a204e:	4621      	mov	r1, r4
 80a2050:	4648      	mov	r0, r9
 80a2052:	f001 fe1b 	bl	80a3c8c <strcpy>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 80a2056:	4628      	mov	r0, r5
 80a2058:	b003      	add	sp, #12
 80a205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (size == len) return *this;;
 80a205e:	45ca      	cmp	sl, r9
 80a2060:	d0f9      	beq.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80a2062:	686b      	ldr	r3, [r5, #4]
 80a2064:	454b      	cmp	r3, r9
 80a2066:	d323      	bcc.n	80a20b0 <_ZN6String7replaceERKS_S1_+0xfc>
			buffer[len] = 0;
 80a2068:	f04f 0900 	mov.w	r9, #0
		int index = len - 1;
 80a206c:	68ac      	ldr	r4, [r5, #8]
 80a206e:	1e62      	subs	r2, r4, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80a2070:	2a00      	cmp	r2, #0
 80a2072:	dbf0      	blt.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>
 80a2074:	4639      	mov	r1, r7
 80a2076:	4628      	mov	r0, r5
 80a2078:	f7ff ff54 	bl	80a1f24 <_ZNK6String11lastIndexOfERKS_j>
 80a207c:	1e04      	subs	r4, r0, #0
 80a207e:	dbea      	blt.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>
			readFrom = buffer + index + find.len;
 80a2080:	68bb      	ldr	r3, [r7, #8]
 80a2082:	6829      	ldr	r1, [r5, #0]
 80a2084:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80a2086:	68aa      	ldr	r2, [r5, #8]
			readFrom = buffer + index + find.len;
 80a2088:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80a208a:	1ad2      	subs	r2, r2, r3
 80a208c:	eb01 0008 	add.w	r0, r1, r8
 80a2090:	f001 fdb6 	bl	80a3c00 <memmove>
			len += diff;
 80a2094:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 80a2096:	682a      	ldr	r2, [r5, #0]
			len += diff;
 80a2098:	4443      	add	r3, r8
 80a209a:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 80a209c:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 80a20a0:	6828      	ldr	r0, [r5, #0]
 80a20a2:	68b2      	ldr	r2, [r6, #8]
 80a20a4:	6831      	ldr	r1, [r6, #0]
 80a20a6:	4420      	add	r0, r4
 80a20a8:	f001 fd9c 	bl	80a3be4 <memcpy>
			index--;
 80a20ac:	1e62      	subs	r2, r4, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80a20ae:	e7df      	b.n	80a2070 <_ZN6String7replaceERKS_S1_+0xbc>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80a20b0:	4649      	mov	r1, r9
 80a20b2:	4628      	mov	r0, r5
 80a20b4:	f7ff fdf5 	bl	80a1ca2 <_ZN6String12changeBufferEj>
 80a20b8:	2800      	cmp	r0, #0
 80a20ba:	d1d5      	bne.n	80a2068 <_ZN6String7replaceERKS_S1_+0xb4>
 80a20bc:	e7cb      	b.n	80a2056 <_ZN6String7replaceERKS_S1_+0xa2>

080a20be <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
 80a20be:	b538      	push	{r3, r4, r5, lr}
 80a20c0:	4604      	mov	r4, r0
	if (index >= len) { return *this; }
 80a20c2:	68a3      	ldr	r3, [r4, #8]
String& String::remove(unsigned int index, unsigned int count){
 80a20c4:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
 80a20c6:	428b      	cmp	r3, r1
 80a20c8:	d911      	bls.n	80a20ee <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
 80a20ca:	b182      	cbz	r2, 80a20ee <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
 80a20cc:	4411      	add	r1, r2
 80a20ce:	428b      	cmp	r3, r1
 80a20d0:	bf38      	it	cc
 80a20d2:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
 80a20d4:	6825      	ldr	r5, [r4, #0]
	len = len - count;
 80a20d6:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
 80a20d8:	1813      	adds	r3, r2, r0
	len = len - count;
 80a20da:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
 80a20dc:	1a0a      	subs	r2, r1, r0
 80a20de:	18e9      	adds	r1, r5, r3
 80a20e0:	4428      	add	r0, r5
 80a20e2:	f001 fd8d 	bl	80a3c00 <memmove>
	buffer[len] = 0;
 80a20e6:	2100      	movs	r1, #0
 80a20e8:	6822      	ldr	r2, [r4, #0]
 80a20ea:	68a3      	ldr	r3, [r4, #8]
 80a20ec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a20ee:	4620      	mov	r0, r4
 80a20f0:	bd38      	pop	{r3, r4, r5, pc}

080a20f2 <_ZN6String6removeEj>:
        int count = len - index;
 80a20f2:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
 80a20f4:	1a52      	subs	r2, r2, r1
 80a20f6:	f7ff bfe2 	b.w	80a20be <_ZN6String6removeEjj>

080a20fa <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a20fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a20fc:	4606      	mov	r6, r0
 80a20fe:	460d      	mov	r5, r1
  size_t n = 0;
 80a2100:	2400      	movs	r4, #0
 80a2102:	188f      	adds	r7, r1, r2
  while (size--) {
 80a2104:	42bd      	cmp	r5, r7
 80a2106:	d00c      	beq.n	80a2122 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2108:	6833      	ldr	r3, [r6, #0]
 80a210a:	4630      	mov	r0, r6
 80a210c:	689b      	ldr	r3, [r3, #8]
 80a210e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2112:	4798      	blx	r3
     if (chunk>=0)
 80a2114:	1e03      	subs	r3, r0, #0
 80a2116:	db01      	blt.n	80a211c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2118:	441c      	add	r4, r3
  while (size--) {
 80a211a:	e7f3      	b.n	80a2104 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a211c:	2c00      	cmp	r4, #0
 80a211e:	bf08      	it	eq
 80a2120:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2122:	4620      	mov	r0, r4
 80a2124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2126 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2126:	b570      	push	{r4, r5, r6, lr}
 80a2128:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a212a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a212c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a212e:	b149      	cbz	r1, 80a2144 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2130:	f001 fdcf 	bl	80a3cd2 <strlen>
 80a2134:	682b      	ldr	r3, [r5, #0]
 80a2136:	4602      	mov	r2, r0
 80a2138:	4621      	mov	r1, r4
 80a213a:	4628      	mov	r0, r5
    }
 80a213c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a2140:	68db      	ldr	r3, [r3, #12]
 80a2142:	4718      	bx	r3
    }
 80a2144:	bd70      	pop	{r4, r5, r6, pc}

080a2146 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a2146:	b508      	push	{r3, lr}
  return write(str);
 80a2148:	f7ff ffed 	bl	80a2126 <_ZN5Print5writeEPKc>
}
 80a214c:	bd08      	pop	{r3, pc}

080a214e <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a214e:	6803      	ldr	r3, [r0, #0]
 80a2150:	689b      	ldr	r3, [r3, #8]
 80a2152:	4718      	bx	r3

080a2154 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2154:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2156:	210d      	movs	r1, #13
{
 80a2158:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a215a:	f7ff fff8 	bl	80a214e <_ZN5Print5printEc>
  n += print('\n');
 80a215e:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a2160:	4604      	mov	r4, r0
  n += print('\n');
 80a2162:	4628      	mov	r0, r5
 80a2164:	f7ff fff3 	bl	80a214e <_ZN5Print5printEc>
  return n;
}
 80a2168:	4420      	add	r0, r4
 80a216a:	bd38      	pop	{r3, r4, r5, pc}

080a216c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a216c:	b538      	push	{r3, r4, r5, lr}
 80a216e:	4605      	mov	r5, r0
  return write(str);
 80a2170:	f7ff ffd9 	bl	80a2126 <_ZN5Print5writeEPKc>
 80a2174:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a2176:	4628      	mov	r0, r5
 80a2178:	f7ff ffec 	bl	80a2154 <_ZN5Print7printlnEv>
  return n;
}
 80a217c:	4420      	add	r0, r4
 80a217e:	bd38      	pop	{r3, r4, r5, pc}

080a2180 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2180:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2182:	2a01      	cmp	r2, #1
 80a2184:	bf98      	it	ls
 80a2186:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2188:	b530      	push	{r4, r5, lr}
 80a218a:	b08b      	sub	sp, #44	; 0x2c
 80a218c:	460c      	mov	r4, r1
  *str = '\0';
 80a218e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a2192:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a2194:	4625      	mov	r5, r4
 80a2196:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a219a:	fb04 5312 	mls	r3, r4, r2, r5
 80a219e:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a21a0:	2b09      	cmp	r3, #9
 80a21a2:	bf94      	ite	ls
 80a21a4:	3330      	addls	r3, #48	; 0x30
 80a21a6:	3337      	addhi	r3, #55	; 0x37
 80a21a8:	b2db      	uxtb	r3, r3
  } while(n);
 80a21aa:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a21ac:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a21b0:	d9f0      	bls.n	80a2194 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a21b2:	f7ff ffb8 	bl	80a2126 <_ZN5Print5writeEPKc>
}
 80a21b6:	b00b      	add	sp, #44	; 0x2c
 80a21b8:	bd30      	pop	{r4, r5, pc}

080a21ba <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a21ba:	2300      	movs	r3, #0
 80a21bc:	6840      	ldr	r0, [r0, #4]
 80a21be:	461a      	mov	r2, r3
 80a21c0:	4619      	mov	r1, r3
 80a21c2:	f7ff bbb1 	b.w	80a1928 <network_on>

080a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a21c6:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a21c8:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a21ca:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a21cc:	b17c      	cbz	r4, 80a21ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a21ce:	6863      	ldr	r3, [r4, #4]
 80a21d0:	3b01      	subs	r3, #1
 80a21d2:	6063      	str	r3, [r4, #4]
 80a21d4:	b95b      	cbnz	r3, 80a21ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a21d6:	6823      	ldr	r3, [r4, #0]
 80a21d8:	4620      	mov	r0, r4
 80a21da:	689b      	ldr	r3, [r3, #8]
 80a21dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a21de:	68a3      	ldr	r3, [r4, #8]
 80a21e0:	3b01      	subs	r3, #1
 80a21e2:	60a3      	str	r3, [r4, #8]
 80a21e4:	b91b      	cbnz	r3, 80a21ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a21e6:	6823      	ldr	r3, [r4, #0]
 80a21e8:	4620      	mov	r0, r4
 80a21ea:	68db      	ldr	r3, [r3, #12]
 80a21ec:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a21ee:	4628      	mov	r0, r5
 80a21f0:	bd38      	pop	{r3, r4, r5, pc}

080a21f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a21f2:	680b      	ldr	r3, [r1, #0]
 80a21f4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a21f6:	b113      	cbz	r3, 80a21fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a21f8:	685a      	ldr	r2, [r3, #4]
 80a21fa:	3201      	adds	r2, #1
 80a21fc:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a21fe:	4770      	bx	lr

080a2200 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2200:	4b01      	ldr	r3, [pc, #4]	; (80a2208 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2202:	4a02      	ldr	r2, [pc, #8]	; (80a220c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2204:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a2206:	4770      	bx	lr
 80a2208:	20008128 	.word	0x20008128
 80a220c:	080a4100 	.word	0x080a4100

080a2210 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a2210:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2212:	2000      	movs	r0, #0
 80a2214:	f7ff fbe0 	bl	80a19d8 <spark_sync_time_pending>
 80a2218:	b128      	cbz	r0, 80a2226 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a221a:	f7ff fbcd 	bl	80a19b8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a221e:	f080 0001 	eor.w	r0, r0, #1
 80a2222:	b2c0      	uxtb	r0, r0
    }
 80a2224:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a2226:	2001      	movs	r0, #1
 80a2228:	e7fc      	b.n	80a2224 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a222a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a222a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a222c:	2000      	movs	r0, #0
 80a222e:	f7ff f98d 	bl	80a154c <hal_rtc_time_is_valid>
    if (rtcstate)
 80a2232:	4604      	mov	r4, r0
 80a2234:	b9a0      	cbnz	r0, 80a2260 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2236:	f7ff fb13 	bl	80a1860 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a223a:	2801      	cmp	r0, #1
 80a223c:	d110      	bne.n	80a2260 <_ZN9TimeClass7isValidEv+0x36>
 80a223e:	4620      	mov	r0, r4
 80a2240:	f7ff fb36 	bl	80a18b0 <system_thread_get_state>
 80a2244:	b960      	cbnz	r0, 80a2260 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a2246:	f7ff ffe3 	bl	80a2210 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a224a:	b910      	cbnz	r0, 80a2252 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a224c:	f7ff fbac 	bl	80a19a8 <spark_process>
        while (_while() && !_condition()) {
 80a2250:	e7f9      	b.n	80a2246 <_ZN9TimeClass7isValidEv+0x1c>
 80a2252:	f7ff ffdd 	bl	80a2210 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a2256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a225a:	2000      	movs	r0, #0
 80a225c:	f7ff b976 	b.w	80a154c <hal_rtc_time_is_valid>
}
 80a2260:	4620      	mov	r0, r4
 80a2262:	bd10      	pop	{r4, pc}

080a2264 <_ZN9TimeClass3nowEv>:
{
 80a2264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a2266:	f7ff ffe0 	bl	80a222a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a226a:	2210      	movs	r2, #16
 80a226c:	2100      	movs	r1, #0
 80a226e:	4668      	mov	r0, sp
 80a2270:	f001 fce0 	bl	80a3c34 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a2274:	2100      	movs	r1, #0
 80a2276:	4668      	mov	r0, sp
 80a2278:	f7ff f970 	bl	80a155c <hal_rtc_get_time>
}
 80a227c:	9800      	ldr	r0, [sp, #0]
 80a227e:	b005      	add	sp, #20
 80a2280:	f85d fb04 	ldr.w	pc, [sp], #4

080a2284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2284:	4b02      	ldr	r3, [pc, #8]	; (80a2290 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2286:	681a      	ldr	r2, [r3, #0]
 80a2288:	4b02      	ldr	r3, [pc, #8]	; (80a2294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a228a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a228c:	4770      	bx	lr
 80a228e:	bf00      	nop
 80a2290:	2000000c 	.word	0x2000000c
 80a2294:	2000812c 	.word	0x2000812c

080a2298 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2298:	2100      	movs	r1, #0
 80a229a:	f7ff baf1 	b.w	80a1880 <system_delay_ms>

080a229e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a229e:	b510      	push	{r4, lr}
 80a22a0:	4604      	mov	r4, r0
 80a22a2:	f7fd ff5e 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
 80a22a6:	4620      	mov	r0, r4
 80a22a8:	bd10      	pop	{r4, pc}

080a22aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a22aa:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22ac:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a22ae:	460b      	mov	r3, r1
 80a22b0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a22b2:	c803      	ldmia	r0, {r0, r1}
 80a22b4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a22b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a22bc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a22c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a22c4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a22c8:	b002      	add	sp, #8
 80a22ca:	bd10      	pop	{r4, pc}

080a22cc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a22cc:	2300      	movs	r3, #0
 80a22ce:	4803      	ldr	r0, [pc, #12]	; (80a22dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a22d0:	4a03      	ldr	r2, [pc, #12]	; (80a22e0 <_GLOBAL__sub_I_RGB+0x14>)
 80a22d2:	4904      	ldr	r1, [pc, #16]	; (80a22e4 <_GLOBAL__sub_I_RGB+0x18>)
 80a22d4:	6083      	str	r3, [r0, #8]
 80a22d6:	f000 bf07 	b.w	80a30e8 <__aeabi_atexit>
 80a22da:	bf00      	nop
 80a22dc:	20008130 	.word	0x20008130
 80a22e0:	20000078 	.word	0x20000078
 80a22e4:	080a229f 	.word	0x080a229f

080a22e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a22e8:	4b01      	ldr	r3, [pc, #4]	; (80a22f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a22ea:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a22ec:	4770      	bx	lr
 80a22ee:	bf00      	nop
 80a22f0:	20000010 	.word	0x20000010

080a22f4 <serialEventRun>:
{
 80a22f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a22f6:	4b13      	ldr	r3, [pc, #76]	; (80a2344 <serialEventRun+0x50>)
 80a22f8:	b143      	cbz	r3, 80a230c <serialEventRun+0x18>
 80a22fa:	f000 fbf7 	bl	80a2aec <_Z16_fetch_usbserialv>
 80a22fe:	6803      	ldr	r3, [r0, #0]
 80a2300:	691b      	ldr	r3, [r3, #16]
 80a2302:	4798      	blx	r3
 80a2304:	2800      	cmp	r0, #0
 80a2306:	dd01      	ble.n	80a230c <serialEventRun+0x18>
        serialEvent();
 80a2308:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a230c:	4b0e      	ldr	r3, [pc, #56]	; (80a2348 <serialEventRun+0x54>)
 80a230e:	b143      	cbz	r3, 80a2322 <serialEventRun+0x2e>
 80a2310:	f000 fcc6 	bl	80a2ca0 <_Z22__fetch_global_Serial1v>
 80a2314:	6803      	ldr	r3, [r0, #0]
 80a2316:	691b      	ldr	r3, [r3, #16]
 80a2318:	4798      	blx	r3
 80a231a:	2800      	cmp	r0, #0
 80a231c:	dd01      	ble.n	80a2322 <serialEventRun+0x2e>
        serialEvent1();
 80a231e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a2322:	4b0a      	ldr	r3, [pc, #40]	; (80a234c <serialEventRun+0x58>)
 80a2324:	b10b      	cbz	r3, 80a232a <serialEventRun+0x36>
 80a2326:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a232a:	4b09      	ldr	r3, [pc, #36]	; (80a2350 <serialEventRun+0x5c>)
 80a232c:	b143      	cbz	r3, 80a2340 <serialEventRun+0x4c>
 80a232e:	f000 fc0d 	bl	80a2b4c <_Z17_fetch_usbserial1v>
 80a2332:	6803      	ldr	r3, [r0, #0]
 80a2334:	691b      	ldr	r3, [r3, #16]
 80a2336:	4798      	blx	r3
 80a2338:	2800      	cmp	r0, #0
 80a233a:	dd01      	ble.n	80a2340 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a233c:	f3af 8000 	nop.w
}
 80a2340:	bd08      	pop	{r3, pc}
 80a2342:	bf00      	nop
	...

080a2354 <_post_loop>:
{
 80a2354:	b508      	push	{r3, lr}
	serialEventRun();
 80a2356:	f7ff ffcd 	bl	80a22f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a235a:	f7ff f8df 	bl	80a151c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a235e:	4b01      	ldr	r3, [pc, #4]	; (80a2364 <_post_loop+0x10>)
 80a2360:	6018      	str	r0, [r3, #0]
}
 80a2362:	bd08      	pop	{r3, pc}
 80a2364:	200081a8 	.word	0x200081a8

080a2368 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2368:	4802      	ldr	r0, [pc, #8]	; (80a2374 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a236a:	4a03      	ldr	r2, [pc, #12]	; (80a2378 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a236c:	4903      	ldr	r1, [pc, #12]	; (80a237c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a236e:	1a12      	subs	r2, r2, r0
 80a2370:	f001 bc38 	b.w	80a3be4 <memcpy>
 80a2374:	40024000 	.word	0x40024000
 80a2378:	40024004 	.word	0x40024004
 80a237c:	080a4280 	.word	0x080a4280

080a2380 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2380:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2382:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2384:	461a      	mov	r2, r3
 80a2386:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a238a:	9300      	str	r3, [sp, #0]
 80a238c:	f7ff faa2 	bl	80a18d4 <system_ctrl_set_result>
}
 80a2390:	b003      	add	sp, #12
 80a2392:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2398 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a2398:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a239a:	8843      	ldrh	r3, [r0, #2]
 80a239c:	2b0a      	cmp	r3, #10
 80a239e:	d008      	beq.n	80a23b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a23a0:	2b50      	cmp	r3, #80	; 0x50
 80a23a2:	d10b      	bne.n	80a23bc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a23a4:	4b09      	ldr	r3, [pc, #36]	; (80a23cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a23a6:	681b      	ldr	r3, [r3, #0]
 80a23a8:	b14b      	cbz	r3, 80a23be <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a23aa:	b003      	add	sp, #12
 80a23ac:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a23b0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a23b2:	f7ff ffe5 	bl	80a2380 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a23b6:	b003      	add	sp, #12
 80a23b8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a23bc:	2300      	movs	r3, #0
 80a23be:	461a      	mov	r2, r3
 80a23c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a23c4:	9300      	str	r3, [sp, #0]
 80a23c6:	f7ff fa85 	bl	80a18d4 <system_ctrl_set_result>
}
 80a23ca:	e7f4      	b.n	80a23b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a23cc:	20008144 	.word	0x20008144

080a23d0 <module_user_init_hook>:
{
 80a23d0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a23d2:	4c12      	ldr	r4, [pc, #72]	; (80a241c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a23d4:	2100      	movs	r1, #0
 80a23d6:	4812      	ldr	r0, [pc, #72]	; (80a2420 <module_user_init_hook+0x50>)
 80a23d8:	f7ff fb36 	bl	80a1a48 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a23dc:	4d11      	ldr	r5, [pc, #68]	; (80a2424 <module_user_init_hook+0x54>)
 80a23de:	6823      	ldr	r3, [r4, #0]
 80a23e0:	42ab      	cmp	r3, r5
 80a23e2:	bf0c      	ite	eq
 80a23e4:	2201      	moveq	r2, #1
 80a23e6:	2200      	movne	r2, #0
 80a23e8:	4b0f      	ldr	r3, [pc, #60]	; (80a2428 <module_user_init_hook+0x58>)
 80a23ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a23ec:	d002      	beq.n	80a23f4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a23ee:	f7ff ffbb 	bl	80a2368 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a23f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a23f4:	f7ff f882 	bl	80a14fc <HAL_RNG_GetRandomNumber>
 80a23f8:	4604      	mov	r4, r0
    srand(seed);
 80a23fa:	f001 fc23 	bl	80a3c44 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a23fe:	4b0b      	ldr	r3, [pc, #44]	; (80a242c <module_user_init_hook+0x5c>)
 80a2400:	b113      	cbz	r3, 80a2408 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a2402:	4620      	mov	r0, r4
 80a2404:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2408:	2100      	movs	r1, #0
 80a240a:	4808      	ldr	r0, [pc, #32]	; (80a242c <module_user_init_hook+0x5c>)
 80a240c:	f7ff faec 	bl	80a19e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2414:	2100      	movs	r1, #0
 80a2416:	4806      	ldr	r0, [pc, #24]	; (80a2430 <module_user_init_hook+0x60>)
 80a2418:	f7ff ba52 	b.w	80a18c0 <system_ctrl_set_app_request_handler>
 80a241c:	40024000 	.word	0x40024000
 80a2420:	080a22e9 	.word	0x080a22e9
 80a2424:	9a271c1e 	.word	0x9a271c1e
 80a2428:	20008140 	.word	0x20008140
 80a242c:	00000000 	.word	0x00000000
 80a2430:	080a2399 	.word	0x080a2399

080a2434 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2434:	4770      	bx	lr

080a2436 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a2436:	2000      	movs	r0, #0
 80a2438:	4770      	bx	lr

080a243a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a243a:	b510      	push	{r4, lr}
 80a243c:	4604      	mov	r4, r0
 80a243e:	2110      	movs	r1, #16
 80a2440:	f000 fe57 	bl	80a30f2 <_ZdlPvj>
 80a2444:	4620      	mov	r0, r4
 80a2446:	bd10      	pop	{r4, pc}

080a2448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a2448:	b508      	push	{r3, lr}
      { delete this; }
 80a244a:	f7ff fff6 	bl	80a243a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a244e:	bd08      	pop	{r3, pc}

080a2450 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a2450:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a2452:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a2454:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a2458:	6002      	str	r2, [r0, #0]
 80a245a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a245c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a245e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a2460:	680c      	ldr	r4, [r1, #0]
 80a2462:	8085      	strh	r5, [r0, #4]
 80a2464:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2466:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a2468:	bd30      	pop	{r4, r5, pc}

080a246a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a246a:	b510      	push	{r4, lr}
 80a246c:	4604      	mov	r4, r0
    free((void*)msg_);
 80a246e:	6800      	ldr	r0, [r0, #0]
 80a2470:	f7ff faca 	bl	80a1a08 <free>
}
 80a2474:	4620      	mov	r0, r4
 80a2476:	bd10      	pop	{r4, pc}

080a2478 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a2478:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a247a:	68c4      	ldr	r4, [r0, #12]
 80a247c:	b1f4      	cbz	r4, 80a24bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a247e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2480:	2b02      	cmp	r3, #2
 80a2482:	d103      	bne.n	80a248c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a2484:	f104 000c 	add.w	r0, r4, #12
 80a2488:	f7ff ffef 	bl	80a246a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a248c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a248e:	b135      	cbz	r5, 80a249e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a2490:	4628      	mov	r0, r5
 80a2492:	f7fd fe66 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
 80a2496:	2110      	movs	r1, #16
 80a2498:	4628      	mov	r0, r5
 80a249a:	f000 fe2a 	bl	80a30f2 <_ZdlPvj>
 80a249e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a24a0:	b135      	cbz	r5, 80a24b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a24a2:	4628      	mov	r0, r5
 80a24a4:	f7fd fe5d 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
 80a24a8:	2110      	movs	r1, #16
 80a24aa:	4628      	mov	r0, r5
 80a24ac:	f000 fe21 	bl	80a30f2 <_ZdlPvj>
 80a24b0:	4620      	mov	r0, r4
 80a24b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a24b6:	2114      	movs	r1, #20
 80a24b8:	f000 be1b 	b.w	80a30f2 <_ZdlPvj>
 80a24bc:	bd38      	pop	{r3, r4, r5, pc}

080a24be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a24be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a24c0:	460e      	mov	r6, r1
 80a24c2:	4604      	mov	r4, r0
 80a24c4:	f856 3b04 	ldr.w	r3, [r6], #4
 80a24c8:	460d      	mov	r5, r1
 80a24ca:	a801      	add	r0, sp, #4
 80a24cc:	4631      	mov	r1, r6
 80a24ce:	9300      	str	r3, [sp, #0]
 80a24d0:	f7ff fe8f 	bl	80a21f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a24d4:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a24d6:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a24d8:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a24da:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a24dc:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a24de:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a24e0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a24e2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a24e4:	f7ff fe6f 	bl	80a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a24e8:	4630      	mov	r0, r6
 80a24ea:	f7ff fe6c 	bl	80a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a24ee:	4628      	mov	r0, r5
 80a24f0:	2108      	movs	r1, #8
 80a24f2:	f000 fdfe 	bl	80a30f2 <_ZdlPvj>
        return p;
    }
 80a24f6:	4620      	mov	r0, r4
 80a24f8:	b002      	add	sp, #8
 80a24fa:	bd70      	pop	{r4, r5, r6, pc}

080a24fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a24fc:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a24fe:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2500:	b90a      	cbnz	r2, 80a2506 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2502:	f000 fdfa 	bl	80a30fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2506:	68c3      	ldr	r3, [r0, #12]
    }
 80a2508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a250c:	4718      	bx	r3

080a250e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a250e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2510:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a2512:	f100 0110 	add.w	r1, r0, #16
 80a2516:	f7ff fff1 	bl	80a24fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a251a:	bd08      	pop	{r3, pc}

080a251c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a251c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a251e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2520:	b90a      	cbnz	r2, 80a2526 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2522:	f000 fdea 	bl	80a30fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2526:	68c3      	ldr	r3, [r0, #12]
    }
 80a2528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a252c:	4718      	bx	r3

080a252e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a252e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2530:	6800      	ldr	r0, [r0, #0]
 80a2532:	f100 0110 	add.w	r1, r0, #16
 80a2536:	f7ff fff1 	bl	80a251c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a253a:	bd08      	pop	{r3, pc}

080a253c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a253c:	b538      	push	{r3, r4, r5, lr}
 80a253e:	2300      	movs	r3, #0
 80a2540:	4604      	mov	r4, r0
 80a2542:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2544:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2546:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2548:	f7fd fda7 	bl	80a009a <_Znwj>
 80a254c:	b128      	cbz	r0, 80a255a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a254e:	2301      	movs	r3, #1
 80a2550:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a2554:	4b02      	ldr	r3, [pc, #8]	; (80a2560 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a2556:	60c5      	str	r5, [r0, #12]
 80a2558:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a255a:	6020      	str	r0, [r4, #0]
	}
 80a255c:	4620      	mov	r0, r4
 80a255e:	bd38      	pop	{r3, r4, r5, pc}
 80a2560:	080a4128 	.word	0x080a4128

080a2564 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a2564:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2566:	2300      	movs	r3, #0
 80a2568:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a256a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a256c:	4604      	mov	r4, r0
 80a256e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a2570:	b12b      	cbz	r3, 80a257e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2572:	2202      	movs	r2, #2
 80a2574:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2576:	68eb      	ldr	r3, [r5, #12]
 80a2578:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a257a:	68ab      	ldr	r3, [r5, #8]
 80a257c:	60a3      	str	r3, [r4, #8]
    }
 80a257e:	4620      	mov	r0, r4
 80a2580:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a2584:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2586:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a2588:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a258a:	4668      	mov	r0, sp
 80a258c:	f7ff ff60 	bl	80a2450 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2590:	f04f 0302 	mov.w	r3, #2
 80a2594:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a2598:	2a00      	cmp	r2, #0
 80a259a:	d103      	bne.n	80a25a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a259c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a25a0:	2900      	cmp	r1, #0
 80a25a2:	d1f7      	bne.n	80a2594 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a25a4:	d125      	bne.n	80a25f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a25a6:	f104 050c 	add.w	r5, r4, #12
 80a25aa:	4669      	mov	r1, sp
 80a25ac:	4628      	mov	r0, r5
 80a25ae:	f7ff ff4f 	bl	80a2450 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a25b2:	2301      	movs	r3, #1
 80a25b4:	f3bf 8f5b 	dmb	ish
 80a25b8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a25ba:	2000      	movs	r0, #0
 80a25bc:	f3bf 8f5b 	dmb	ish
 80a25c0:	f104 0308 	add.w	r3, r4, #8
 80a25c4:	e853 6f00 	ldrex	r6, [r3]
 80a25c8:	e843 0200 	strex	r2, r0, [r3]
 80a25cc:	2a00      	cmp	r2, #0
 80a25ce:	d1f9      	bne.n	80a25c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a25d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a25d4:	b16e      	cbz	r6, 80a25f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a25d6:	f7ff f95b 	bl	80a1890 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a25da:	b178      	cbz	r0, 80a25fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a25dc:	4629      	mov	r1, r5
 80a25de:	4630      	mov	r0, r6
 80a25e0:	f7ff ff8c 	bl	80a24fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a25e4:	4630      	mov	r0, r6
 80a25e6:	f7fd fdbc 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a25ea:	2110      	movs	r1, #16
 80a25ec:	4630      	mov	r0, r6
 80a25ee:	f000 fd80 	bl	80a30f2 <_ZdlPvj>
        p_->setError(std::move(error));
 80a25f2:	4668      	mov	r0, sp
 80a25f4:	f7ff ff39 	bl	80a246a <_ZN8particle5ErrorD1Ev>
    }
 80a25f8:	b009      	add	sp, #36	; 0x24
 80a25fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a25fc:	4631      	mov	r1, r6
 80a25fe:	a802      	add	r0, sp, #8
 80a2600:	f7ff ffb0 	bl	80a2564 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2604:	68e0      	ldr	r0, [r4, #12]
 80a2606:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a260a:	b108      	cbz	r0, 80a2610 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a260c:	f001 fb46 	bl	80a3c9c <strdup>
        type_(type) {
 80a2610:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2612:	2010      	movs	r0, #16
 80a2614:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2618:	f7fd fd3f 	bl	80a009a <_Znwj>
 80a261c:	4605      	mov	r5, r0
 80a261e:	b1e8      	cbz	r0, 80a265c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a2620:	2700      	movs	r7, #0
 80a2622:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2624:	2018      	movs	r0, #24
 80a2626:	f7fd fd38 	bl	80a009a <_Znwj>
 80a262a:	4604      	mov	r4, r0
 80a262c:	b188      	cbz	r0, 80a2652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a262e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2630:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2632:	a802      	add	r0, sp, #8
 80a2634:	f7ff fe39 	bl	80a22aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2638:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a263a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a263c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a263e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2640:	9204      	str	r2, [sp, #16]
 80a2642:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2644:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2646:	60e3      	str	r3, [r4, #12]
 80a2648:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a264c:	9205      	str	r2, [sp, #20]
 80a264e:	f7ff feff 	bl	80a2450 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a2652:	4b08      	ldr	r3, [pc, #32]	; (80a2674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2654:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2656:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2658:	4b07      	ldr	r3, [pc, #28]	; (80a2678 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a265a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a265c:	a806      	add	r0, sp, #24
 80a265e:	f7ff ff04 	bl	80a246a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2662:	a802      	add	r0, sp, #8
 80a2664:	f7fd fd7d 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2668:	2200      	movs	r2, #0
 80a266a:	4629      	mov	r1, r5
 80a266c:	4803      	ldr	r0, [pc, #12]	; (80a267c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a266e:	f7ff f917 	bl	80a18a0 <application_thread_invoke>
 80a2672:	e7b7      	b.n	80a25e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a2674:	080a250f 	.word	0x080a250f
 80a2678:	080a27a5 	.word	0x080a27a5
 80a267c:	080a2d25 	.word	0x080a2d25

080a2680 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2684:	b08a      	sub	sp, #40	; 0x28
 80a2686:	4605      	mov	r5, r0
 80a2688:	460c      	mov	r4, r1
 80a268a:	4617      	mov	r7, r2
 80a268c:	4698      	mov	r8, r3
 80a268e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2692:	f7ff f991 	bl	80a19b8 <spark_cloud_flag_connected>
 80a2696:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a2698:	4682      	mov	sl, r0
 80a269a:	bb38      	cbnz	r0, 80a26ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a269c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a26a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a26a2:	a905      	add	r1, sp, #20
 80a26a4:	4630      	mov	r0, r6
 80a26a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a26aa:	f7ff fed1 	bl	80a2450 <_ZN8particle5ErrorC1EOS0_>
 80a26ae:	2014      	movs	r0, #20
 80a26b0:	f7fd fcf3 	bl	80a009a <_Znwj>
 80a26b4:	4604      	mov	r4, r0
 80a26b6:	b148      	cbz	r0, 80a26cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a26b8:	2302      	movs	r3, #2
 80a26ba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a26bc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a26be:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a26c2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a26c4:	4631      	mov	r1, r6
 80a26c6:	300c      	adds	r0, #12
 80a26c8:	f7ff fec2 	bl	80a2450 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a26cc:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a26ce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a26d0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a26d4:	f7ff ff32 	bl	80a253c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a26d8:	4630      	mov	r0, r6
 80a26da:	f7ff fec6 	bl	80a246a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a26de:	a805      	add	r0, sp, #20
 80a26e0:	f7ff fec3 	bl	80a246a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a26e4:	4628      	mov	r0, r5
 80a26e6:	b00a      	add	sp, #40	; 0x28
 80a26e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a26ec:	230c      	movs	r3, #12
 80a26ee:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a26f2:	2014      	movs	r0, #20
 80a26f4:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a26f8:	9307      	str	r3, [sp, #28]
 80a26fa:	f7fd fcce 	bl	80a009a <_Znwj>
 80a26fe:	4601      	mov	r1, r0
 80a2700:	b128      	cbz	r0, 80a270e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2702:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a2706:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a270a:	f880 a001 	strb.w	sl, [r0, #1]
 80a270e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2710:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a2712:	f7ff ff13 	bl	80a253c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a2716:	4b22      	ldr	r3, [pc, #136]	; (80a27a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2718:	2008      	movs	r0, #8
 80a271a:	9308      	str	r3, [sp, #32]
 80a271c:	f7fd fcbd 	bl	80a009a <_Znwj>
 80a2720:	4682      	mov	sl, r0
 80a2722:	b128      	cbz	r0, 80a2730 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2724:	9b03      	ldr	r3, [sp, #12]
 80a2726:	a904      	add	r1, sp, #16
 80a2728:	f840 3b04 	str.w	r3, [r0], #4
 80a272c:	f7ff fd61 	bl	80a21f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2730:	4642      	mov	r2, r8
 80a2732:	4639      	mov	r1, r7
 80a2734:	4620      	mov	r0, r4
 80a2736:	9600      	str	r6, [sp, #0]
 80a2738:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a273c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2740:	f7ff f942 	bl	80a19c8 <spark_send_event>
 80a2744:	b9b8      	cbnz	r0, 80a2776 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a2746:	9b03      	ldr	r3, [sp, #12]
 80a2748:	785b      	ldrb	r3, [r3, #1]
 80a274a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a274e:	b993      	cbnz	r3, 80a2776 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a2750:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a2754:	a905      	add	r1, sp, #20
 80a2756:	a803      	add	r0, sp, #12
 80a2758:	9205      	str	r2, [sp, #20]
 80a275a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a275e:	f7ff ff11 	bl	80a2584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2762:	a805      	add	r0, sp, #20
 80a2764:	f7ff fe81 	bl	80a246a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2768:	a805      	add	r0, sp, #20
 80a276a:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a276c:	f7ff fea7 	bl	80a24be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a2770:	a806      	add	r0, sp, #24
 80a2772:	f7ff fd28 	bl	80a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2776:	9b03      	ldr	r3, [sp, #12]
 80a2778:	a904      	add	r1, sp, #16
 80a277a:	a806      	add	r0, sp, #24
 80a277c:	9305      	str	r3, [sp, #20]
 80a277e:	f7ff fd38 	bl	80a21f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2782:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2784:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2786:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a2788:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a278a:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a278c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a278e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a2790:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a2792:	f7ff fd18 	bl	80a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2796:	a804      	add	r0, sp, #16
 80a2798:	f7ff fd15 	bl	80a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a279c:	e7a2      	b.n	80a26e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a279e:	bf00      	nop
 80a27a0:	080a2869 	.word	0x080a2869

080a27a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a27a4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a27a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27a8:	4605      	mov	r5, r0
	  switch (__op)
 80a27aa:	d007      	beq.n	80a27bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a27ac:	2a03      	cmp	r2, #3
 80a27ae:	d018      	beq.n	80a27e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a27b0:	2a01      	cmp	r2, #1
 80a27b2:	d101      	bne.n	80a27b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a27b4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a27b6:	6003      	str	r3, [r0, #0]
	}
 80a27b8:	2000      	movs	r0, #0
 80a27ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a27bc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a27be:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a27c0:	f7fd fc6b 	bl	80a009a <_Znwj>
 80a27c4:	4604      	mov	r4, r0
 80a27c6:	b150      	cbz	r0, 80a27de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a27c8:	4631      	mov	r1, r6
 80a27ca:	f7ff fecb 	bl	80a2564 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a27ce:	6930      	ldr	r0, [r6, #16]
 80a27d0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a27d4:	b108      	cbz	r0, 80a27da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a27d6:	f001 fa61 	bl	80a3c9c <strdup>
        type_(type) {
 80a27da:	6120      	str	r0, [r4, #16]
 80a27dc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a27de:	602c      	str	r4, [r5, #0]
	}
 80a27e0:	e7ea      	b.n	80a27b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a27e2:	6804      	ldr	r4, [r0, #0]
 80a27e4:	2c00      	cmp	r4, #0
 80a27e6:	d0e7      	beq.n	80a27b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a27e8:	f104 0010 	add.w	r0, r4, #16
 80a27ec:	f7ff fe3d 	bl	80a246a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a27f0:	4620      	mov	r0, r4
 80a27f2:	f7fd fcb6 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a27f6:	2118      	movs	r1, #24
 80a27f8:	4620      	mov	r0, r4
 80a27fa:	f000 fc7a 	bl	80a30f2 <_ZdlPvj>
 80a27fe:	e7db      	b.n	80a27b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a2800 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a2800:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2802:	2300      	movs	r3, #0
 80a2804:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a2806:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2808:	4604      	mov	r4, r0
 80a280a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a280c:	b12b      	cbz	r3, 80a281a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a280e:	2202      	movs	r2, #2
 80a2810:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2812:	68eb      	ldr	r3, [r5, #12]
 80a2814:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2816:	68ab      	ldr	r3, [r5, #8]
 80a2818:	60a3      	str	r3, [r4, #8]
    }
 80a281a:	4620      	mov	r0, r4
 80a281c:	bd38      	pop	{r3, r4, r5, pc}

080a281e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a281e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2820:	b570      	push	{r4, r5, r6, lr}
 80a2822:	4604      	mov	r4, r0
	  switch (__op)
 80a2824:	d007      	beq.n	80a2836 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a2826:	2a03      	cmp	r2, #3
 80a2828:	d012      	beq.n	80a2850 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a282a:	2a01      	cmp	r2, #1
 80a282c:	d101      	bne.n	80a2832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a282e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2830:	6003      	str	r3, [r0, #0]
	}
 80a2832:	2000      	movs	r0, #0
 80a2834:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2836:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a2838:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a283a:	f7fd fc2e 	bl	80a009a <_Znwj>
 80a283e:	4605      	mov	r5, r0
 80a2840:	b120      	cbz	r0, 80a284c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a2842:	4631      	mov	r1, r6
 80a2844:	f7ff ffdc 	bl	80a2800 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2848:	7c33      	ldrb	r3, [r6, #16]
 80a284a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a284c:	6025      	str	r5, [r4, #0]
	}
 80a284e:	e7f0      	b.n	80a2832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a2850:	6804      	ldr	r4, [r0, #0]
 80a2852:	2c00      	cmp	r4, #0
 80a2854:	d0ed      	beq.n	80a2832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a2856:	4620      	mov	r0, r4
 80a2858:	f7fd fc83 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a285c:	2114      	movs	r1, #20
 80a285e:	4620      	mov	r0, r4
 80a2860:	f000 fc47 	bl	80a30f2 <_ZdlPvj>
 80a2864:	e7e5      	b.n	80a2832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a2868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2868:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a286a:	4604      	mov	r4, r0
 80a286c:	b089      	sub	sp, #36	; 0x24
 80a286e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2870:	a801      	add	r0, sp, #4
 80a2872:	4611      	mov	r1, r2
 80a2874:	f7ff fe23 	bl	80a24be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2878:	b1a4      	cbz	r4, 80a28a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a287a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a287c:	b11d      	cbz	r5, 80a2886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a287e:	4628      	mov	r0, r5
 80a2880:	f001 fa0c 	bl	80a3c9c <strdup>
 80a2884:	4605      	mov	r5, r0
 80a2886:	a801      	add	r0, sp, #4
 80a2888:	a903      	add	r1, sp, #12
        type_(type) {
 80a288a:	9503      	str	r5, [sp, #12]
 80a288c:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a2890:	f7ff fe78 	bl	80a2584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2894:	a803      	add	r0, sp, #12
 80a2896:	f7ff fde8 	bl	80a246a <_ZN8particle5ErrorD1Ev>
 80a289a:	a802      	add	r0, sp, #8
 80a289c:	f7ff fc93 	bl	80a21c6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a28a0:	b009      	add	sp, #36	; 0x24
 80a28a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a28a4:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a28a6:	9d01      	ldr	r5, [sp, #4]
 80a28a8:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a28ac:	2a00      	cmp	r2, #0
 80a28ae:	d103      	bne.n	80a28b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a28b0:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a28b4:	2900      	cmp	r1, #0
 80a28b6:	d1f7      	bne.n	80a28a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a28b8:	d1ef      	bne.n	80a289a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a28ba:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a28bc:	f3bf 8f5b 	dmb	ish
 80a28c0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a28c2:	f3bf 8f5b 	dmb	ish
 80a28c6:	1d2b      	adds	r3, r5, #4
 80a28c8:	e853 6f00 	ldrex	r6, [r3]
 80a28cc:	e843 4200 	strex	r2, r4, [r3]
 80a28d0:	2a00      	cmp	r2, #0
 80a28d2:	d1f9      	bne.n	80a28c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a28d4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a28d8:	2e00      	cmp	r6, #0
 80a28da:	d0de      	beq.n	80a289a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a28dc:	4620      	mov	r0, r4
 80a28de:	f7fe ffd7 	bl	80a1890 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a28e2:	4607      	mov	r7, r0
 80a28e4:	b160      	cbz	r0, 80a2900 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a28e6:	4630      	mov	r0, r6
 80a28e8:	f105 010c 	add.w	r1, r5, #12
 80a28ec:	f7ff fe16 	bl	80a251c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a28f0:	4630      	mov	r0, r6
 80a28f2:	f7fd fc36 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a28f6:	2110      	movs	r1, #16
 80a28f8:	4630      	mov	r0, r6
 80a28fa:	f000 fbfa 	bl	80a30f2 <_ZdlPvj>
 80a28fe:	e7cc      	b.n	80a289a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2900:	4631      	mov	r1, r6
 80a2902:	a803      	add	r0, sp, #12
 80a2904:	f7ff ff7c 	bl	80a2800 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2908:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a290a:	2010      	movs	r0, #16
 80a290c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2910:	f7fd fbc3 	bl	80a009a <_Znwj>
 80a2914:	4605      	mov	r5, r0
 80a2916:	b1d0      	cbz	r0, 80a294e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a2918:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a291a:	2014      	movs	r0, #20
 80a291c:	f7fd fbbd 	bl	80a009a <_Znwj>
 80a2920:	4604      	mov	r4, r0
 80a2922:	b178      	cbz	r0, 80a2944 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a2924:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2926:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2928:	a803      	add	r0, sp, #12
 80a292a:	f7ff fcbe 	bl	80a22aa <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a292e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a2930:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2932:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2934:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a2936:	9205      	str	r2, [sp, #20]
 80a2938:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a293a:	60e3      	str	r3, [r4, #12]
 80a293c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2940:	9206      	str	r2, [sp, #24]
 80a2942:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2944:	4b06      	ldr	r3, [pc, #24]	; (80a2960 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2946:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a2948:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a294a:	4b06      	ldr	r3, [pc, #24]	; (80a2964 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a294c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a294e:	a803      	add	r0, sp, #12
 80a2950:	f7fd fc07 	bl	80a0162 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2954:	2200      	movs	r2, #0
 80a2956:	4629      	mov	r1, r5
 80a2958:	4803      	ldr	r0, [pc, #12]	; (80a2968 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a295a:	f7fe ffa1 	bl	80a18a0 <application_thread_invoke>
 80a295e:	e7c7      	b.n	80a28f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a2960:	080a252f 	.word	0x080a252f
 80a2964:	080a281f 	.word	0x080a281f
 80a2968:	080a2d25 	.word	0x080a2d25

080a296c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a296c:	4770      	bx	lr

080a296e <_ZN9IPAddressD0Ev>:
 80a296e:	b510      	push	{r4, lr}
 80a2970:	4604      	mov	r4, r0
 80a2972:	2118      	movs	r1, #24
 80a2974:	f000 fbbd 	bl	80a30f2 <_ZdlPvj>
 80a2978:	4620      	mov	r0, r4
 80a297a:	bd10      	pop	{r4, pc}

080a297c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a297e:	460e      	mov	r6, r1
 80a2980:	2400      	movs	r4, #0
 80a2982:	f100 0708 	add.w	r7, r0, #8
 80a2986:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a2988:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a298c:	220a      	movs	r2, #10
 80a298e:	4630      	mov	r0, r6
 80a2990:	f7ff fbf6 	bl	80a2180 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2994:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2996:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a2998:	d101      	bne.n	80a299e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a299a:	4620      	mov	r0, r4
 80a299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a299e:	2c00      	cmp	r4, #0
 80a29a0:	d0f2      	beq.n	80a2988 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a29a2:	212e      	movs	r1, #46	; 0x2e
 80a29a4:	4630      	mov	r0, r6
 80a29a6:	f7ff fbd2 	bl	80a214e <_ZN5Print5printEc>
 80a29aa:	4404      	add	r4, r0
 80a29ac:	e7ec      	b.n	80a2988 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a29b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a29b0:	b510      	push	{r4, lr}
 80a29b2:	4604      	mov	r4, r0
 80a29b4:	4b04      	ldr	r3, [pc, #16]	; (80a29c8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a29b6:	2211      	movs	r2, #17
 80a29b8:	2100      	movs	r1, #0
 80a29ba:	f840 3b04 	str.w	r3, [r0], #4
 80a29be:	f001 f939 	bl	80a3c34 <memset>
}
 80a29c2:	4620      	mov	r0, r4
 80a29c4:	bd10      	pop	{r4, pc}
 80a29c6:	bf00      	nop
 80a29c8:	080a4144 	.word	0x080a4144

080a29cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a29cc:	4603      	mov	r3, r0
 80a29ce:	4a07      	ldr	r2, [pc, #28]	; (80a29ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a29d0:	b510      	push	{r4, lr}
 80a29d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a29d6:	f101 0210 	add.w	r2, r1, #16
 80a29da:	f851 4b04 	ldr.w	r4, [r1], #4
 80a29de:	4291      	cmp	r1, r2
 80a29e0:	f843 4b04 	str.w	r4, [r3], #4
 80a29e4:	d1f9      	bne.n	80a29da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a29e6:	780a      	ldrb	r2, [r1, #0]
 80a29e8:	701a      	strb	r2, [r3, #0]
}
 80a29ea:	bd10      	pop	{r4, pc}
 80a29ec:	080a4144 	.word	0x080a4144

080a29f0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a29f0:	4a02      	ldr	r2, [pc, #8]	; (80a29fc <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a29f2:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a29f6:	2204      	movs	r2, #4
 80a29f8:	7502      	strb	r2, [r0, #20]
}
 80a29fa:	4770      	bx	lr
 80a29fc:	080a4144 	.word	0x080a4144

080a2a00 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2a00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2a02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2a06:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a2a0a:	2304      	movs	r3, #4
 80a2a0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2a10:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2a14:	6044      	str	r4, [r0, #4]
 80a2a16:	7503      	strb	r3, [r0, #20]
}
 80a2a18:	bd10      	pop	{r4, pc}
	...

080a2a1c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2a1e:	4d04      	ldr	r5, [pc, #16]	; (80a2a30 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2a20:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2a22:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2a26:	9500      	str	r5, [sp, #0]
 80a2a28:	f7ff ffea 	bl	80a2a00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2a2c:	b003      	add	sp, #12
 80a2a2e:	bd30      	pop	{r4, r5, pc}
 80a2a30:	080a4144 	.word	0x080a4144

080a2a34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a34:	7441      	strb	r1, [r0, #17]
}
 80a2a36:	4770      	bx	lr

080a2a38 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2a38:	4770      	bx	lr

080a2a3a <_ZN9USBSerial4readEv>:
{
 80a2a3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2a3c:	2100      	movs	r1, #0
 80a2a3e:	7c00      	ldrb	r0, [r0, #16]
 80a2a40:	f7fe fede 	bl	80a1800 <HAL_USB_USART_Receive_Data>
}
 80a2a44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2a48:	bd08      	pop	{r3, pc}

080a2a4a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a2a4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2a4c:	2101      	movs	r1, #1
 80a2a4e:	7c00      	ldrb	r0, [r0, #16]
 80a2a50:	f7fe fed6 	bl	80a1800 <HAL_USB_USART_Receive_Data>
}
 80a2a54:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2a58:	bd08      	pop	{r3, pc}

080a2a5a <_ZN9USBSerial17availableForWriteEv>:
{
 80a2a5a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2a5c:	7c00      	ldrb	r0, [r0, #16]
 80a2a5e:	f7fe fec7 	bl	80a17f0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2a62:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a66:	bd08      	pop	{r3, pc}

080a2a68 <_ZN9USBSerial9availableEv>:
{
 80a2a68:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2a6a:	7c00      	ldrb	r0, [r0, #16]
 80a2a6c:	f7fe feb8 	bl	80a17e0 <HAL_USB_USART_Available_Data>
}
 80a2a70:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a74:	bd08      	pop	{r3, pc}

080a2a76 <_ZN9USBSerial5writeEh>:
{
 80a2a76:	b538      	push	{r3, r4, r5, lr}
 80a2a78:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a7a:	7c00      	ldrb	r0, [r0, #16]
{
 80a2a7c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a7e:	f7fe feb7 	bl	80a17f0 <HAL_USB_USART_Available_Data_For_Write>
 80a2a82:	2800      	cmp	r0, #0
 80a2a84:	dc01      	bgt.n	80a2a8a <_ZN9USBSerial5writeEh+0x14>
 80a2a86:	7c60      	ldrb	r0, [r4, #17]
 80a2a88:	b128      	cbz	r0, 80a2a96 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2a8a:	4629      	mov	r1, r5
 80a2a8c:	7c20      	ldrb	r0, [r4, #16]
 80a2a8e:	f7fe febf 	bl	80a1810 <HAL_USB_USART_Send_Data>
 80a2a92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2a96:	bd38      	pop	{r3, r4, r5, pc}

080a2a98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2a98:	7c00      	ldrb	r0, [r0, #16]
 80a2a9a:	f7fe bec1 	b.w	80a1820 <HAL_USB_USART_Flush_Data>

080a2a9e <_ZN9USBSerialD0Ev>:
 80a2a9e:	b510      	push	{r4, lr}
 80a2aa0:	4604      	mov	r4, r0
 80a2aa2:	2114      	movs	r1, #20
 80a2aa4:	f000 fb25 	bl	80a30f2 <_ZdlPvj>
 80a2aa8:	4620      	mov	r0, r4
 80a2aaa:	bd10      	pop	{r4, pc}

080a2aac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2aac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2ab2:	4604      	mov	r4, r0
 80a2ab4:	4608      	mov	r0, r1
 80a2ab6:	2100      	movs	r1, #0
 80a2ab8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2abc:	4b04      	ldr	r3, [pc, #16]	; (80a2ad0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a2abe:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2ac0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2ac2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2ac4:	4611      	mov	r1, r2
  _blocking = true;
 80a2ac6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2ac8:	f7fe fe7a 	bl	80a17c0 <HAL_USB_USART_Init>
}
 80a2acc:	4620      	mov	r0, r4
 80a2ace:	bd10      	pop	{r4, pc}
 80a2ad0:	080a4158 	.word	0x080a4158

080a2ad4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2ad4:	2200      	movs	r2, #0
 80a2ad6:	7c00      	ldrb	r0, [r0, #16]
 80a2ad8:	f7fe be7a 	b.w	80a17d0 <HAL_USB_USART_Begin>

080a2adc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2adc:	b510      	push	{r4, lr}
 80a2ade:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2ae0:	2214      	movs	r2, #20
 80a2ae2:	2100      	movs	r1, #0
 80a2ae4:	f001 f8a6 	bl	80a3c34 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2ae8:	4620      	mov	r0, r4
 80a2aea:	bd10      	pop	{r4, pc}

080a2aec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2aec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2aee:	4d0f      	ldr	r5, [pc, #60]	; (80a2b2c <_Z16_fetch_usbserialv+0x40>)
{
 80a2af0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2af2:	a801      	add	r0, sp, #4
 80a2af4:	f7ff fff2 	bl	80a2adc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2af8:	7829      	ldrb	r1, [r5, #0]
 80a2afa:	f3bf 8f5b 	dmb	ish
 80a2afe:	f011 0401 	ands.w	r4, r1, #1
 80a2b02:	d110      	bne.n	80a2b26 <_Z16_fetch_usbserialv+0x3a>
 80a2b04:	4628      	mov	r0, r5
 80a2b06:	f7fd fad9 	bl	80a00bc <__cxa_guard_acquire>
 80a2b0a:	b160      	cbz	r0, 80a2b26 <_Z16_fetch_usbserialv+0x3a>
 80a2b0c:	4621      	mov	r1, r4
 80a2b0e:	aa01      	add	r2, sp, #4
 80a2b10:	4807      	ldr	r0, [pc, #28]	; (80a2b30 <_Z16_fetch_usbserialv+0x44>)
 80a2b12:	f7ff ffcb 	bl	80a2aac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b16:	4628      	mov	r0, r5
 80a2b18:	f7fd fad5 	bl	80a00c6 <__cxa_guard_release>
 80a2b1c:	4a05      	ldr	r2, [pc, #20]	; (80a2b34 <_Z16_fetch_usbserialv+0x48>)
 80a2b1e:	4906      	ldr	r1, [pc, #24]	; (80a2b38 <_Z16_fetch_usbserialv+0x4c>)
 80a2b20:	4803      	ldr	r0, [pc, #12]	; (80a2b30 <_Z16_fetch_usbserialv+0x44>)
 80a2b22:	f000 fae1 	bl	80a30e8 <__aeabi_atexit>
	return _usbserial;
}
 80a2b26:	4802      	ldr	r0, [pc, #8]	; (80a2b30 <_Z16_fetch_usbserialv+0x44>)
 80a2b28:	b007      	add	sp, #28
 80a2b2a:	bd30      	pop	{r4, r5, pc}
 80a2b2c:	20008148 	.word	0x20008148
 80a2b30:	20008150 	.word	0x20008150
 80a2b34:	20000078 	.word	0x20000078
 80a2b38:	080a2a39 	.word	0x080a2a39

080a2b3c <_Z23acquireUSBSerial1Bufferv>:
 80a2b3c:	b510      	push	{r4, lr}
 80a2b3e:	4604      	mov	r4, r0
 80a2b40:	2214      	movs	r2, #20
 80a2b42:	2100      	movs	r1, #0
 80a2b44:	f001 f876 	bl	80a3c34 <memset>
 80a2b48:	4620      	mov	r0, r4
 80a2b4a:	bd10      	pop	{r4, pc}

080a2b4c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2b4c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b4e:	4c0f      	ldr	r4, [pc, #60]	; (80a2b8c <_Z17_fetch_usbserial1v+0x40>)
{
 80a2b50:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2b52:	a801      	add	r0, sp, #4
 80a2b54:	f7ff fff2 	bl	80a2b3c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b58:	7823      	ldrb	r3, [r4, #0]
 80a2b5a:	f3bf 8f5b 	dmb	ish
 80a2b5e:	07db      	lsls	r3, r3, #31
 80a2b60:	d410      	bmi.n	80a2b84 <_Z17_fetch_usbserial1v+0x38>
 80a2b62:	4620      	mov	r0, r4
 80a2b64:	f7fd faaa 	bl	80a00bc <__cxa_guard_acquire>
 80a2b68:	b160      	cbz	r0, 80a2b84 <_Z17_fetch_usbserial1v+0x38>
 80a2b6a:	2101      	movs	r1, #1
 80a2b6c:	aa01      	add	r2, sp, #4
 80a2b6e:	4808      	ldr	r0, [pc, #32]	; (80a2b90 <_Z17_fetch_usbserial1v+0x44>)
 80a2b70:	f7ff ff9c 	bl	80a2aac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b74:	4620      	mov	r0, r4
 80a2b76:	f7fd faa6 	bl	80a00c6 <__cxa_guard_release>
 80a2b7a:	4a06      	ldr	r2, [pc, #24]	; (80a2b94 <_Z17_fetch_usbserial1v+0x48>)
 80a2b7c:	4906      	ldr	r1, [pc, #24]	; (80a2b98 <_Z17_fetch_usbserial1v+0x4c>)
 80a2b7e:	4804      	ldr	r0, [pc, #16]	; (80a2b90 <_Z17_fetch_usbserial1v+0x44>)
 80a2b80:	f000 fab2 	bl	80a30e8 <__aeabi_atexit>
  return _usbserial1;
}
 80a2b84:	4802      	ldr	r0, [pc, #8]	; (80a2b90 <_Z17_fetch_usbserial1v+0x44>)
 80a2b86:	b006      	add	sp, #24
 80a2b88:	bd10      	pop	{r4, pc}
 80a2b8a:	bf00      	nop
 80a2b8c:	2000814c 	.word	0x2000814c
 80a2b90:	20008164 	.word	0x20008164
 80a2b94:	20000078 	.word	0x20000078
 80a2b98:	080a2a39 	.word	0x080a2a39

080a2b9c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a2b9c:	4700      	bx	r0
	...

080a2ba0 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a2ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a2ba4:	2400      	movs	r4, #0
{
 80a2ba6:	461d      	mov	r5, r3
 80a2ba8:	460f      	mov	r7, r1
 80a2baa:	4690      	mov	r8, r2
 80a2bac:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a2bae:	f7fe fc9d 	bl	80a14ec <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a2bb2:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a2bb4:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a2bb6:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a2bba:	bfa8      	it	ge
 80a2bbc:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80a2bc0:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a2bc4:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a2bc8:	bfa4      	itt	ge
 80a2bca:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a2bcc:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2bd0:	463a      	mov	r2, r7
 80a2bd2:	4643      	mov	r3, r8
 80a2bd4:	4630      	mov	r0, r6
 80a2bd6:	4906      	ldr	r1, [pc, #24]	; (80a2bf0 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a2bd8:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a2bda:	bfa8      	it	ge
 80a2bdc:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2be0:	f7fe fc7c 	bl	80a14dc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a2be4:	fab0 f080 	clz	r0, r0
 80a2be8:	0940      	lsrs	r0, r0, #5
 80a2bea:	b004      	add	sp, #16
 80a2bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2bf0:	080a2b9d 	.word	0x080a2b9d

080a2bf4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2bf4:	4770      	bx	lr

080a2bf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2bf6:	7441      	strb	r1, [r0, #17]
}
 80a2bf8:	4770      	bx	lr

080a2bfa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a2bfa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a2bfc:	7c00      	ldrb	r0, [r0, #16]
 80a2bfe:	f7fe fd4d 	bl	80a169c <hal_usart_available_data_for_write>
}
 80a2c02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c06:	bd08      	pop	{r3, pc}

080a2c08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2c08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a2c0a:	7c00      	ldrb	r0, [r0, #16]
 80a2c0c:	f7fe fd1e 	bl	80a164c <hal_usart_available>
}
 80a2c10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2c14:	bd08      	pop	{r3, pc}

080a2c16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2c16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2c18:	7c00      	ldrb	r0, [r0, #16]
 80a2c1a:	f7fe fd27 	bl	80a166c <hal_usart_peek>
}
 80a2c1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c22:	bd08      	pop	{r3, pc}

080a2c24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2c24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2c26:	7c00      	ldrb	r0, [r0, #16]
 80a2c28:	f7fe fd18 	bl	80a165c <hal_usart_read>
}
 80a2c2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2c30:	bd08      	pop	{r3, pc}

080a2c32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a2c32:	7c00      	ldrb	r0, [r0, #16]
 80a2c34:	f7fe bd22 	b.w	80a167c <hal_usart_flush>

080a2c38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2c38:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c3a:	7c46      	ldrb	r6, [r0, #17]
{
 80a2c3c:	4604      	mov	r4, r0
 80a2c3e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c40:	b12e      	cbz	r6, 80a2c4e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a2c42:	4629      	mov	r1, r5
 80a2c44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a2c4a:	f7fe bcf7 	b.w	80a163c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a2c4e:	7c00      	ldrb	r0, [r0, #16]
 80a2c50:	f7fe fd24 	bl	80a169c <hal_usart_available_data_for_write>
 80a2c54:	2800      	cmp	r0, #0
 80a2c56:	dcf4      	bgt.n	80a2c42 <_ZN11USARTSerial5writeEh+0xa>
}
 80a2c58:	4630      	mov	r0, r6
 80a2c5a:	bd70      	pop	{r4, r5, r6, pc}

080a2c5c <_ZN11USARTSerialD0Ev>:
 80a2c5c:	b510      	push	{r4, lr}
 80a2c5e:	4604      	mov	r4, r0
 80a2c60:	2114      	movs	r1, #20
 80a2c62:	f000 fa46 	bl	80a30f2 <_ZdlPvj>
 80a2c66:	4620      	mov	r0, r4
 80a2c68:	bd10      	pop	{r4, pc}
	...

080a2c6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a2c6c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2c70:	b510      	push	{r4, lr}
 80a2c72:	4604      	mov	r4, r0
 80a2c74:	4608      	mov	r0, r1
 80a2c76:	4611      	mov	r1, r2
 80a2c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2c7c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a2c80:	4a04      	ldr	r2, [pc, #16]	; (80a2c94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a2c82:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a2c84:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a2c86:	2201      	movs	r2, #1
 80a2c88:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a2c8a:	461a      	mov	r2, r3
 80a2c8c:	f7fe fcce 	bl	80a162c <hal_usart_init>
}
 80a2c90:	4620      	mov	r0, r4
 80a2c92:	bd10      	pop	{r4, pc}
 80a2c94:	080a4188 	.word	0x080a4188

080a2c98 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a2c98:	2300      	movs	r3, #0
 80a2c9a:	7c00      	ldrb	r0, [r0, #16]
 80a2c9c:	f7fe bd06 	b.w	80a16ac <hal_usart_begin_config>

080a2ca0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2ca2:	4c1a      	ldr	r4, [pc, #104]	; (80a2d0c <_Z22__fetch_global_Serial1v+0x6c>)
 80a2ca4:	6826      	ldr	r6, [r4, #0]
 80a2ca6:	b94e      	cbnz	r6, 80a2cbc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a2ca8:	2084      	movs	r0, #132	; 0x84
 80a2caa:	f7fd f9f6 	bl	80a009a <_Znwj>
 80a2cae:	4605      	mov	r5, r0
 80a2cb0:	b118      	cbz	r0, 80a2cba <_Z22__fetch_global_Serial1v+0x1a>
 80a2cb2:	2284      	movs	r2, #132	; 0x84
 80a2cb4:	4631      	mov	r1, r6
 80a2cb6:	f000 ffbd 	bl	80a3c34 <memset>
 80a2cba:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2cbc:	4d14      	ldr	r5, [pc, #80]	; (80a2d10 <_Z22__fetch_global_Serial1v+0x70>)
 80a2cbe:	682f      	ldr	r7, [r5, #0]
 80a2cc0:	b94f      	cbnz	r7, 80a2cd6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a2cc2:	2084      	movs	r0, #132	; 0x84
 80a2cc4:	f7fd f9e9 	bl	80a009a <_Znwj>
 80a2cc8:	4606      	mov	r6, r0
 80a2cca:	b118      	cbz	r0, 80a2cd4 <_Z22__fetch_global_Serial1v+0x34>
 80a2ccc:	2284      	movs	r2, #132	; 0x84
 80a2cce:	4639      	mov	r1, r7
 80a2cd0:	f000 ffb0 	bl	80a3c34 <memset>
 80a2cd4:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2cd6:	4f0f      	ldr	r7, [pc, #60]	; (80a2d14 <_Z22__fetch_global_Serial1v+0x74>)
 80a2cd8:	7839      	ldrb	r1, [r7, #0]
 80a2cda:	f3bf 8f5b 	dmb	ish
 80a2cde:	f011 0601 	ands.w	r6, r1, #1
 80a2ce2:	d111      	bne.n	80a2d08 <_Z22__fetch_global_Serial1v+0x68>
 80a2ce4:	4638      	mov	r0, r7
 80a2ce6:	f7fd f9e9 	bl	80a00bc <__cxa_guard_acquire>
 80a2cea:	b168      	cbz	r0, 80a2d08 <_Z22__fetch_global_Serial1v+0x68>
 80a2cec:	4631      	mov	r1, r6
 80a2cee:	6822      	ldr	r2, [r4, #0]
 80a2cf0:	682b      	ldr	r3, [r5, #0]
 80a2cf2:	4809      	ldr	r0, [pc, #36]	; (80a2d18 <_Z22__fetch_global_Serial1v+0x78>)
 80a2cf4:	f7ff ffba 	bl	80a2c6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2cf8:	4638      	mov	r0, r7
 80a2cfa:	f7fd f9e4 	bl	80a00c6 <__cxa_guard_release>
 80a2cfe:	4a07      	ldr	r2, [pc, #28]	; (80a2d1c <_Z22__fetch_global_Serial1v+0x7c>)
 80a2d00:	4907      	ldr	r1, [pc, #28]	; (80a2d20 <_Z22__fetch_global_Serial1v+0x80>)
 80a2d02:	4805      	ldr	r0, [pc, #20]	; (80a2d18 <_Z22__fetch_global_Serial1v+0x78>)
 80a2d04:	f000 f9f0 	bl	80a30e8 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2d08:	4803      	ldr	r0, [pc, #12]	; (80a2d18 <_Z22__fetch_global_Serial1v+0x78>)
 80a2d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2d0c:	2000817c 	.word	0x2000817c
 80a2d10:	20008180 	.word	0x20008180
 80a2d14:	20008178 	.word	0x20008178
 80a2d18:	20008184 	.word	0x20008184
 80a2d1c:	20000078 	.word	0x20000078
 80a2d20:	080a2bf5 	.word	0x080a2bf5

080a2d24 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2d24:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2d26:	6883      	ldr	r3, [r0, #8]
 80a2d28:	4604      	mov	r4, r0
 80a2d2a:	b90b      	cbnz	r3, 80a2d30 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2d2c:	f000 f9e5 	bl	80a30fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2d30:	68c3      	ldr	r3, [r0, #12]
 80a2d32:	4798      	blx	r3
      if (_M_manager)
 80a2d34:	68a3      	ldr	r3, [r4, #8]
 80a2d36:	b11b      	cbz	r3, 80a2d40 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2d38:	2203      	movs	r2, #3
 80a2d3a:	4621      	mov	r1, r4
 80a2d3c:	4620      	mov	r0, r4
 80a2d3e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2d40:	4620      	mov	r0, r4
}
 80a2d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a2d46:	2110      	movs	r1, #16
 80a2d48:	f000 b9d3 	b.w	80a30f2 <_ZdlPvj>

080a2d4c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a2d4c:	4770      	bx	lr

080a2d4e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d50:	4606      	mov	r6, r0
 80a2d52:	4615      	mov	r5, r2
 80a2d54:	460c      	mov	r4, r1
 80a2d56:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2d58:	42bc      	cmp	r4, r7
 80a2d5a:	d006      	beq.n	80a2d6a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2d5c:	6833      	ldr	r3, [r6, #0]
 80a2d5e:	4630      	mov	r0, r6
 80a2d60:	689b      	ldr	r3, [r3, #8]
 80a2d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2d66:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a2d68:	e7f6      	b.n	80a2d58 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a2d6a:	4628      	mov	r0, r5
 80a2d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2d6e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a2d6e:	2200      	movs	r2, #0
 80a2d70:	7c00      	ldrb	r0, [r0, #16]
 80a2d72:	f7fe bca3 	b.w	80a16bc <hal_i2c_write>

080a2d76 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a2d76:	2100      	movs	r1, #0
 80a2d78:	7c00      	ldrb	r0, [r0, #16]
 80a2d7a:	f7fe bca7 	b.w	80a16cc <hal_i2c_available>

080a2d7e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a2d7e:	2100      	movs	r1, #0
 80a2d80:	7c00      	ldrb	r0, [r0, #16]
 80a2d82:	f7fe bcab 	b.w	80a16dc <hal_i2c_read>

080a2d86 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a2d86:	2100      	movs	r1, #0
 80a2d88:	7c00      	ldrb	r0, [r0, #16]
 80a2d8a:	f7fe bcaf 	b.w	80a16ec <hal_i2c_peek>

080a2d8e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a2d8e:	2100      	movs	r1, #0
 80a2d90:	7c00      	ldrb	r0, [r0, #16]
 80a2d92:	f7fe bcb3 	b.w	80a16fc <hal_i2c_flush>

080a2d96 <_ZN7TwoWireD0Ev>:
 80a2d96:	b510      	push	{r4, lr}
 80a2d98:	4604      	mov	r4, r0
 80a2d9a:	2114      	movs	r1, #20
 80a2d9c:	f000 f9a9 	bl	80a30f2 <_ZdlPvj>
 80a2da0:	4620      	mov	r0, r4
 80a2da2:	bd10      	pop	{r4, pc}

080a2da4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2da4:	b510      	push	{r4, lr}
 80a2da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2daa:	4604      	mov	r4, r0
 80a2dac:	4608      	mov	r0, r1
 80a2dae:	2100      	movs	r1, #0
 80a2db0:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a2db4:	4b03      	ldr	r3, [pc, #12]	; (80a2dc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a2db6:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2db8:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2dba:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2dbc:	f7fe fcae 	bl	80a171c <hal_i2c_init>
}
 80a2dc0:	4620      	mov	r0, r4
 80a2dc2:	bd10      	pop	{r4, pc}
 80a2dc4:	080a41b8 	.word	0x080a41b8

080a2dc8 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2dc8:	2200      	movs	r2, #0
 80a2dca:	6840      	ldr	r0, [r0, #4]
 80a2dcc:	4611      	mov	r1, r2
 80a2dce:	f7fe bda3 	b.w	80a1918 <network_ready>

080a2dd2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2dd4:	4615      	mov	r5, r2
 80a2dd6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2dd8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2dda:	460e      	mov	r6, r1
 80a2ddc:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2dde:	2100      	movs	r1, #0
 80a2de0:	a803      	add	r0, sp, #12
 80a2de2:	f000 ff27 	bl	80a3c34 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2de6:	4628      	mov	r0, r5
 80a2de8:	f000 ff73 	bl	80a3cd2 <strlen>
 80a2dec:	2700      	movs	r7, #0
 80a2dee:	b281      	uxth	r1, r0
 80a2df0:	6873      	ldr	r3, [r6, #4]
 80a2df2:	4628      	mov	r0, r5
 80a2df4:	9700      	str	r7, [sp, #0]
 80a2df6:	aa03      	add	r2, sp, #12
 80a2df8:	f7fe fd1a 	bl	80a1830 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2dfc:	b130      	cbz	r0, 80a2e0c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2dfe:	4639      	mov	r1, r7
 80a2e00:	4620      	mov	r0, r4
 80a2e02:	f7ff fdf5 	bl	80a29f0 <_ZN9IPAddressC1Em>
    }
 80a2e06:	4620      	mov	r0, r4
 80a2e08:	b009      	add	sp, #36	; 0x24
 80a2e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e0c:	4620      	mov	r0, r4
 80a2e0e:	a903      	add	r1, sp, #12
 80a2e10:	f7ff fddc 	bl	80a29cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a2e14:	e7f7      	b.n	80a2e06 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a2e16 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a2e16:	2200      	movs	r2, #0
 80a2e18:	6840      	ldr	r0, [r0, #4]
 80a2e1a:	4611      	mov	r1, r2
 80a2e1c:	f7fe bd9c 	b.w	80a1958 <network_listening>

080a2e20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2e20:	2200      	movs	r2, #0
 80a2e22:	6840      	ldr	r0, [r0, #4]
 80a2e24:	4611      	mov	r1, r2
 80a2e26:	f7fe bda7 	b.w	80a1978 <network_get_listen_timeout>

080a2e2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2e2a:	2200      	movs	r2, #0
 80a2e2c:	6840      	ldr	r0, [r0, #4]
 80a2e2e:	f7fe bd9b 	b.w	80a1968 <network_set_listen_timeout>

080a2e32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2e32:	2200      	movs	r2, #0
 80a2e34:	6840      	ldr	r0, [r0, #4]
 80a2e36:	f081 0101 	eor.w	r1, r1, #1
 80a2e3a:	f7fe bd85 	b.w	80a1948 <network_listen>

080a2e3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a2e3e:	2300      	movs	r3, #0
 80a2e40:	6840      	ldr	r0, [r0, #4]
 80a2e42:	461a      	mov	r2, r3
 80a2e44:	4619      	mov	r1, r3
 80a2e46:	f7fe bd77 	b.w	80a1938 <network_off>

080a2e4a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a2e4a:	2200      	movs	r2, #0
 80a2e4c:	6840      	ldr	r0, [r0, #4]
 80a2e4e:	4611      	mov	r1, r2
 80a2e50:	f7fe bd52 	b.w	80a18f8 <network_connecting>

080a2e54 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2e54:	2200      	movs	r2, #0
 80a2e56:	2102      	movs	r1, #2
 80a2e58:	6840      	ldr	r0, [r0, #4]
 80a2e5a:	f7fe bd55 	b.w	80a1908 <network_disconnect>

080a2e5e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a2e5e:	2300      	movs	r3, #0
 80a2e60:	6840      	ldr	r0, [r0, #4]
 80a2e62:	461a      	mov	r2, r3
 80a2e64:	f7fe bd40 	b.w	80a18e8 <network_connect>

080a2e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2e68:	2204      	movs	r2, #4
 80a2e6a:	4b02      	ldr	r3, [pc, #8]	; (80a2e74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2e6c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2e6e:	4a02      	ldr	r2, [pc, #8]	; (80a2e78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2e70:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a2e72:	4770      	bx	lr
 80a2e74:	20008198 	.word	0x20008198
 80a2e78:	080a41e0 	.word	0x080a41e0

080a2e7c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2e7c:	2300      	movs	r3, #0
 80a2e7e:	6840      	ldr	r0, [r0, #4]
 80a2e80:	461a      	mov	r2, r3
 80a2e82:	f7fe bd31 	b.w	80a18e8 <network_connect>

080a2e86 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2e86:	2200      	movs	r2, #0
 80a2e88:	2102      	movs	r1, #2
 80a2e8a:	6840      	ldr	r0, [r0, #4]
 80a2e8c:	f7fe bd3c 	b.w	80a1908 <network_disconnect>

080a2e90 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2e90:	2200      	movs	r2, #0
 80a2e92:	6840      	ldr	r0, [r0, #4]
 80a2e94:	4611      	mov	r1, r2
 80a2e96:	f7fe bd2f 	b.w	80a18f8 <network_connecting>

080a2e9a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2e9a:	2200      	movs	r2, #0
 80a2e9c:	6840      	ldr	r0, [r0, #4]
 80a2e9e:	4611      	mov	r1, r2
 80a2ea0:	f7fe bd3a 	b.w	80a1918 <network_ready>

080a2ea4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2ea4:	2300      	movs	r3, #0
 80a2ea6:	6840      	ldr	r0, [r0, #4]
 80a2ea8:	461a      	mov	r2, r3
 80a2eaa:	4619      	mov	r1, r3
 80a2eac:	f7fe bd3c 	b.w	80a1928 <network_on>

080a2eb0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2eb0:	2300      	movs	r3, #0
 80a2eb2:	6840      	ldr	r0, [r0, #4]
 80a2eb4:	461a      	mov	r2, r3
 80a2eb6:	4619      	mov	r1, r3
 80a2eb8:	f7fe bd3e 	b.w	80a1938 <network_off>

080a2ebc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2ebc:	2100      	movs	r1, #0
 80a2ebe:	6840      	ldr	r0, [r0, #4]
 80a2ec0:	f7fe bd62 	b.w	80a1988 <network_is_on>

080a2ec4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2ec4:	2100      	movs	r1, #0
 80a2ec6:	6840      	ldr	r0, [r0, #4]
 80a2ec8:	f7fe bd66 	b.w	80a1998 <network_is_off>

080a2ecc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2ecc:	2200      	movs	r2, #0
 80a2ece:	6840      	ldr	r0, [r0, #4]
 80a2ed0:	f081 0101 	eor.w	r1, r1, #1
 80a2ed4:	f7fe bd38 	b.w	80a1948 <network_listen>

080a2ed8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2ed8:	2200      	movs	r2, #0
 80a2eda:	6840      	ldr	r0, [r0, #4]
 80a2edc:	f7fe bd44 	b.w	80a1968 <network_set_listen_timeout>

080a2ee0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2ee0:	2200      	movs	r2, #0
 80a2ee2:	6840      	ldr	r0, [r0, #4]
 80a2ee4:	4611      	mov	r1, r2
 80a2ee6:	f7fe bd47 	b.w	80a1978 <network_get_listen_timeout>

080a2eea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2eea:	2200      	movs	r2, #0
 80a2eec:	6840      	ldr	r0, [r0, #4]
 80a2eee:	4611      	mov	r1, r2
 80a2ef0:	f7fe bd32 	b.w	80a1958 <network_listening>

080a2ef4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2ef4:	b570      	push	{r4, r5, r6, lr}
 80a2ef6:	4615      	mov	r5, r2
 80a2ef8:	b08e      	sub	sp, #56	; 0x38
 80a2efa:	4604      	mov	r4, r0
    IPAddress addr;
 80a2efc:	a808      	add	r0, sp, #32
 80a2efe:	f7ff fd57 	bl	80a29b0 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2f02:	2211      	movs	r2, #17
 80a2f04:	2100      	movs	r1, #0
 80a2f06:	a803      	add	r0, sp, #12
 80a2f08:	f000 fe94 	bl	80a3c34 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2f0c:	2600      	movs	r6, #0
 80a2f0e:	4628      	mov	r0, r5
 80a2f10:	f000 fedf 	bl	80a3cd2 <strlen>
 80a2f14:	4b0a      	ldr	r3, [pc, #40]	; (80a2f40 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2f16:	9600      	str	r6, [sp, #0]
 80a2f18:	b281      	uxth	r1, r0
 80a2f1a:	685b      	ldr	r3, [r3, #4]
 80a2f1c:	4628      	mov	r0, r5
 80a2f1e:	aa03      	add	r2, sp, #12
 80a2f20:	f7fe fc86 	bl	80a1830 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2f24:	b130      	cbz	r0, 80a2f34 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2f26:	4631      	mov	r1, r6
 80a2f28:	4620      	mov	r0, r4
 80a2f2a:	f7ff fd61 	bl	80a29f0 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2f2e:	4620      	mov	r0, r4
 80a2f30:	b00e      	add	sp, #56	; 0x38
 80a2f32:	bd70      	pop	{r4, r5, r6, pc}
 80a2f34:	4620      	mov	r0, r4
 80a2f36:	a903      	add	r1, sp, #12
 80a2f38:	f7ff fd48 	bl	80a29cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2f3c:	e7f7      	b.n	80a2f2e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2f3e:	bf00      	nop
 80a2f40:	20008198 	.word	0x20008198

080a2f44 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2f44:	4b02      	ldr	r3, [pc, #8]	; (80a2f50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2f46:	4a03      	ldr	r2, [pc, #12]	; (80a2f54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2f48:	601a      	str	r2, [r3, #0]
 80a2f4a:	2200      	movs	r2, #0
 80a2f4c:	605a      	str	r2, [r3, #4]

} // spark
 80a2f4e:	4770      	bx	lr
 80a2f50:	200081a0 	.word	0x200081a0
 80a2f54:	080a421c 	.word	0x080a421c

080a2f58 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2f58:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2f5a:	b570      	push	{r4, r5, r6, lr}
 80a2f5c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2f5e:	d901      	bls.n	80a2f64 <pinAvailable+0xc>
    return false;
 80a2f60:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2f62:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2f64:	f1a0 030d 	sub.w	r3, r0, #13
 80a2f68:	2b02      	cmp	r3, #2
 80a2f6a:	d90b      	bls.n	80a2f84 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2f6c:	2801      	cmp	r0, #1
 80a2f6e:	d826      	bhi.n	80a2fbe <pinAvailable+0x66>
 80a2f70:	f000 f892 	bl	80a3098 <_Z19__fetch_global_Wirev>
 80a2f74:	2100      	movs	r1, #0
 80a2f76:	7c00      	ldrb	r0, [r0, #16]
 80a2f78:	f7fe fbc8 	bl	80a170c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2f7c:	f080 0001 	eor.w	r0, r0, #1
 80a2f80:	b2c0      	uxtb	r0, r0
 80a2f82:	e7ee      	b.n	80a2f62 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2f84:	4e13      	ldr	r6, [pc, #76]	; (80a2fd4 <pinAvailable+0x7c>)
 80a2f86:	7831      	ldrb	r1, [r6, #0]
 80a2f88:	f3bf 8f5b 	dmb	ish
 80a2f8c:	f011 0501 	ands.w	r5, r1, #1
 80a2f90:	d10f      	bne.n	80a2fb2 <pinAvailable+0x5a>
 80a2f92:	4630      	mov	r0, r6
 80a2f94:	f7fd f892 	bl	80a00bc <__cxa_guard_acquire>
 80a2f98:	b158      	cbz	r0, 80a2fb2 <pinAvailable+0x5a>
 80a2f9a:	4629      	mov	r1, r5
 80a2f9c:	480e      	ldr	r0, [pc, #56]	; (80a2fd8 <pinAvailable+0x80>)
 80a2f9e:	f7fe fd5e 	bl	80a1a5e <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2fa2:	4630      	mov	r0, r6
 80a2fa4:	f7fd f88f 	bl	80a00c6 <__cxa_guard_release>
 80a2fa8:	4a0c      	ldr	r2, [pc, #48]	; (80a2fdc <pinAvailable+0x84>)
 80a2faa:	490d      	ldr	r1, [pc, #52]	; (80a2fe0 <pinAvailable+0x88>)
 80a2fac:	480a      	ldr	r0, [pc, #40]	; (80a2fd8 <pinAvailable+0x80>)
 80a2fae:	f000 f89b 	bl	80a30e8 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2fb2:	4b09      	ldr	r3, [pc, #36]	; (80a2fd8 <pinAvailable+0x80>)
 80a2fb4:	7818      	ldrb	r0, [r3, #0]
 80a2fb6:	f7fe fbf3 	bl	80a17a0 <hal_spi_is_enabled>
 80a2fba:	2800      	cmp	r0, #0
 80a2fbc:	d1d0      	bne.n	80a2f60 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2fbe:	3c12      	subs	r4, #18
 80a2fc0:	2c01      	cmp	r4, #1
 80a2fc2:	d805      	bhi.n	80a2fd0 <pinAvailable+0x78>
 80a2fc4:	f7ff fe6c 	bl	80a2ca0 <_Z22__fetch_global_Serial1v>
 80a2fc8:	7c00      	ldrb	r0, [r0, #16]
 80a2fca:	f7fe fb5f 	bl	80a168c <hal_usart_is_enabled>
 80a2fce:	e7d5      	b.n	80a2f7c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2fd0:	2001      	movs	r0, #1
 80a2fd2:	e7c6      	b.n	80a2f62 <pinAvailable+0xa>
 80a2fd4:	200080f0 	.word	0x200080f0
 80a2fd8:	200080f4 	.word	0x200080f4
 80a2fdc:	20000078 	.word	0x20000078
 80a2fe0:	080a0be9 	.word	0x080a0be9

080a2fe4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2fe4:	2817      	cmp	r0, #23
{
 80a2fe6:	b538      	push	{r3, r4, r5, lr}
 80a2fe8:	4604      	mov	r4, r0
 80a2fea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2fec:	d80a      	bhi.n	80a3004 <pinMode+0x20>
 80a2fee:	29ff      	cmp	r1, #255	; 0xff
 80a2ff0:	d008      	beq.n	80a3004 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2ff2:	f7ff ffb1 	bl	80a2f58 <pinAvailable>
 80a2ff6:	b128      	cbz	r0, 80a3004 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2ff8:	4629      	mov	r1, r5
 80a2ffa:	4620      	mov	r0, r4
}
 80a2ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a3000:	f7fe ba54 	b.w	80a14ac <HAL_Pin_Mode>
}
 80a3004:	bd38      	pop	{r3, r4, r5, pc}

080a3006 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3006:	b538      	push	{r3, r4, r5, lr}
 80a3008:	4604      	mov	r4, r0
 80a300a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a300c:	f7fe fa56 	bl	80a14bc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3010:	28ff      	cmp	r0, #255	; 0xff
 80a3012:	d010      	beq.n	80a3036 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a3014:	2806      	cmp	r0, #6
 80a3016:	d804      	bhi.n	80a3022 <digitalWrite+0x1c>
 80a3018:	234d      	movs	r3, #77	; 0x4d
 80a301a:	fa23 f000 	lsr.w	r0, r3, r0
 80a301e:	07c3      	lsls	r3, r0, #31
 80a3020:	d409      	bmi.n	80a3036 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3022:	4620      	mov	r0, r4
 80a3024:	f7ff ff98 	bl	80a2f58 <pinAvailable>
 80a3028:	b128      	cbz	r0, 80a3036 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a302a:	4629      	mov	r1, r5
 80a302c:	4620      	mov	r0, r4
}
 80a302e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a3032:	f7fe ba4b 	b.w	80a14cc <HAL_GPIO_Write>
}
 80a3036:	bd38      	pop	{r3, r4, r5, pc}

080a3038 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3038:	2300      	movs	r3, #0
 80a303a:	b513      	push	{r0, r1, r4, lr}
 80a303c:	4c07      	ldr	r4, [pc, #28]	; (80a305c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a303e:	461a      	mov	r2, r3
 80a3040:	4619      	mov	r1, r3
 80a3042:	4620      	mov	r0, r4
 80a3044:	9300      	str	r3, [sp, #0]
 80a3046:	f7ff fce9 	bl	80a2a1c <_ZN9IPAddressC1Ehhhh>
 80a304a:	4620      	mov	r0, r4
 80a304c:	4a04      	ldr	r2, [pc, #16]	; (80a3060 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a304e:	4905      	ldr	r1, [pc, #20]	; (80a3064 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3050:	b002      	add	sp, #8
 80a3052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3056:	f000 b847 	b.w	80a30e8 <__aeabi_atexit>
 80a305a:	bf00      	nop
 80a305c:	200081ac 	.word	0x200081ac
 80a3060:	20000078 	.word	0x20000078
 80a3064:	080a296d 	.word	0x080a296d

080a3068 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a3068:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a306a:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a306c:	2520      	movs	r5, #32
 80a306e:	8043      	strh	r3, [r0, #2]
 80a3070:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3072:	4e08      	ldr	r6, [pc, #32]	; (80a3094 <_Z17acquireWireBufferv+0x2c>)
{
 80a3074:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a3076:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3078:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a307a:	6085      	str	r5, [r0, #8]
 80a307c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a307e:	4628      	mov	r0, r5
 80a3080:	f000 f839 	bl	80a30f6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3084:	4631      	mov	r1, r6
	};
 80a3086:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a3088:	4628      	mov	r0, r5
 80a308a:	f000 f834 	bl	80a30f6 <_ZnajRKSt9nothrow_t>
	};
 80a308e:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a3090:	4620      	mov	r0, r4
 80a3092:	bd70      	pop	{r4, r5, r6, pc}
 80a3094:	080a4250 	.word	0x080a4250

080a3098 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a3098:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a309a:	4d0f      	ldr	r5, [pc, #60]	; (80a30d8 <_Z19__fetch_global_Wirev+0x40>)
{
 80a309c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a309e:	7829      	ldrb	r1, [r5, #0]
 80a30a0:	f3bf 8f5b 	dmb	ish
 80a30a4:	f011 0401 	ands.w	r4, r1, #1
 80a30a8:	d113      	bne.n	80a30d2 <_Z19__fetch_global_Wirev+0x3a>
 80a30aa:	4628      	mov	r0, r5
 80a30ac:	f7fd f806 	bl	80a00bc <__cxa_guard_acquire>
 80a30b0:	b178      	cbz	r0, 80a30d2 <_Z19__fetch_global_Wirev+0x3a>
 80a30b2:	a801      	add	r0, sp, #4
 80a30b4:	f7ff ffd8 	bl	80a3068 <_Z17acquireWireBufferv>
 80a30b8:	4621      	mov	r1, r4
 80a30ba:	aa01      	add	r2, sp, #4
 80a30bc:	4807      	ldr	r0, [pc, #28]	; (80a30dc <_Z19__fetch_global_Wirev+0x44>)
 80a30be:	f7ff fe71 	bl	80a2da4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a30c2:	4628      	mov	r0, r5
 80a30c4:	f7fc ffff 	bl	80a00c6 <__cxa_guard_release>
 80a30c8:	4a05      	ldr	r2, [pc, #20]	; (80a30e0 <_Z19__fetch_global_Wirev+0x48>)
 80a30ca:	4906      	ldr	r1, [pc, #24]	; (80a30e4 <_Z19__fetch_global_Wirev+0x4c>)
 80a30cc:	4803      	ldr	r0, [pc, #12]	; (80a30dc <_Z19__fetch_global_Wirev+0x44>)
 80a30ce:	f000 f80b 	bl	80a30e8 <__aeabi_atexit>
	return wire;
}
 80a30d2:	4802      	ldr	r0, [pc, #8]	; (80a30dc <_Z19__fetch_global_Wirev+0x44>)
 80a30d4:	b007      	add	sp, #28
 80a30d6:	bd30      	pop	{r4, r5, pc}
 80a30d8:	200081c4 	.word	0x200081c4
 80a30dc:	200081c8 	.word	0x200081c8
 80a30e0:	20000078 	.word	0x20000078
 80a30e4:	080a2d4d 	.word	0x080a2d4d

080a30e8 <__aeabi_atexit>:
 80a30e8:	460b      	mov	r3, r1
 80a30ea:	4601      	mov	r1, r0
 80a30ec:	4618      	mov	r0, r3
 80a30ee:	f000 bd6b 	b.w	80a3bc8 <__cxa_atexit>

080a30f2 <_ZdlPvj>:
 80a30f2:	f7fc bfd6 	b.w	80a00a2 <_ZdlPv>

080a30f6 <_ZnajRKSt9nothrow_t>:
 80a30f6:	f7fc bfd2 	b.w	80a009e <_Znaj>

080a30fa <_ZSt25__throw_bad_function_callv>:
 80a30fa:	b508      	push	{r3, lr}
 80a30fc:	f7fe fc94 	bl	80a1a28 <abort>

080a3100 <__aeabi_drsub>:
 80a3100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3104:	e002      	b.n	80a310c <__adddf3>
 80a3106:	bf00      	nop

080a3108 <__aeabi_dsub>:
 80a3108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a310c <__adddf3>:
 80a310c:	b530      	push	{r4, r5, lr}
 80a310e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3112:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3116:	ea94 0f05 	teq	r4, r5
 80a311a:	bf08      	it	eq
 80a311c:	ea90 0f02 	teqeq	r0, r2
 80a3120:	bf1f      	itttt	ne
 80a3122:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3126:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a312a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a312e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3132:	f000 80e2 	beq.w	80a32fa <__adddf3+0x1ee>
 80a3136:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a313a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a313e:	bfb8      	it	lt
 80a3140:	426d      	neglt	r5, r5
 80a3142:	dd0c      	ble.n	80a315e <__adddf3+0x52>
 80a3144:	442c      	add	r4, r5
 80a3146:	ea80 0202 	eor.w	r2, r0, r2
 80a314a:	ea81 0303 	eor.w	r3, r1, r3
 80a314e:	ea82 0000 	eor.w	r0, r2, r0
 80a3152:	ea83 0101 	eor.w	r1, r3, r1
 80a3156:	ea80 0202 	eor.w	r2, r0, r2
 80a315a:	ea81 0303 	eor.w	r3, r1, r3
 80a315e:	2d36      	cmp	r5, #54	; 0x36
 80a3160:	bf88      	it	hi
 80a3162:	bd30      	pophi	{r4, r5, pc}
 80a3164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3168:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a316c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3174:	d002      	beq.n	80a317c <__adddf3+0x70>
 80a3176:	4240      	negs	r0, r0
 80a3178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a317c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3180:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3188:	d002      	beq.n	80a3190 <__adddf3+0x84>
 80a318a:	4252      	negs	r2, r2
 80a318c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3190:	ea94 0f05 	teq	r4, r5
 80a3194:	f000 80a7 	beq.w	80a32e6 <__adddf3+0x1da>
 80a3198:	f1a4 0401 	sub.w	r4, r4, #1
 80a319c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a31a0:	db0d      	blt.n	80a31be <__adddf3+0xb2>
 80a31a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a31a6:	fa22 f205 	lsr.w	r2, r2, r5
 80a31aa:	1880      	adds	r0, r0, r2
 80a31ac:	f141 0100 	adc.w	r1, r1, #0
 80a31b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a31b4:	1880      	adds	r0, r0, r2
 80a31b6:	fa43 f305 	asr.w	r3, r3, r5
 80a31ba:	4159      	adcs	r1, r3
 80a31bc:	e00e      	b.n	80a31dc <__adddf3+0xd0>
 80a31be:	f1a5 0520 	sub.w	r5, r5, #32
 80a31c2:	f10e 0e20 	add.w	lr, lr, #32
 80a31c6:	2a01      	cmp	r2, #1
 80a31c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a31cc:	bf28      	it	cs
 80a31ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a31d2:	fa43 f305 	asr.w	r3, r3, r5
 80a31d6:	18c0      	adds	r0, r0, r3
 80a31d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a31dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a31e0:	d507      	bpl.n	80a31f2 <__adddf3+0xe6>
 80a31e2:	f04f 0e00 	mov.w	lr, #0
 80a31e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a31ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a31ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80a31f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a31f6:	d31b      	bcc.n	80a3230 <__adddf3+0x124>
 80a31f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a31fc:	d30c      	bcc.n	80a3218 <__adddf3+0x10c>
 80a31fe:	0849      	lsrs	r1, r1, #1
 80a3200:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3204:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3208:	f104 0401 	add.w	r4, r4, #1
 80a320c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3214:	f080 809a 	bcs.w	80a334c <__adddf3+0x240>
 80a3218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a321c:	bf08      	it	eq
 80a321e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3222:	f150 0000 	adcs.w	r0, r0, #0
 80a3226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a322a:	ea41 0105 	orr.w	r1, r1, r5
 80a322e:	bd30      	pop	{r4, r5, pc}
 80a3230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3234:	4140      	adcs	r0, r0
 80a3236:	eb41 0101 	adc.w	r1, r1, r1
 80a323a:	3c01      	subs	r4, #1
 80a323c:	bf28      	it	cs
 80a323e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a3242:	d2e9      	bcs.n	80a3218 <__adddf3+0x10c>
 80a3244:	f091 0f00 	teq	r1, #0
 80a3248:	bf04      	itt	eq
 80a324a:	4601      	moveq	r1, r0
 80a324c:	2000      	moveq	r0, #0
 80a324e:	fab1 f381 	clz	r3, r1
 80a3252:	bf08      	it	eq
 80a3254:	3320      	addeq	r3, #32
 80a3256:	f1a3 030b 	sub.w	r3, r3, #11
 80a325a:	f1b3 0220 	subs.w	r2, r3, #32
 80a325e:	da0c      	bge.n	80a327a <__adddf3+0x16e>
 80a3260:	320c      	adds	r2, #12
 80a3262:	dd08      	ble.n	80a3276 <__adddf3+0x16a>
 80a3264:	f102 0c14 	add.w	ip, r2, #20
 80a3268:	f1c2 020c 	rsb	r2, r2, #12
 80a326c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3270:	fa21 f102 	lsr.w	r1, r1, r2
 80a3274:	e00c      	b.n	80a3290 <__adddf3+0x184>
 80a3276:	f102 0214 	add.w	r2, r2, #20
 80a327a:	bfd8      	it	le
 80a327c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3280:	fa01 f102 	lsl.w	r1, r1, r2
 80a3284:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3288:	bfdc      	itt	le
 80a328a:	ea41 010c 	orrle.w	r1, r1, ip
 80a328e:	4090      	lslle	r0, r2
 80a3290:	1ae4      	subs	r4, r4, r3
 80a3292:	bfa2      	ittt	ge
 80a3294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3298:	4329      	orrge	r1, r5
 80a329a:	bd30      	popge	{r4, r5, pc}
 80a329c:	ea6f 0404 	mvn.w	r4, r4
 80a32a0:	3c1f      	subs	r4, #31
 80a32a2:	da1c      	bge.n	80a32de <__adddf3+0x1d2>
 80a32a4:	340c      	adds	r4, #12
 80a32a6:	dc0e      	bgt.n	80a32c6 <__adddf3+0x1ba>
 80a32a8:	f104 0414 	add.w	r4, r4, #20
 80a32ac:	f1c4 0220 	rsb	r2, r4, #32
 80a32b0:	fa20 f004 	lsr.w	r0, r0, r4
 80a32b4:	fa01 f302 	lsl.w	r3, r1, r2
 80a32b8:	ea40 0003 	orr.w	r0, r0, r3
 80a32bc:	fa21 f304 	lsr.w	r3, r1, r4
 80a32c0:	ea45 0103 	orr.w	r1, r5, r3
 80a32c4:	bd30      	pop	{r4, r5, pc}
 80a32c6:	f1c4 040c 	rsb	r4, r4, #12
 80a32ca:	f1c4 0220 	rsb	r2, r4, #32
 80a32ce:	fa20 f002 	lsr.w	r0, r0, r2
 80a32d2:	fa01 f304 	lsl.w	r3, r1, r4
 80a32d6:	ea40 0003 	orr.w	r0, r0, r3
 80a32da:	4629      	mov	r1, r5
 80a32dc:	bd30      	pop	{r4, r5, pc}
 80a32de:	fa21 f004 	lsr.w	r0, r1, r4
 80a32e2:	4629      	mov	r1, r5
 80a32e4:	bd30      	pop	{r4, r5, pc}
 80a32e6:	f094 0f00 	teq	r4, #0
 80a32ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a32ee:	bf06      	itte	eq
 80a32f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a32f4:	3401      	addeq	r4, #1
 80a32f6:	3d01      	subne	r5, #1
 80a32f8:	e74e      	b.n	80a3198 <__adddf3+0x8c>
 80a32fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a32fe:	bf18      	it	ne
 80a3300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3304:	d029      	beq.n	80a335a <__adddf3+0x24e>
 80a3306:	ea94 0f05 	teq	r4, r5
 80a330a:	bf08      	it	eq
 80a330c:	ea90 0f02 	teqeq	r0, r2
 80a3310:	d005      	beq.n	80a331e <__adddf3+0x212>
 80a3312:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3316:	bf04      	itt	eq
 80a3318:	4619      	moveq	r1, r3
 80a331a:	4610      	moveq	r0, r2
 80a331c:	bd30      	pop	{r4, r5, pc}
 80a331e:	ea91 0f03 	teq	r1, r3
 80a3322:	bf1e      	ittt	ne
 80a3324:	2100      	movne	r1, #0
 80a3326:	2000      	movne	r0, #0
 80a3328:	bd30      	popne	{r4, r5, pc}
 80a332a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a332e:	d105      	bne.n	80a333c <__adddf3+0x230>
 80a3330:	0040      	lsls	r0, r0, #1
 80a3332:	4149      	adcs	r1, r1
 80a3334:	bf28      	it	cs
 80a3336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a333a:	bd30      	pop	{r4, r5, pc}
 80a333c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3340:	bf3c      	itt	cc
 80a3342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3346:	bd30      	popcc	{r4, r5, pc}
 80a3348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a334c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3354:	f04f 0000 	mov.w	r0, #0
 80a3358:	bd30      	pop	{r4, r5, pc}
 80a335a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a335e:	bf1a      	itte	ne
 80a3360:	4619      	movne	r1, r3
 80a3362:	4610      	movne	r0, r2
 80a3364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3368:	bf1c      	itt	ne
 80a336a:	460b      	movne	r3, r1
 80a336c:	4602      	movne	r2, r0
 80a336e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3372:	bf06      	itte	eq
 80a3374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3378:	ea91 0f03 	teqeq	r1, r3
 80a337c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3380:	bd30      	pop	{r4, r5, pc}
 80a3382:	bf00      	nop

080a3384 <__aeabi_ui2d>:
 80a3384:	f090 0f00 	teq	r0, #0
 80a3388:	bf04      	itt	eq
 80a338a:	2100      	moveq	r1, #0
 80a338c:	4770      	bxeq	lr
 80a338e:	b530      	push	{r4, r5, lr}
 80a3390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3398:	f04f 0500 	mov.w	r5, #0
 80a339c:	f04f 0100 	mov.w	r1, #0
 80a33a0:	e750      	b.n	80a3244 <__adddf3+0x138>
 80a33a2:	bf00      	nop

080a33a4 <__aeabi_i2d>:
 80a33a4:	f090 0f00 	teq	r0, #0
 80a33a8:	bf04      	itt	eq
 80a33aa:	2100      	moveq	r1, #0
 80a33ac:	4770      	bxeq	lr
 80a33ae:	b530      	push	{r4, r5, lr}
 80a33b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a33b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a33b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a33bc:	bf48      	it	mi
 80a33be:	4240      	negmi	r0, r0
 80a33c0:	f04f 0100 	mov.w	r1, #0
 80a33c4:	e73e      	b.n	80a3244 <__adddf3+0x138>
 80a33c6:	bf00      	nop

080a33c8 <__aeabi_f2d>:
 80a33c8:	0042      	lsls	r2, r0, #1
 80a33ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a33ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80a33d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a33d6:	bf1f      	itttt	ne
 80a33d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a33dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a33e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a33e4:	4770      	bxne	lr
 80a33e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a33ea:	bf08      	it	eq
 80a33ec:	4770      	bxeq	lr
 80a33ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a33f2:	bf04      	itt	eq
 80a33f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a33f8:	4770      	bxeq	lr
 80a33fa:	b530      	push	{r4, r5, lr}
 80a33fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3408:	e71c      	b.n	80a3244 <__adddf3+0x138>
 80a340a:	bf00      	nop

080a340c <__aeabi_ul2d>:
 80a340c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3410:	bf08      	it	eq
 80a3412:	4770      	bxeq	lr
 80a3414:	b530      	push	{r4, r5, lr}
 80a3416:	f04f 0500 	mov.w	r5, #0
 80a341a:	e00a      	b.n	80a3432 <__aeabi_l2d+0x16>

080a341c <__aeabi_l2d>:
 80a341c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3420:	bf08      	it	eq
 80a3422:	4770      	bxeq	lr
 80a3424:	b530      	push	{r4, r5, lr}
 80a3426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a342a:	d502      	bpl.n	80a3432 <__aeabi_l2d+0x16>
 80a342c:	4240      	negs	r0, r0
 80a342e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3432:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3436:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a343a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a343e:	f43f aed8 	beq.w	80a31f2 <__adddf3+0xe6>
 80a3442:	f04f 0203 	mov.w	r2, #3
 80a3446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a344a:	bf18      	it	ne
 80a344c:	3203      	addne	r2, #3
 80a344e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3452:	bf18      	it	ne
 80a3454:	3203      	addne	r2, #3
 80a3456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a345a:	f1c2 0320 	rsb	r3, r2, #32
 80a345e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3462:	fa20 f002 	lsr.w	r0, r0, r2
 80a3466:	fa01 fe03 	lsl.w	lr, r1, r3
 80a346a:	ea40 000e 	orr.w	r0, r0, lr
 80a346e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3472:	4414      	add	r4, r2
 80a3474:	e6bd      	b.n	80a31f2 <__adddf3+0xe6>
 80a3476:	bf00      	nop

080a3478 <__aeabi_dmul>:
 80a3478:	b570      	push	{r4, r5, r6, lr}
 80a347a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a347e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3486:	bf1d      	ittte	ne
 80a3488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a348c:	ea94 0f0c 	teqne	r4, ip
 80a3490:	ea95 0f0c 	teqne	r5, ip
 80a3494:	f000 f8de 	bleq	80a3654 <__aeabi_dmul+0x1dc>
 80a3498:	442c      	add	r4, r5
 80a349a:	ea81 0603 	eor.w	r6, r1, r3
 80a349e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a34a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a34a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a34aa:	bf18      	it	ne
 80a34ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a34b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a34b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a34b8:	d038      	beq.n	80a352c <__aeabi_dmul+0xb4>
 80a34ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80a34be:	f04f 0500 	mov.w	r5, #0
 80a34c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a34c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a34ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a34ce:	f04f 0600 	mov.w	r6, #0
 80a34d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a34d6:	f09c 0f00 	teq	ip, #0
 80a34da:	bf18      	it	ne
 80a34dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a34e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a34e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a34e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a34ec:	d204      	bcs.n	80a34f8 <__aeabi_dmul+0x80>
 80a34ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a34f2:	416d      	adcs	r5, r5
 80a34f4:	eb46 0606 	adc.w	r6, r6, r6
 80a34f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a34fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a350c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3510:	bf88      	it	hi
 80a3512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3516:	d81e      	bhi.n	80a3556 <__aeabi_dmul+0xde>
 80a3518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a351c:	bf08      	it	eq
 80a351e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3522:	f150 0000 	adcs.w	r0, r0, #0
 80a3526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a352a:	bd70      	pop	{r4, r5, r6, pc}
 80a352c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3530:	ea46 0101 	orr.w	r1, r6, r1
 80a3534:	ea40 0002 	orr.w	r0, r0, r2
 80a3538:	ea81 0103 	eor.w	r1, r1, r3
 80a353c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3540:	bfc2      	ittt	gt
 80a3542:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a354a:	bd70      	popgt	{r4, r5, r6, pc}
 80a354c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3550:	f04f 0e00 	mov.w	lr, #0
 80a3554:	3c01      	subs	r4, #1
 80a3556:	f300 80ab 	bgt.w	80a36b0 <__aeabi_dmul+0x238>
 80a355a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a355e:	bfde      	ittt	le
 80a3560:	2000      	movle	r0, #0
 80a3562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3566:	bd70      	pople	{r4, r5, r6, pc}
 80a3568:	f1c4 0400 	rsb	r4, r4, #0
 80a356c:	3c20      	subs	r4, #32
 80a356e:	da35      	bge.n	80a35dc <__aeabi_dmul+0x164>
 80a3570:	340c      	adds	r4, #12
 80a3572:	dc1b      	bgt.n	80a35ac <__aeabi_dmul+0x134>
 80a3574:	f104 0414 	add.w	r4, r4, #20
 80a3578:	f1c4 0520 	rsb	r5, r4, #32
 80a357c:	fa00 f305 	lsl.w	r3, r0, r5
 80a3580:	fa20 f004 	lsr.w	r0, r0, r4
 80a3584:	fa01 f205 	lsl.w	r2, r1, r5
 80a3588:	ea40 0002 	orr.w	r0, r0, r2
 80a358c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3598:	fa21 f604 	lsr.w	r6, r1, r4
 80a359c:	eb42 0106 	adc.w	r1, r2, r6
 80a35a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a35a4:	bf08      	it	eq
 80a35a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a35aa:	bd70      	pop	{r4, r5, r6, pc}
 80a35ac:	f1c4 040c 	rsb	r4, r4, #12
 80a35b0:	f1c4 0520 	rsb	r5, r4, #32
 80a35b4:	fa00 f304 	lsl.w	r3, r0, r4
 80a35b8:	fa20 f005 	lsr.w	r0, r0, r5
 80a35bc:	fa01 f204 	lsl.w	r2, r1, r4
 80a35c0:	ea40 0002 	orr.w	r0, r0, r2
 80a35c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a35c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a35cc:	f141 0100 	adc.w	r1, r1, #0
 80a35d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a35d4:	bf08      	it	eq
 80a35d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a35da:	bd70      	pop	{r4, r5, r6, pc}
 80a35dc:	f1c4 0520 	rsb	r5, r4, #32
 80a35e0:	fa00 f205 	lsl.w	r2, r0, r5
 80a35e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a35e8:	fa20 f304 	lsr.w	r3, r0, r4
 80a35ec:	fa01 f205 	lsl.w	r2, r1, r5
 80a35f0:	ea43 0302 	orr.w	r3, r3, r2
 80a35f4:	fa21 f004 	lsr.w	r0, r1, r4
 80a35f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a35fc:	fa21 f204 	lsr.w	r2, r1, r4
 80a3600:	ea20 0002 	bic.w	r0, r0, r2
 80a3604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a360c:	bf08      	it	eq
 80a360e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3612:	bd70      	pop	{r4, r5, r6, pc}
 80a3614:	f094 0f00 	teq	r4, #0
 80a3618:	d10f      	bne.n	80a363a <__aeabi_dmul+0x1c2>
 80a361a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a361e:	0040      	lsls	r0, r0, #1
 80a3620:	eb41 0101 	adc.w	r1, r1, r1
 80a3624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3628:	bf08      	it	eq
 80a362a:	3c01      	subeq	r4, #1
 80a362c:	d0f7      	beq.n	80a361e <__aeabi_dmul+0x1a6>
 80a362e:	ea41 0106 	orr.w	r1, r1, r6
 80a3632:	f095 0f00 	teq	r5, #0
 80a3636:	bf18      	it	ne
 80a3638:	4770      	bxne	lr
 80a363a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a363e:	0052      	lsls	r2, r2, #1
 80a3640:	eb43 0303 	adc.w	r3, r3, r3
 80a3644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3648:	bf08      	it	eq
 80a364a:	3d01      	subeq	r5, #1
 80a364c:	d0f7      	beq.n	80a363e <__aeabi_dmul+0x1c6>
 80a364e:	ea43 0306 	orr.w	r3, r3, r6
 80a3652:	4770      	bx	lr
 80a3654:	ea94 0f0c 	teq	r4, ip
 80a3658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a365c:	bf18      	it	ne
 80a365e:	ea95 0f0c 	teqne	r5, ip
 80a3662:	d00c      	beq.n	80a367e <__aeabi_dmul+0x206>
 80a3664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3668:	bf18      	it	ne
 80a366a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a366e:	d1d1      	bne.n	80a3614 <__aeabi_dmul+0x19c>
 80a3670:	ea81 0103 	eor.w	r1, r1, r3
 80a3674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3678:	f04f 0000 	mov.w	r0, #0
 80a367c:	bd70      	pop	{r4, r5, r6, pc}
 80a367e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3682:	bf06      	itte	eq
 80a3684:	4610      	moveq	r0, r2
 80a3686:	4619      	moveq	r1, r3
 80a3688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a368c:	d019      	beq.n	80a36c2 <__aeabi_dmul+0x24a>
 80a368e:	ea94 0f0c 	teq	r4, ip
 80a3692:	d102      	bne.n	80a369a <__aeabi_dmul+0x222>
 80a3694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3698:	d113      	bne.n	80a36c2 <__aeabi_dmul+0x24a>
 80a369a:	ea95 0f0c 	teq	r5, ip
 80a369e:	d105      	bne.n	80a36ac <__aeabi_dmul+0x234>
 80a36a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a36a4:	bf1c      	itt	ne
 80a36a6:	4610      	movne	r0, r2
 80a36a8:	4619      	movne	r1, r3
 80a36aa:	d10a      	bne.n	80a36c2 <__aeabi_dmul+0x24a>
 80a36ac:	ea81 0103 	eor.w	r1, r1, r3
 80a36b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a36b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a36b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a36bc:	f04f 0000 	mov.w	r0, #0
 80a36c0:	bd70      	pop	{r4, r5, r6, pc}
 80a36c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a36c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a36ca:	bd70      	pop	{r4, r5, r6, pc}

080a36cc <__aeabi_ddiv>:
 80a36cc:	b570      	push	{r4, r5, r6, lr}
 80a36ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a36d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a36d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a36da:	bf1d      	ittte	ne
 80a36dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a36e0:	ea94 0f0c 	teqne	r4, ip
 80a36e4:	ea95 0f0c 	teqne	r5, ip
 80a36e8:	f000 f8a7 	bleq	80a383a <__aeabi_ddiv+0x16e>
 80a36ec:	eba4 0405 	sub.w	r4, r4, r5
 80a36f0:	ea81 0e03 	eor.w	lr, r1, r3
 80a36f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a36f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a36fc:	f000 8088 	beq.w	80a3810 <__aeabi_ddiv+0x144>
 80a3700:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a370c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3710:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a371c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3724:	429d      	cmp	r5, r3
 80a3726:	bf08      	it	eq
 80a3728:	4296      	cmpeq	r6, r2
 80a372a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a372e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3732:	d202      	bcs.n	80a373a <__aeabi_ddiv+0x6e>
 80a3734:	085b      	lsrs	r3, r3, #1
 80a3736:	ea4f 0232 	mov.w	r2, r2, rrx
 80a373a:	1ab6      	subs	r6, r6, r2
 80a373c:	eb65 0503 	sbc.w	r5, r5, r3
 80a3740:	085b      	lsrs	r3, r3, #1
 80a3742:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a374a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a374e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3752:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3756:	bf22      	ittt	cs
 80a3758:	1ab6      	subcs	r6, r6, r2
 80a375a:	4675      	movcs	r5, lr
 80a375c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3760:	085b      	lsrs	r3, r3, #1
 80a3762:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3766:	ebb6 0e02 	subs.w	lr, r6, r2
 80a376a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a376e:	bf22      	ittt	cs
 80a3770:	1ab6      	subcs	r6, r6, r2
 80a3772:	4675      	movcs	r5, lr
 80a3774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3778:	085b      	lsrs	r3, r3, #1
 80a377a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a377e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3782:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3786:	bf22      	ittt	cs
 80a3788:	1ab6      	subcs	r6, r6, r2
 80a378a:	4675      	movcs	r5, lr
 80a378c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3790:	085b      	lsrs	r3, r3, #1
 80a3792:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3796:	ebb6 0e02 	subs.w	lr, r6, r2
 80a379a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a379e:	bf22      	ittt	cs
 80a37a0:	1ab6      	subcs	r6, r6, r2
 80a37a2:	4675      	movcs	r5, lr
 80a37a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a37a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a37ac:	d018      	beq.n	80a37e0 <__aeabi_ddiv+0x114>
 80a37ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a37b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a37b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a37ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a37be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a37c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a37c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a37ca:	d1c0      	bne.n	80a374e <__aeabi_ddiv+0x82>
 80a37cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a37d0:	d10b      	bne.n	80a37ea <__aeabi_ddiv+0x11e>
 80a37d2:	ea41 0100 	orr.w	r1, r1, r0
 80a37d6:	f04f 0000 	mov.w	r0, #0
 80a37da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a37de:	e7b6      	b.n	80a374e <__aeabi_ddiv+0x82>
 80a37e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a37e4:	bf04      	itt	eq
 80a37e6:	4301      	orreq	r1, r0
 80a37e8:	2000      	moveq	r0, #0
 80a37ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a37ee:	bf88      	it	hi
 80a37f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a37f4:	f63f aeaf 	bhi.w	80a3556 <__aeabi_dmul+0xde>
 80a37f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a37fc:	bf04      	itt	eq
 80a37fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3806:	f150 0000 	adcs.w	r0, r0, #0
 80a380a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a380e:	bd70      	pop	{r4, r5, r6, pc}
 80a3810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a381c:	bfc2      	ittt	gt
 80a381e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3826:	bd70      	popgt	{r4, r5, r6, pc}
 80a3828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a382c:	f04f 0e00 	mov.w	lr, #0
 80a3830:	3c01      	subs	r4, #1
 80a3832:	e690      	b.n	80a3556 <__aeabi_dmul+0xde>
 80a3834:	ea45 0e06 	orr.w	lr, r5, r6
 80a3838:	e68d      	b.n	80a3556 <__aeabi_dmul+0xde>
 80a383a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a383e:	ea94 0f0c 	teq	r4, ip
 80a3842:	bf08      	it	eq
 80a3844:	ea95 0f0c 	teqeq	r5, ip
 80a3848:	f43f af3b 	beq.w	80a36c2 <__aeabi_dmul+0x24a>
 80a384c:	ea94 0f0c 	teq	r4, ip
 80a3850:	d10a      	bne.n	80a3868 <__aeabi_ddiv+0x19c>
 80a3852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3856:	f47f af34 	bne.w	80a36c2 <__aeabi_dmul+0x24a>
 80a385a:	ea95 0f0c 	teq	r5, ip
 80a385e:	f47f af25 	bne.w	80a36ac <__aeabi_dmul+0x234>
 80a3862:	4610      	mov	r0, r2
 80a3864:	4619      	mov	r1, r3
 80a3866:	e72c      	b.n	80a36c2 <__aeabi_dmul+0x24a>
 80a3868:	ea95 0f0c 	teq	r5, ip
 80a386c:	d106      	bne.n	80a387c <__aeabi_ddiv+0x1b0>
 80a386e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3872:	f43f aefd 	beq.w	80a3670 <__aeabi_dmul+0x1f8>
 80a3876:	4610      	mov	r0, r2
 80a3878:	4619      	mov	r1, r3
 80a387a:	e722      	b.n	80a36c2 <__aeabi_dmul+0x24a>
 80a387c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3880:	bf18      	it	ne
 80a3882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3886:	f47f aec5 	bne.w	80a3614 <__aeabi_dmul+0x19c>
 80a388a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a388e:	f47f af0d 	bne.w	80a36ac <__aeabi_dmul+0x234>
 80a3892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3896:	f47f aeeb 	bne.w	80a3670 <__aeabi_dmul+0x1f8>
 80a389a:	e712      	b.n	80a36c2 <__aeabi_dmul+0x24a>

080a389c <__aeabi_d2uiz>:
 80a389c:	004a      	lsls	r2, r1, #1
 80a389e:	d211      	bcs.n	80a38c4 <__aeabi_d2uiz+0x28>
 80a38a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a38a4:	d211      	bcs.n	80a38ca <__aeabi_d2uiz+0x2e>
 80a38a6:	d50d      	bpl.n	80a38c4 <__aeabi_d2uiz+0x28>
 80a38a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a38ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a38b0:	d40e      	bmi.n	80a38d0 <__aeabi_d2uiz+0x34>
 80a38b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a38b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a38ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a38be:	fa23 f002 	lsr.w	r0, r3, r2
 80a38c2:	4770      	bx	lr
 80a38c4:	f04f 0000 	mov.w	r0, #0
 80a38c8:	4770      	bx	lr
 80a38ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a38ce:	d102      	bne.n	80a38d6 <__aeabi_d2uiz+0x3a>
 80a38d0:	f04f 30ff 	mov.w	r0, #4294967295
 80a38d4:	4770      	bx	lr
 80a38d6:	f04f 0000 	mov.w	r0, #0
 80a38da:	4770      	bx	lr

080a38dc <__aeabi_fmul>:
 80a38dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a38e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a38e4:	bf1e      	ittt	ne
 80a38e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a38ea:	ea92 0f0c 	teqne	r2, ip
 80a38ee:	ea93 0f0c 	teqne	r3, ip
 80a38f2:	d06f      	beq.n	80a39d4 <__aeabi_fmul+0xf8>
 80a38f4:	441a      	add	r2, r3
 80a38f6:	ea80 0c01 	eor.w	ip, r0, r1
 80a38fa:	0240      	lsls	r0, r0, #9
 80a38fc:	bf18      	it	ne
 80a38fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3902:	d01e      	beq.n	80a3942 <__aeabi_fmul+0x66>
 80a3904:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3908:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a390c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3910:	fba0 3101 	umull	r3, r1, r0, r1
 80a3914:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3918:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a391c:	bf3e      	ittt	cc
 80a391e:	0049      	lslcc	r1, r1, #1
 80a3920:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3924:	005b      	lslcc	r3, r3, #1
 80a3926:	ea40 0001 	orr.w	r0, r0, r1
 80a392a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a392e:	2afd      	cmp	r2, #253	; 0xfd
 80a3930:	d81d      	bhi.n	80a396e <__aeabi_fmul+0x92>
 80a3932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3936:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a393a:	bf08      	it	eq
 80a393c:	f020 0001 	biceq.w	r0, r0, #1
 80a3940:	4770      	bx	lr
 80a3942:	f090 0f00 	teq	r0, #0
 80a3946:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a394a:	bf08      	it	eq
 80a394c:	0249      	lsleq	r1, r1, #9
 80a394e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3952:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3956:	3a7f      	subs	r2, #127	; 0x7f
 80a3958:	bfc2      	ittt	gt
 80a395a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a395e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3962:	4770      	bxgt	lr
 80a3964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3968:	f04f 0300 	mov.w	r3, #0
 80a396c:	3a01      	subs	r2, #1
 80a396e:	dc5d      	bgt.n	80a3a2c <__aeabi_fmul+0x150>
 80a3970:	f112 0f19 	cmn.w	r2, #25
 80a3974:	bfdc      	itt	le
 80a3976:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a397a:	4770      	bxle	lr
 80a397c:	f1c2 0200 	rsb	r2, r2, #0
 80a3980:	0041      	lsls	r1, r0, #1
 80a3982:	fa21 f102 	lsr.w	r1, r1, r2
 80a3986:	f1c2 0220 	rsb	r2, r2, #32
 80a398a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a398e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3992:	f140 0000 	adc.w	r0, r0, #0
 80a3996:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a399a:	bf08      	it	eq
 80a399c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a39a0:	4770      	bx	lr
 80a39a2:	f092 0f00 	teq	r2, #0
 80a39a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a39aa:	bf02      	ittt	eq
 80a39ac:	0040      	lsleq	r0, r0, #1
 80a39ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a39b2:	3a01      	subeq	r2, #1
 80a39b4:	d0f9      	beq.n	80a39aa <__aeabi_fmul+0xce>
 80a39b6:	ea40 000c 	orr.w	r0, r0, ip
 80a39ba:	f093 0f00 	teq	r3, #0
 80a39be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a39c2:	bf02      	ittt	eq
 80a39c4:	0049      	lsleq	r1, r1, #1
 80a39c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a39ca:	3b01      	subeq	r3, #1
 80a39cc:	d0f9      	beq.n	80a39c2 <__aeabi_fmul+0xe6>
 80a39ce:	ea41 010c 	orr.w	r1, r1, ip
 80a39d2:	e78f      	b.n	80a38f4 <__aeabi_fmul+0x18>
 80a39d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a39d8:	ea92 0f0c 	teq	r2, ip
 80a39dc:	bf18      	it	ne
 80a39de:	ea93 0f0c 	teqne	r3, ip
 80a39e2:	d00a      	beq.n	80a39fa <__aeabi_fmul+0x11e>
 80a39e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a39e8:	bf18      	it	ne
 80a39ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a39ee:	d1d8      	bne.n	80a39a2 <__aeabi_fmul+0xc6>
 80a39f0:	ea80 0001 	eor.w	r0, r0, r1
 80a39f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a39f8:	4770      	bx	lr
 80a39fa:	f090 0f00 	teq	r0, #0
 80a39fe:	bf17      	itett	ne
 80a3a00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3a04:	4608      	moveq	r0, r1
 80a3a06:	f091 0f00 	teqne	r1, #0
 80a3a0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3a0e:	d014      	beq.n	80a3a3a <__aeabi_fmul+0x15e>
 80a3a10:	ea92 0f0c 	teq	r2, ip
 80a3a14:	d101      	bne.n	80a3a1a <__aeabi_fmul+0x13e>
 80a3a16:	0242      	lsls	r2, r0, #9
 80a3a18:	d10f      	bne.n	80a3a3a <__aeabi_fmul+0x15e>
 80a3a1a:	ea93 0f0c 	teq	r3, ip
 80a3a1e:	d103      	bne.n	80a3a28 <__aeabi_fmul+0x14c>
 80a3a20:	024b      	lsls	r3, r1, #9
 80a3a22:	bf18      	it	ne
 80a3a24:	4608      	movne	r0, r1
 80a3a26:	d108      	bne.n	80a3a3a <__aeabi_fmul+0x15e>
 80a3a28:	ea80 0001 	eor.w	r0, r0, r1
 80a3a2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a38:	4770      	bx	lr
 80a3a3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3a3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3a42:	4770      	bx	lr

080a3a44 <__aeabi_fdiv>:
 80a3a44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3a48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3a4c:	bf1e      	ittt	ne
 80a3a4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3a52:	ea92 0f0c 	teqne	r2, ip
 80a3a56:	ea93 0f0c 	teqne	r3, ip
 80a3a5a:	d069      	beq.n	80a3b30 <__aeabi_fdiv+0xec>
 80a3a5c:	eba2 0203 	sub.w	r2, r2, r3
 80a3a60:	ea80 0c01 	eor.w	ip, r0, r1
 80a3a64:	0249      	lsls	r1, r1, #9
 80a3a66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3a6a:	d037      	beq.n	80a3adc <__aeabi_fdiv+0x98>
 80a3a6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3a70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3a74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3a78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3a7c:	428b      	cmp	r3, r1
 80a3a7e:	bf38      	it	cc
 80a3a80:	005b      	lslcc	r3, r3, #1
 80a3a82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3a86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3a8a:	428b      	cmp	r3, r1
 80a3a8c:	bf24      	itt	cs
 80a3a8e:	1a5b      	subcs	r3, r3, r1
 80a3a90:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3a94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3a98:	bf24      	itt	cs
 80a3a9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3a9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3aa2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3aa6:	bf24      	itt	cs
 80a3aa8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3aac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3ab0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3ab4:	bf24      	itt	cs
 80a3ab6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3aba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3abe:	011b      	lsls	r3, r3, #4
 80a3ac0:	bf18      	it	ne
 80a3ac2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3ac6:	d1e0      	bne.n	80a3a8a <__aeabi_fdiv+0x46>
 80a3ac8:	2afd      	cmp	r2, #253	; 0xfd
 80a3aca:	f63f af50 	bhi.w	80a396e <__aeabi_fmul+0x92>
 80a3ace:	428b      	cmp	r3, r1
 80a3ad0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3ad4:	bf08      	it	eq
 80a3ad6:	f020 0001 	biceq.w	r0, r0, #1
 80a3ada:	4770      	bx	lr
 80a3adc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3ae0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3ae4:	327f      	adds	r2, #127	; 0x7f
 80a3ae6:	bfc2      	ittt	gt
 80a3ae8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3aec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3af0:	4770      	bxgt	lr
 80a3af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3af6:	f04f 0300 	mov.w	r3, #0
 80a3afa:	3a01      	subs	r2, #1
 80a3afc:	e737      	b.n	80a396e <__aeabi_fmul+0x92>
 80a3afe:	f092 0f00 	teq	r2, #0
 80a3b02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3b06:	bf02      	ittt	eq
 80a3b08:	0040      	lsleq	r0, r0, #1
 80a3b0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3b0e:	3a01      	subeq	r2, #1
 80a3b10:	d0f9      	beq.n	80a3b06 <__aeabi_fdiv+0xc2>
 80a3b12:	ea40 000c 	orr.w	r0, r0, ip
 80a3b16:	f093 0f00 	teq	r3, #0
 80a3b1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3b1e:	bf02      	ittt	eq
 80a3b20:	0049      	lsleq	r1, r1, #1
 80a3b22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3b26:	3b01      	subeq	r3, #1
 80a3b28:	d0f9      	beq.n	80a3b1e <__aeabi_fdiv+0xda>
 80a3b2a:	ea41 010c 	orr.w	r1, r1, ip
 80a3b2e:	e795      	b.n	80a3a5c <__aeabi_fdiv+0x18>
 80a3b30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3b34:	ea92 0f0c 	teq	r2, ip
 80a3b38:	d108      	bne.n	80a3b4c <__aeabi_fdiv+0x108>
 80a3b3a:	0242      	lsls	r2, r0, #9
 80a3b3c:	f47f af7d 	bne.w	80a3a3a <__aeabi_fmul+0x15e>
 80a3b40:	ea93 0f0c 	teq	r3, ip
 80a3b44:	f47f af70 	bne.w	80a3a28 <__aeabi_fmul+0x14c>
 80a3b48:	4608      	mov	r0, r1
 80a3b4a:	e776      	b.n	80a3a3a <__aeabi_fmul+0x15e>
 80a3b4c:	ea93 0f0c 	teq	r3, ip
 80a3b50:	d104      	bne.n	80a3b5c <__aeabi_fdiv+0x118>
 80a3b52:	024b      	lsls	r3, r1, #9
 80a3b54:	f43f af4c 	beq.w	80a39f0 <__aeabi_fmul+0x114>
 80a3b58:	4608      	mov	r0, r1
 80a3b5a:	e76e      	b.n	80a3a3a <__aeabi_fmul+0x15e>
 80a3b5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3b60:	bf18      	it	ne
 80a3b62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3b66:	d1ca      	bne.n	80a3afe <__aeabi_fdiv+0xba>
 80a3b68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3b6c:	f47f af5c 	bne.w	80a3a28 <__aeabi_fmul+0x14c>
 80a3b70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3b74:	f47f af3c 	bne.w	80a39f0 <__aeabi_fmul+0x114>
 80a3b78:	e75f      	b.n	80a3a3a <__aeabi_fmul+0x15e>
 80a3b7a:	bf00      	nop

080a3b7c <__aeabi_f2iz>:
 80a3b7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a3b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a3b84:	d30f      	bcc.n	80a3ba6 <__aeabi_f2iz+0x2a>
 80a3b86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a3b8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a3b8e:	d90d      	bls.n	80a3bac <__aeabi_f2iz+0x30>
 80a3b90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a3b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3b98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3b9c:	fa23 f002 	lsr.w	r0, r3, r2
 80a3ba0:	bf18      	it	ne
 80a3ba2:	4240      	negne	r0, r0
 80a3ba4:	4770      	bx	lr
 80a3ba6:	f04f 0000 	mov.w	r0, #0
 80a3baa:	4770      	bx	lr
 80a3bac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a3bb0:	d101      	bne.n	80a3bb6 <__aeabi_f2iz+0x3a>
 80a3bb2:	0242      	lsls	r2, r0, #9
 80a3bb4:	d105      	bne.n	80a3bc2 <__aeabi_f2iz+0x46>
 80a3bb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a3bba:	bf08      	it	eq
 80a3bbc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3bc0:	4770      	bx	lr
 80a3bc2:	f04f 0000 	mov.w	r0, #0
 80a3bc6:	4770      	bx	lr

080a3bc8 <__cxa_atexit>:
 80a3bc8:	b510      	push	{r4, lr}
 80a3bca:	4604      	mov	r4, r0
 80a3bcc:	4804      	ldr	r0, [pc, #16]	; (80a3be0 <__cxa_atexit+0x18>)
 80a3bce:	4613      	mov	r3, r2
 80a3bd0:	b120      	cbz	r0, 80a3bdc <__cxa_atexit+0x14>
 80a3bd2:	460a      	mov	r2, r1
 80a3bd4:	2002      	movs	r0, #2
 80a3bd6:	4621      	mov	r1, r4
 80a3bd8:	f3af 8000 	nop.w
 80a3bdc:	bd10      	pop	{r4, pc}
 80a3bde:	bf00      	nop
 80a3be0:	00000000 	.word	0x00000000

080a3be4 <memcpy>:
 80a3be4:	440a      	add	r2, r1
 80a3be6:	4291      	cmp	r1, r2
 80a3be8:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3bec:	d100      	bne.n	80a3bf0 <memcpy+0xc>
 80a3bee:	4770      	bx	lr
 80a3bf0:	b510      	push	{r4, lr}
 80a3bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3bf6:	4291      	cmp	r1, r2
 80a3bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3bfc:	d1f9      	bne.n	80a3bf2 <memcpy+0xe>
 80a3bfe:	bd10      	pop	{r4, pc}

080a3c00 <memmove>:
 80a3c00:	4288      	cmp	r0, r1
 80a3c02:	b510      	push	{r4, lr}
 80a3c04:	eb01 0402 	add.w	r4, r1, r2
 80a3c08:	d902      	bls.n	80a3c10 <memmove+0x10>
 80a3c0a:	4284      	cmp	r4, r0
 80a3c0c:	4623      	mov	r3, r4
 80a3c0e:	d807      	bhi.n	80a3c20 <memmove+0x20>
 80a3c10:	1e43      	subs	r3, r0, #1
 80a3c12:	42a1      	cmp	r1, r4
 80a3c14:	d008      	beq.n	80a3c28 <memmove+0x28>
 80a3c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a3c1e:	e7f8      	b.n	80a3c12 <memmove+0x12>
 80a3c20:	4601      	mov	r1, r0
 80a3c22:	4402      	add	r2, r0
 80a3c24:	428a      	cmp	r2, r1
 80a3c26:	d100      	bne.n	80a3c2a <memmove+0x2a>
 80a3c28:	bd10      	pop	{r4, pc}
 80a3c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a3c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a3c32:	e7f7      	b.n	80a3c24 <memmove+0x24>

080a3c34 <memset>:
 80a3c34:	4603      	mov	r3, r0
 80a3c36:	4402      	add	r2, r0
 80a3c38:	4293      	cmp	r3, r2
 80a3c3a:	d100      	bne.n	80a3c3e <memset+0xa>
 80a3c3c:	4770      	bx	lr
 80a3c3e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3c42:	e7f9      	b.n	80a3c38 <memset+0x4>

080a3c44 <srand>:
 80a3c44:	b538      	push	{r3, r4, r5, lr}
 80a3c46:	4b0d      	ldr	r3, [pc, #52]	; (80a3c7c <srand+0x38>)
 80a3c48:	4604      	mov	r4, r0
 80a3c4a:	681d      	ldr	r5, [r3, #0]
 80a3c4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3c4e:	b97b      	cbnz	r3, 80a3c70 <srand+0x2c>
 80a3c50:	2018      	movs	r0, #24
 80a3c52:	f7fd fed1 	bl	80a19f8 <malloc>
 80a3c56:	4a0a      	ldr	r2, [pc, #40]	; (80a3c80 <srand+0x3c>)
 80a3c58:	4b0a      	ldr	r3, [pc, #40]	; (80a3c84 <srand+0x40>)
 80a3c5a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a3c5c:	e9c0 2300 	strd	r2, r3, [r0]
 80a3c60:	4b09      	ldr	r3, [pc, #36]	; (80a3c88 <srand+0x44>)
 80a3c62:	2201      	movs	r2, #1
 80a3c64:	6083      	str	r3, [r0, #8]
 80a3c66:	230b      	movs	r3, #11
 80a3c68:	8183      	strh	r3, [r0, #12]
 80a3c6a:	2300      	movs	r3, #0
 80a3c6c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a3c70:	2200      	movs	r2, #0
 80a3c72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a3c74:	611c      	str	r4, [r3, #16]
 80a3c76:	615a      	str	r2, [r3, #20]
 80a3c78:	bd38      	pop	{r3, r4, r5, pc}
 80a3c7a:	bf00      	nop
 80a3c7c:	20000010 	.word	0x20000010
 80a3c80:	abcd330e 	.word	0xabcd330e
 80a3c84:	e66d1234 	.word	0xe66d1234
 80a3c88:	0005deec 	.word	0x0005deec

080a3c8c <strcpy>:
 80a3c8c:	4603      	mov	r3, r0
 80a3c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3c92:	f803 2b01 	strb.w	r2, [r3], #1
 80a3c96:	2a00      	cmp	r2, #0
 80a3c98:	d1f9      	bne.n	80a3c8e <strcpy+0x2>
 80a3c9a:	4770      	bx	lr

080a3c9c <strdup>:
 80a3c9c:	4b02      	ldr	r3, [pc, #8]	; (80a3ca8 <strdup+0xc>)
 80a3c9e:	4601      	mov	r1, r0
 80a3ca0:	6818      	ldr	r0, [r3, #0]
 80a3ca2:	f000 b803 	b.w	80a3cac <_strdup_r>
 80a3ca6:	bf00      	nop
 80a3ca8:	20000010 	.word	0x20000010

080a3cac <_strdup_r>:
 80a3cac:	b570      	push	{r4, r5, r6, lr}
 80a3cae:	4604      	mov	r4, r0
 80a3cb0:	4608      	mov	r0, r1
 80a3cb2:	460d      	mov	r5, r1
 80a3cb4:	f000 f80d 	bl	80a3cd2 <strlen>
 80a3cb8:	1c46      	adds	r6, r0, #1
 80a3cba:	4631      	mov	r1, r6
 80a3cbc:	4620      	mov	r0, r4
 80a3cbe:	f7fd febb 	bl	80a1a38 <_malloc_r>
 80a3cc2:	4604      	mov	r4, r0
 80a3cc4:	b118      	cbz	r0, 80a3cce <_strdup_r+0x22>
 80a3cc6:	4632      	mov	r2, r6
 80a3cc8:	4629      	mov	r1, r5
 80a3cca:	f7ff ff8b 	bl	80a3be4 <memcpy>
 80a3cce:	4620      	mov	r0, r4
 80a3cd0:	bd70      	pop	{r4, r5, r6, pc}

080a3cd2 <strlen>:
 80a3cd2:	4603      	mov	r3, r0
 80a3cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3cd8:	2a00      	cmp	r2, #0
 80a3cda:	d1fb      	bne.n	80a3cd4 <strlen+0x2>
 80a3cdc:	1a18      	subs	r0, r3, r0
 80a3cde:	3801      	subs	r0, #1
 80a3ce0:	4770      	bx	lr

080a3ce2 <strncpy>:
 80a3ce2:	4603      	mov	r3, r0
 80a3ce4:	b510      	push	{r4, lr}
 80a3ce6:	3901      	subs	r1, #1
 80a3ce8:	b132      	cbz	r2, 80a3cf8 <strncpy+0x16>
 80a3cea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a3cee:	3a01      	subs	r2, #1
 80a3cf0:	f803 4b01 	strb.w	r4, [r3], #1
 80a3cf4:	2c00      	cmp	r4, #0
 80a3cf6:	d1f7      	bne.n	80a3ce8 <strncpy+0x6>
 80a3cf8:	2100      	movs	r1, #0
 80a3cfa:	441a      	add	r2, r3
 80a3cfc:	4293      	cmp	r3, r2
 80a3cfe:	d100      	bne.n	80a3d02 <strncpy+0x20>
 80a3d00:	bd10      	pop	{r4, pc}
 80a3d02:	f803 1b01 	strb.w	r1, [r3], #1
 80a3d06:	e7f9      	b.n	80a3cfc <strncpy+0x1a>

080a3d08 <strstr>:
 80a3d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3d0a:	780c      	ldrb	r4, [r1, #0]
 80a3d0c:	b164      	cbz	r4, 80a3d28 <strstr+0x20>
 80a3d0e:	4603      	mov	r3, r0
 80a3d10:	781a      	ldrb	r2, [r3, #0]
 80a3d12:	4618      	mov	r0, r3
 80a3d14:	1c5e      	adds	r6, r3, #1
 80a3d16:	b90a      	cbnz	r2, 80a3d1c <strstr+0x14>
 80a3d18:	4610      	mov	r0, r2
 80a3d1a:	e005      	b.n	80a3d28 <strstr+0x20>
 80a3d1c:	4294      	cmp	r4, r2
 80a3d1e:	d108      	bne.n	80a3d32 <strstr+0x2a>
 80a3d20:	460d      	mov	r5, r1
 80a3d22:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a3d26:	b902      	cbnz	r2, 80a3d2a <strstr+0x22>
 80a3d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3d2a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a3d2e:	4297      	cmp	r7, r2
 80a3d30:	d0f7      	beq.n	80a3d22 <strstr+0x1a>
 80a3d32:	4633      	mov	r3, r6
 80a3d34:	e7ec      	b.n	80a3d10 <strstr+0x8>

080a3d36 <link_code_end>:
	...

080a3d38 <dynalib_user>:
 80a3d38:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a3d48:	0000 0000 6552 6963 7665 6465 6920 616d     ....Recieved ima
 80a3d58:	6567 0020 6220 7479 7365 6c20 7261 6567     ge . bytes large
 80a3d68:	2f2e 006e 6552 6963 7665 6465 6220 7479     ./n.Recieved byt
 80a3d78:	2065 7b00 4922 226d 003a 222c 6949 3a22     e .{"Im":.,"Ii":
 80a3d88:	2c00 4922 2270 003a 6553 746e 7420 206f     .,"Ip":.Sent to 
 80a3d98:	6c63 756f 3a64 0020 530a 4e45 2054 4c41     cloud: ..SENT AL
 80a3da8:	0a4c 0a00 4553 544e 4120 4c4c 4920 414d     L...SENT ALL IMA
 80a3db8:	4547 4d20 5345 4153 4547 000a 774f 4e6c     GE MESSAGE..OwlN
 80a3dc8:	646f 5f65 7953 7473 6d65 3130 4900 676d     ode_System01.Img
 80a3dd8:	555f 6c70 616f 5f64 3130 6900 696e 2074     _Upload_01.init 
 80a3de8:	6166 6c69 6465 4d00 7861 6c20 726f 2061     failed.Max lora 
 80a3df8:	656d 7373 6761 2065 656c 676e 6874 6920     message length i
 80a3e08:	3a73 0020 6946 696e 6873 6465 5320 7465     s: .Finished Set
 80a3e18:	7075 6c20 6f6f 2e70 2a00 2a2a 2a2a 2a2a     up loop..*******
 80a3e28:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
 80a3e38:	002a 6f67 2074 6572 7571 7365 3a74 0020     *.got request: .
 80a3e48:	007b 7644 4400 0064 222c 6953 3a22 2220     {.Dv.Dd.,"Si": "
 80a3e58:	2200 0020 222c 7644 3a22 2220 6553 7672     ." .,"Dv": "Serv
 80a3e68:	7265 3130 2022 007d 4449 6f20 2072 656d     er01" }.ID or me
 80a3e78:	7373 6761 2065 6f6e 2074 6f66 6e75 2e64     ssage not found.
 80a3e88:	4e20 206f 6572 6c70 2079 656d 7373 6761      No reply messag
 80a3e98:	2065 6573 746e 002e 6553 746e 2d20 2d00     e sent..Sent -.-
 80a3ea8:	6120 2073 2061 6572 6c70 2e79 4e00 206f      as a reply..No 
 80a3eb8:	7473 7261 2074 726f 6520 646e 6220 6172     start or end bra
 80a3ec8:	6b63 7465 6620 756f 646e 202c 6f6e 7220     cket found, no r
 80a3ed8:	7065 796c 6d20 7365 6173 6567 7320 6e65     eply message sen
 80a3ee8:	2e74 7200 6365 2076 6166 6c69 6465 0000     t..recv failed..

080a3ef8 <_ZTV5Timer>:
	...
 80a3f00:	0195 080a 01dd 080a 011d 080a               ............

080a3f0c <_ZTV12SerialBufferILj1024EE>:
	...
 80a3f14:	00f3 080a 010d 080a 13a5 080a 20fb 080a     ............. ..
 80a3f24:	13ad 080a 13c1 080a 13ff 080a 139d 080a     ................
 80a3f34:	1395 080a                                   ....

080a3f38 <_ZTV15RHGenericDriver>:
	...
 80a3f40:	0b1b 080a 00a9 080a 00a9 080a 00a9 080a     ................
 80a3f50:	00a9 080a 0b1f 080a 0b31 080a 0b97 080a     ........1.......
 80a3f60:	0b6f 080a 0b3f 080a 0b43 080a 0b47 080a     o...?...C...G...
 80a3f70:	0b4b 080a 0b4f 080a 0b3b 080a 0b5b 080a     K...O...;...[...
 80a3f80:	0b5f 080a 0b63 080a 0b67 080a 0b6b 080a     _...c...g...k...
 80a3f90:	4548 4552 0000 0000                         HERE....

080a3f98 <_ZTV13RHHardwareSPI>:
	...
 80a3fa0:	0c51 080a 0be7 080a 0be7 080a 0c89 080a     Q...............
 80a3fb0:	0c63 080a 0d15 080a 0d19 080a 0d1d 080a     c...............
 80a3fc0:	0be3 080a 0be5 080a                         ........

080a3fc8 <_ZTV12RHGenericSPI>:
	...
 80a3fd0:	00a9 080a 0d11 080a 0d13 080a 00a9 080a     ................
 80a3fe0:	00a9 080a 0d15 080a 0d19 080a 0d1d 080a     ................
 80a3ff0:	0be3 080a 0be5 080a                         ........

080a3ff8 <_ZL18MODEM_CONFIG_TABLE>:
 80a3ff8:	7472 9200 0074 9448 7800 00c4 9478 9200     rt..t.H..x..x...
 80a4008:	0094 0000                                   ....

080a400c <_ZTV7RH_RF95>:
	...
 80a4014:	1111 080a 0f93 080a 0dd1 080a 0fd1 080a     ................
 80a4024:	0d35 080a 0b1f 080a 0b31 080a 0b97 080a     5.......1.......
 80a4034:	0b6f 080a 0b3f 080a 0b43 080a 0b47 080a     o...?...C...G...
 80a4044:	0b4b 080a 0b4f 080a 0b3b 080a 0b5b 080a     K...O...;...[...
 80a4054:	0b5f 080a 0b63 080a 0b67 080a 0d39 080a     _...c...g...9...

080a4064 <_ZTV11RHSPIDriver>:
	...
 80a406c:	11f1 080a 00a9 080a 00a9 080a 00a9 080a     ................
 80a407c:	00a9 080a 0b1f 080a 0b31 080a 0b97 080a     ........1.......
 80a408c:	0b6f 080a 0b3f 080a 0b43 080a 0b47 080a     o...?...C...G...
 80a409c:	0b4b 080a 0b4f 080a 0b3b 080a 0b5b 080a     K...O...;...[...
 80a40ac:	0b5f 080a 0b63 080a 0b67 080a 0b6b 080a     _...c...g...k...
 80a40bc:	6573 6972 6c61 7542 6666 7265 0000 0000     serialBuffer....

080a40cc <_ZTV16SerialBufferBase>:
	...
 80a40d4:	13ef 080a 13f1 080a 13a5 080a 20fb 080a     ............. ..
 80a40e4:	13ad 080a 13c1 080a 13ff 080a 139d 080a     ................
 80a40f4:	1395 080a                                   ....

080a40f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a40f8:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
 80a4108:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a4118:	7361 7463 6d69 0065                         asctime.

080a4120 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4128:	2435 080a 243b 080a 2479 080a 2449 080a     5$..;$..y$..I$..
 80a4138:	2437 080a                                   7$..

080a413c <_ZTV9IPAddress>:
	...
 80a4144:	297d 080a 296d 080a 296f 080a               })..m)..o)..

080a4150 <_ZTV9USBSerial>:
	...
 80a4158:	2a39 080a 2a9f 080a 2a77 080a 20fb 080a     9*...*..w*... ..
 80a4168:	2a69 080a 2a3b 080a 2a4b 080a 2a99 080a     i*..;*..K*...*..
 80a4178:	2a5b 080a 2a35 080a                         [*..5*..

080a4180 <_ZTV11USARTSerial>:
	...
 80a4188:	2bf5 080a 2c5d 080a 2c39 080a 20fb 080a     .+..],..9,... ..
 80a4198:	2c09 080a 2c25 080a 2c17 080a 2c33 080a     .,..%,...,..3,..
 80a41a8:	2bf7 080a 2bfb 080a                         .+...+..

080a41b0 <_ZTV7TwoWire>:
	...
 80a41b8:	2d4d 080a 2d97 080a 2d6f 080a 2d4f 080a     M-...-..o-..O-..
 80a41c8:	2d77 080a 2d7f 080a 2d87 080a 2d8f 080a     w-...-...-...-..

080a41d8 <_ZTVN5spark9WiFiClassE>:
	...
 80a41e0:	2e5f 080a 2e55 080a 2e4b 080a 2dc9 080a     _...U...K....-..
 80a41f0:	21bb 080a 2e3f 080a 2ebd 080a 2ec5 080a     .!..?...........
 80a4200:	2e33 080a 2e2b 080a 2e21 080a 2e17 080a     3...+...!.......
 80a4210:	2dd3 080a                                   .-..

080a4214 <_ZTVN5spark12NetworkClassE>:
	...
 80a421c:	2e7d 080a 2e87 080a 2e91 080a 2e9b 080a     }...............
 80a422c:	2ea5 080a 2eb1 080a 2ebd 080a 2ec5 080a     ................
 80a423c:	2ecd 080a 2ed9 080a 2ee1 080a 2eeb 080a     ................
 80a424c:	2ef5 080a                                   ....

080a4250 <_ZSt7nothrow>:
	...

080a4251 <link_const_variable_data_end>:
 80a4251:	00          	.byte	0x00
	...

080a4254 <link_constructors_location>:
 80a4254:	080a05d9 	.word	0x080a05d9
 80a4258:	080a0d01 	.word	0x080a0d01
 80a425c:	080a1b99 	.word	0x080a1b99
 80a4260:	080a2201 	.word	0x080a2201
 80a4264:	080a2285 	.word	0x080a2285
 80a4268:	080a22cd 	.word	0x080a22cd
 80a426c:	080a2e69 	.word	0x080a2e69
 80a4270:	080a2f45 	.word	0x080a2f45
 80a4274:	080a3039 	.word	0x080a3039

080a4278 <link_constructors_end>:
	...
