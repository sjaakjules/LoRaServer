
c:/Users/Gladys/Documents/Repos/Particles/LoRa_Test2/Server/target/2.1.0/photon/Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a00  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a3a20  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a3a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000894  20000070  20000070  00030070  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a3a90  080a3a90  00023a90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3ab8  080a3ab8  00023ab8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018218f  00000000  00000000  00023abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001aa1c  00000000  00000000  001a5c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001dd03  00000000  00000000  001c0667  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002598  00000000  00000000  001de36a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005d68  00000000  00000000  001e0902  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030325  00000000  00000000  001e666a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003a124  00000000  00000000  0021698f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b8b25  00000000  00000000  00250ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006080  00000000  00000000  003095d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f003 fa15 	bl	80a3460 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f003 fa37 	bl	80a34b0 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a3a24 	.word	0x080a3a24
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000904 	.word	0x20000904
 80a005c:	20000904 	.word	0x20000904

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 ff6d 	bl	80a1f40 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a39f8 	.word	0x080a39f8
 80a0084:	080a3a1c 	.word	0x080a3a1c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b9b4 	b.w	80a03f4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fb8d 	bl	80a07ac <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f001 bf15 	b.w	80a1ec4 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f001 ba65 	b.w	80a1568 <malloc>

080a009e <_Znaj>:
 80a009e:	f001 ba63 	b.w	80a1568 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f001 ba69 	b.w	80a1578 <free>
	...

080a00a8 <__cxa_pure_virtual>:
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a8:	2100      	movs	r1, #0
 80a00aa:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a02      	ldr	r2, [pc, #8]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00b0:	f001 f97e 	bl	80a13b0 <panic_>
  while (1);
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a109d 	.word	0x080a109d

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_Z12updateSenderv>:
Timer timer(1000, updateSender);

void updateSender(){
  //if(readyToSend)
    //Serial.println("Ready to send heartbeat");
  readyToSend = true;
 80a00cc:	2201      	movs	r2, #1
 80a00ce:	4b01      	ldr	r3, [pc, #4]	; (80a00d4 <_Z12updateSenderv+0x8>)
 80a00d0:	701a      	strb	r2, [r3, #0]
}
 80a00d2:	4770      	bx	lr
 80a00d4:	200006d8 	.word	0x200006d8

080a00d8 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00d8:	6803      	ldr	r3, [r0, #0]
 80a00da:	4718      	bx	r3

080a00dc <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
 80a00dc:	2a01      	cmp	r2, #1
 80a00de:	d003      	beq.n	80a00e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
 80a00e0:	2a02      	cmp	r2, #2
 80a00e2:	d003      	beq.n	80a00ec <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
 80a00e4:	2000      	movs	r0, #0
 80a00e6:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00e8:	6001      	str	r1, [r0, #0]
	      break;
 80a00ea:	e7fb      	b.n	80a00e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00ec:	680b      	ldr	r3, [r1, #0]
 80a00ee:	6003      	str	r3, [r0, #0]
	}
 80a00f0:	e7f8      	b.n	80a00e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

080a00f4 <__tcf_0>:
String messageQue[queLength];
 80a00f4:	b538      	push	{r3, r4, r5, lr}
 80a00f6:	2463      	movs	r4, #99	; 0x63
 80a00f8:	4d03      	ldr	r5, [pc, #12]	; (80a0108 <__tcf_0+0x14>)
 80a00fa:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 80a00fe:	f001 fb76 	bl	80a17ee <_ZN6StringD1Ev>
 80a0102:	3c01      	subs	r4, #1
 80a0104:	d2f9      	bcs.n	80a00fa <__tcf_0+0x6>
 80a0106:	bd38      	pop	{r3, r4, r5, pc}
 80a0108:	20000098 	.word	0x20000098

080a010c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
 80a010c:	6943      	ldr	r3, [r0, #20]
 80a010e:	b113      	cbz	r3, 80a0116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0110:	6983      	ldr	r3, [r0, #24]
 80a0112:	300c      	adds	r0, #12
 80a0114:	4718      	bx	r3
            callback();
        }
    }
 80a0116:	4770      	bx	lr

080a0118 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
 80a0118:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
 80a011a:	2100      	movs	r1, #0
 80a011c:	4604      	mov	r4, r0
 80a011e:	4608      	mov	r0, r1
 80a0120:	f000 fff4 	bl	80a110c <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
 80a0124:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
 80a0126:	4620      	mov	r0, r4
 80a0128:	a901      	add	r1, sp, #4
            void* id = nullptr;
 80a012a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
 80a012c:	f001 f806 	bl	80a113c <os_timer_get_id>
            t = static_cast<Timer*>(id);
 80a0130:	9c01      	ldr	r4, [sp, #4]
            if (t) {
 80a0132:	b10c      	cbz	r4, 80a0138 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
 80a0134:	2301      	movs	r3, #1
 80a0136:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
 80a0138:	2100      	movs	r1, #0
 80a013a:	2001      	movs	r0, #1
 80a013c:	f000 ffe6 	bl	80a110c <os_thread_scheduling>
            }
        }
        if (t) {
 80a0140:	b12c      	cbz	r4, 80a014e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
 80a0142:	6823      	ldr	r3, [r4, #0]
 80a0144:	4620      	mov	r0, r4
 80a0146:	689b      	ldr	r3, [r3, #8]
 80a0148:	4798      	blx	r3
            t->running = false;
 80a014a:	2300      	movs	r3, #0
 80a014c:	7123      	strb	r3, [r4, #4]
        }
    }
 80a014e:	b002      	add	sp, #8
 80a0150:	bd10      	pop	{r4, pc}

080a0152 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 80a0152:	b510      	push	{r4, lr}
      if (_M_manager)
 80a0154:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0156:	4604      	mov	r4, r0
      if (_M_manager)
 80a0158:	b113      	cbz	r3, 80a0160 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a015a:	2203      	movs	r2, #3
 80a015c:	4601      	mov	r1, r0
 80a015e:	4798      	blx	r3
    }
 80a0160:	4620      	mov	r0, r4
 80a0162:	bd10      	pop	{r4, pc}

080a0164 <_ZN5Timer5_stopEjb>:
    bool _stop(unsigned block, bool fromISR=false)
 80a0164:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
 80a0166:	6880      	ldr	r0, [r0, #8]
 80a0168:	2300      	movs	r3, #0
 80a016a:	b138      	cbz	r0, 80a017c <_ZN5Timer5_stopEjb+0x18>
 80a016c:	e9cd 1300 	strd	r1, r3, [sp]
 80a0170:	2102      	movs	r1, #2
 80a0172:	f000 ffeb 	bl	80a114c <os_timer_change>
 80a0176:	fab0 f080 	clz	r0, r0
 80a017a:	0940      	lsrs	r0, r0, #5
    }
 80a017c:	b003      	add	sp, #12
 80a017e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0184 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
 80a0184:	b538      	push	{r3, r4, r5, lr}
 80a0186:	4b10      	ldr	r3, [pc, #64]	; (80a01c8 <_ZN5TimerD1Ev+0x44>)
 80a0188:	4604      	mov	r4, r0
 80a018a:	6003      	str	r3, [r0, #0]
        if (handle) {
 80a018c:	6883      	ldr	r3, [r0, #8]
 80a018e:	b1a3      	cbz	r3, 80a01ba <_ZN5TimerD1Ev+0x36>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a0190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80a0194:	2200      	movs	r2, #0
 80a0196:	f7ff ffe5 	bl	80a0164 <_ZN5Timer5_stopEjb>
            os_timer_set_id(handle, nullptr);
 80a019a:	2100      	movs	r1, #0
 80a019c:	68a0      	ldr	r0, [r4, #8]
 80a019e:	f000 fffd 	bl	80a119c <os_timer_set_id>
            while (running) {
 80a01a2:	7923      	ldrb	r3, [r4, #4]
 80a01a4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a01a8:	b113      	cbz	r3, 80a01b0 <_ZN5TimerD1Ev+0x2c>
                os_thread_yield();
 80a01aa:	f000 ffa7 	bl	80a10fc <os_thread_yield>
            while (running) {
 80a01ae:	e7f8      	b.n	80a01a2 <_ZN5TimerD1Ev+0x1e>
            os_timer_destroy(handle, nullptr);
 80a01b0:	4629      	mov	r1, r5
 80a01b2:	68a0      	ldr	r0, [r4, #8]
 80a01b4:	f000 ffba 	bl	80a112c <os_timer_destroy>
            handle = nullptr;
 80a01b8:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
 80a01ba:	f104 000c 	add.w	r0, r4, #12
 80a01be:	f7ff ffc8 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
    }
 80a01c2:	4620      	mov	r0, r4
 80a01c4:	bd38      	pop	{r3, r4, r5, pc}
 80a01c6:	bf00      	nop
 80a01c8:	080a3710 	.word	0x080a3710

080a01cc <_ZN5TimerD0Ev>:
    virtual ~Timer() {
 80a01cc:	b510      	push	{r4, lr}
 80a01ce:	4604      	mov	r4, r0
    }
 80a01d0:	f7ff ffd8 	bl	80a0184 <_ZN5TimerD1Ev>
 80a01d4:	4620      	mov	r0, r4
 80a01d6:	211c      	movs	r1, #28
 80a01d8:	f002 fd3f 	bl	80a2c5a <_ZdlPvj>
 80a01dc:	4620      	mov	r0, r4
 80a01de:	bd10      	pop	{r4, pc}

080a01e0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 80a01e0:	b40e      	push	{r1, r2, r3}
 80a01e2:	b510      	push	{r4, lr}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a01e4:	2300      	movs	r3, #0
    log(LOG_LEVEL_INFO, fmt, args);
 80a01e6:	6801      	ldr	r1, [r0, #0]
    attr.flags = 0;
 80a01e8:	2020      	movs	r0, #32
inline void spark::Logger::info(const char *fmt, ...) const {
 80a01ea:	b08d      	sub	sp, #52	; 0x34
 80a01ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80a01ee:	f852 4b04 	ldr.w	r4, [r2], #4
    attr.flags = 0;
 80a01f2:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01f6:	e9cd 4200 	strd	r4, r2, [sp]
    va_start(args, fmt);
 80a01fa:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a01fc:	201e      	movs	r0, #30
 80a01fe:	aa04      	add	r2, sp, #16
 80a0200:	f001 f8de 	bl	80a13c0 <log_message_v>
}
 80a0204:	b00d      	add	sp, #52	; 0x34
 80a0206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a020a:	b003      	add	sp, #12
 80a020c:	4770      	bx	lr
	...

080a0210 <_Z10TrySendQuev>:
  TrySendQue();
  // Try get messages.
  TryGetMessages();
}
void TrySendQue()
{
 80a0210:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (iSending != iReceiving && readyToSend)
 80a0214:	4d30      	ldr	r5, [pc, #192]	; (80a02d8 <_Z10TrySendQuev+0xc8>)
 80a0216:	4e31      	ldr	r6, [pc, #196]	; (80a02dc <_Z10TrySendQuev+0xcc>)
 80a0218:	682b      	ldr	r3, [r5, #0]
 80a021a:	6832      	ldr	r2, [r6, #0]
 80a021c:	4293      	cmp	r3, r2
 80a021e:	d044      	beq.n	80a02aa <_Z10TrySendQuev+0x9a>
 80a0220:	4f2f      	ldr	r7, [pc, #188]	; (80a02e0 <_Z10TrySendQuev+0xd0>)
 80a0222:	783a      	ldrb	r2, [r7, #0]
 80a0224:	2a00      	cmp	r2, #0
 80a0226:	d040      	beq.n	80a02aa <_Z10TrySendQuev+0x9a>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
 80a0228:	011a      	lsls	r2, r3, #4
 80a022a:	4b2e      	ldr	r3, [pc, #184]	; (80a02e4 <_Z10TrySendQuev+0xd4>)
  {
    Particle.publish(WebHookName, messageQue[iSending], 60, PUBLIC); // WebHook to Google Sheets
 80a022c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80a0300 <_Z10TrySendQuev+0xf0>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a0230:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0232:	492d      	ldr	r1, [pc, #180]	; (80a02e8 <_Z10TrySendQuev+0xd8>)
 80a0234:	f88d 3000 	strb.w	r3, [sp]
 80a0238:	f858 2002 	ldr.w	r2, [r8, r2]
 80a023c:	233c      	movs	r3, #60	; 0x3c
 80a023e:	6809      	ldr	r1, [r1, #0]
 80a0240:	a802      	add	r0, sp, #8
 80a0242:	f001 ffd5 	bl	80a21f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0246:	9c03      	ldr	r4, [sp, #12]
 80a0248:	b17c      	cbz	r4, 80a026a <_Z10TrySendQuev+0x5a>
      if (--_M_use_count == 0)
 80a024a:	6863      	ldr	r3, [r4, #4]
 80a024c:	3b01      	subs	r3, #1
 80a024e:	6063      	str	r3, [r4, #4]
 80a0250:	b95b      	cbnz	r3, 80a026a <_Z10TrySendQuev+0x5a>
          _M_dispose();
 80a0252:	6823      	ldr	r3, [r4, #0]
 80a0254:	4620      	mov	r0, r4
 80a0256:	689b      	ldr	r3, [r3, #8]
 80a0258:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a025a:	68a3      	ldr	r3, [r4, #8]
 80a025c:	3b01      	subs	r3, #1
 80a025e:	60a3      	str	r3, [r4, #8]
 80a0260:	b91b      	cbnz	r3, 80a026a <_Z10TrySendQuev+0x5a>
            _M_destroy();
 80a0262:	6823      	ldr	r3, [r4, #0]
 80a0264:	4620      	mov	r0, r4
 80a0266:	68db      	ldr	r3, [r3, #12]
 80a0268:	4798      	blx	r3
    Serial.println("Sent to cloud: ");
 80a026a:	f002 f9f7 	bl	80a265c <_Z16_fetch_usbserialv>
 80a026e:	491f      	ldr	r1, [pc, #124]	; (80a02ec <_Z10TrySendQuev+0xdc>)
 80a0270:	f001 fd34 	bl	80a1cdc <_ZN5Print7printlnEPKc>
    Serial.println(messageQue[iSending]);
 80a0274:	f002 f9f2 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0278:	682b      	ldr	r3, [r5, #0]
 80a027a:	011b      	lsls	r3, r3, #4
 80a027c:	f858 1003 	ldr.w	r1, [r8, r3]
 80a0280:	f001 fd2c 	bl	80a1cdc <_ZN5Print7printlnEPKc>
    Serial.println(" ");
 80a0284:	f002 f9ea 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0288:	4919      	ldr	r1, [pc, #100]	; (80a02f0 <_Z10TrySendQuev+0xe0>)
 80a028a:	f001 fd27 	bl	80a1cdc <_ZN5Print7printlnEPKc>
    lastSent = Time.now();
 80a028e:	f001 fda1 	bl	80a1dd4 <_ZN9TimeClass3nowEv>
 80a0292:	2200      	movs	r2, #0
 80a0294:	4b17      	ldr	r3, [pc, #92]	; (80a02f4 <_Z10TrySendQuev+0xe4>)
 80a0296:	17c1      	asrs	r1, r0, #31
 80a0298:	e9c3 0100 	strd	r0, r1, [r3]
    iSending++;
 80a029c:	682b      	ldr	r3, [r5, #0]
    if (iSending >= queLength)
    {
      iSending = 0;
    }
    readyToSend = false;
 80a029e:	703a      	strb	r2, [r7, #0]
    iSending++;
 80a02a0:	3301      	adds	r3, #1
 80a02a2:	2b63      	cmp	r3, #99	; 0x63
 80a02a4:	bfc8      	it	gt
 80a02a6:	4613      	movgt	r3, r2
 80a02a8:	602b      	str	r3, [r5, #0]
  }
  if (!haveSentall)
 80a02aa:	4b13      	ldr	r3, [pc, #76]	; (80a02f8 <_Z10TrySendQuev+0xe8>)
 80a02ac:	6832      	ldr	r2, [r6, #0]
 80a02ae:	7819      	ldrb	r1, [r3, #0]
 80a02b0:	b961      	cbnz	r1, 80a02cc <_Z10TrySendQuev+0xbc>
  {
    if (iSending == 0 && iReceiving == 0)
 80a02b2:	6829      	ldr	r1, [r5, #0]
 80a02b4:	430a      	orrs	r2, r1
 80a02b6:	d106      	bne.n	80a02c6 <_Z10TrySendQuev+0xb6>
    {
      haveSentall = true;
 80a02b8:	2201      	movs	r2, #1
 80a02ba:	701a      	strb	r2, [r3, #0]
      Serial.println("\nSENT ALL\n");
 80a02bc:	f002 f9ce 	bl	80a265c <_Z16_fetch_usbserialv>
 80a02c0:	490e      	ldr	r1, [pc, #56]	; (80a02fc <_Z10TrySendQuev+0xec>)
 80a02c2:	f001 fd0b 	bl	80a1cdc <_ZN5Print7printlnEPKc>
      haveSentall = false;
     // Serial.println("\nSENT ALL\n");
    }
  }
  
}
 80a02c6:	b004      	add	sp, #16
 80a02c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (iReceiving != 0)
 80a02cc:	2a00      	cmp	r2, #0
 80a02ce:	d0fa      	beq.n	80a02c6 <_Z10TrySendQuev+0xb6>
      haveSentall = false;
 80a02d0:	2200      	movs	r2, #0
 80a02d2:	701a      	strb	r2, [r3, #0]
}
 80a02d4:	e7f7      	b.n	80a02c6 <_Z10TrySendQuev+0xb6>
 80a02d6:	bf00      	nop
 80a02d8:	2000008c 	.word	0x2000008c
 80a02dc:	20000088 	.word	0x20000088
 80a02e0:	200006d8 	.word	0x200006d8
 80a02e4:	20000084 	.word	0x20000084
 80a02e8:	20000074 	.word	0x20000074
 80a02ec:	080a35c8 	.word	0x080a35c8
 80a02f0:	080a366b 	.word	0x080a366b
 80a02f4:	20000090 	.word	0x20000090
 80a02f8:	20000085 	.word	0x20000085
 80a02fc:	080a35d8 	.word	0x080a35d8
 80a0300:	20000098 	.word	0x20000098

080a0304 <_GLOBAL__sub_I_rf95>:
    {
      Serial.println("recv failed");
    }
    Serial.println("");
  }
}
 80a0304:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 80a0306:	2400      	movs	r4, #0
 80a0308:	4b29      	ldr	r3, [pc, #164]	; (80a03b0 <_GLOBAL__sub_I_rf95+0xac>)
RH_RF95 rf95;
 80a030a:	2202      	movs	r2, #2
}
 80a030c:	b088      	sub	sp, #32
RH_RF95 rf95;
 80a030e:	210c      	movs	r1, #12
 80a0310:	701c      	strb	r4, [r3, #0]
 80a0312:	4828      	ldr	r0, [pc, #160]	; (80a03b4 <_GLOBAL__sub_I_rf95+0xb0>)
 80a0314:	4b28      	ldr	r3, [pc, #160]	; (80a03b8 <_GLOBAL__sub_I_rf95+0xb4>)
 80a0316:	f000 fb6f 	bl	80a09f8 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
String WebHookName = "OwlNode_System01"; // Webhook name set within particle console.
 80a031a:	4928      	ldr	r1, [pc, #160]	; (80a03bc <_GLOBAL__sub_I_rf95+0xb8>)
 80a031c:	4828      	ldr	r0, [pc, #160]	; (80a03c0 <_GLOBAL__sub_I_rf95+0xbc>)
 80a031e:	f001 fab0 	bl	80a1882 <_ZN6StringC1EPKc>
 80a0322:	4a28      	ldr	r2, [pc, #160]	; (80a03c4 <_GLOBAL__sub_I_rf95+0xc0>)
 80a0324:	4928      	ldr	r1, [pc, #160]	; (80a03c8 <_GLOBAL__sub_I_rf95+0xc4>)
 80a0326:	4826      	ldr	r0, [pc, #152]	; (80a03c0 <_GLOBAL__sub_I_rf95+0xbc>)
 80a0328:	f002 fc92 	bl	80a2c50 <__aeabi_atexit>
String messageQue[queLength];
 80a032c:	4d27      	ldr	r5, [pc, #156]	; (80a03cc <_GLOBAL__sub_I_rf95+0xc8>)
 80a032e:	4e28      	ldr	r6, [pc, #160]	; (80a03d0 <_GLOBAL__sub_I_rf95+0xcc>)
 80a0330:	1928      	adds	r0, r5, r4
 80a0332:	4631      	mov	r1, r6
 80a0334:	3410      	adds	r4, #16
 80a0336:	f001 faa4 	bl	80a1882 <_ZN6StringC1EPKc>
 80a033a:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
 80a033e:	d1f7      	bne.n	80a0330 <_GLOBAL__sub_I_rf95+0x2c>
 80a0340:	4a20      	ldr	r2, [pc, #128]	; (80a03c4 <_GLOBAL__sub_I_rf95+0xc0>)
 80a0342:	4924      	ldr	r1, [pc, #144]	; (80a03d4 <_GLOBAL__sub_I_rf95+0xd0>)
 80a0344:	2000      	movs	r0, #0
 80a0346:	f002 fc83 	bl	80a2c50 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80a034a:	4b23      	ldr	r3, [pc, #140]	; (80a03d8 <_GLOBAL__sub_I_rf95+0xd4>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
 80a034c:	4c23      	ldr	r4, [pc, #140]	; (80a03dc <_GLOBAL__sub_I_rf95+0xd8>)
 80a034e:	9304      	str	r3, [sp, #16]
 80a0350:	4b23      	ldr	r3, [pc, #140]	; (80a03e0 <_GLOBAL__sub_I_rf95+0xdc>)
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0352:	ad04      	add	r5, sp, #16
 80a0354:	6023      	str	r3, [r4, #0]
 80a0356:	2300      	movs	r3, #0
 80a0358:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a035c:	ae02      	add	r6, sp, #8
 80a035e:	e886 0003 	stmia.w	r6, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0362:	f104 020c 	add.w	r2, r4, #12
 80a0366:	e892 0003 	ldmia.w	r2, {r0, r1}
 80a036a:	e885 0003 	stmia.w	r5, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a036e:	e896 0003 	ldmia.w	r6, {r0, r1}
 80a0372:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0376:	4a1b      	ldr	r2, [pc, #108]	; (80a03e4 <_GLOBAL__sub_I_rf95+0xe0>)
 80a0378:	7123      	strb	r3, [r4, #4]
 80a037a:	6162      	str	r2, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a037c:	69a2      	ldr	r2, [r4, #24]
 80a037e:	60a3      	str	r3, [r4, #8]
 80a0380:	9207      	str	r2, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0382:	4a19      	ldr	r2, [pc, #100]	; (80a03e8 <_GLOBAL__sub_I_rf95+0xe4>)
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
 80a0384:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0388:	61a2      	str	r2, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a038a:	9306      	str	r3, [sp, #24]
 80a038c:	e9cd 3300 	strd	r3, r3, [sp]
 80a0390:	4a16      	ldr	r2, [pc, #88]	; (80a03ec <_GLOBAL__sub_I_rf95+0xe8>)
 80a0392:	4623      	mov	r3, r4
 80a0394:	f104 0008 	add.w	r0, r4, #8
 80a0398:	f000 fec0 	bl	80a111c <os_timer_create>
    class function<_Res(_ArgTypes...)>
 80a039c:	4628      	mov	r0, r5
 80a039e:	f7ff fed8 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
Timer timer(1000, updateSender);
 80a03a2:	4620      	mov	r0, r4
 80a03a4:	4a07      	ldr	r2, [pc, #28]	; (80a03c4 <_GLOBAL__sub_I_rf95+0xc0>)
 80a03a6:	4912      	ldr	r1, [pc, #72]	; (80a03f0 <_GLOBAL__sub_I_rf95+0xec>)
 80a03a8:	f002 fc52 	bl	80a2c50 <__aeabi_atexit>
}
 80a03ac:	b008      	add	sp, #32
 80a03ae:	bd70      	pop	{r4, r5, r6, pc}
 80a03b0:	20000084 	.word	0x20000084
 80a03b4:	200006dc 	.word	0x200006dc
 80a03b8:	20000828 	.word	0x20000828
 80a03bc:	080a35e3 	.word	0x080a35e3
 80a03c0:	20000074 	.word	0x20000074
 80a03c4:	20000070 	.word	0x20000070
 80a03c8:	080a17ef 	.word	0x080a17ef
 80a03cc:	20000098 	.word	0x20000098
 80a03d0:	080a35e2 	.word	0x080a35e2
 80a03d4:	080a00f5 	.word	0x080a00f5
 80a03d8:	080a00cd 	.word	0x080a00cd
 80a03dc:	200007fc 	.word	0x200007fc
 80a03e0:	080a3710 	.word	0x080a3710
 80a03e4:	080a00dd 	.word	0x080a00dd
 80a03e8:	080a00d9 	.word	0x080a00d9
 80a03ec:	080a0119 	.word	0x080a0119
 80a03f0:	080a0185 	.word	0x080a0185

080a03f4 <setup>:
{
 80a03f4:	b510      	push	{r4, lr}
  pinMode(led, OUTPUT);
 80a03f6:	4b2f      	ldr	r3, [pc, #188]	; (80a04b4 <setup+0xc0>)
{
 80a03f8:	b08a      	sub	sp, #40	; 0x28
  pinMode(led, OUTPUT);
 80a03fa:	8818      	ldrh	r0, [r3, #0]
 80a03fc:	2101      	movs	r1, #1
 80a03fe:	f002 fba5 	bl	80a2b4c <pinMode>
  Serial.begin(9600);
 80a0402:	f002 f92b 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0406:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a040a:	f002 f91b 	bl	80a2644 <_ZN9USBSerial5beginEl>
  delay(1000);
 80a040e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0412:	f001 fcf9 	bl	80a1e08 <delay>
  if (!rf95.init())
 80a0416:	4828      	ldr	r0, [pc, #160]	; (80a04b8 <setup+0xc4>)
 80a0418:	f000 fcce 	bl	80a0db8 <_ZN7RH_RF954initEv>
 80a041c:	2800      	cmp	r0, #0
 80a041e:	d13f      	bne.n	80a04a0 <setup+0xac>
    Serial.println("init failed");
 80a0420:	f002 f91c 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0424:	4925      	ldr	r1, [pc, #148]	; (80a04bc <setup+0xc8>)
 80a0426:	f001 fc59 	bl	80a1cdc <_ZN5Print7printlnEPKc>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
 80a042a:	2200      	movs	r2, #0
 80a042c:	4c24      	ldr	r4, [pc, #144]	; (80a04c0 <setup+0xcc>)
 80a042e:	4611      	mov	r1, r2
 80a0430:	4620      	mov	r0, r4
 80a0432:	f7ff fe97 	bl	80a0164 <_ZN5Timer5_stopEjb>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
 80a0436:	68a0      	ldr	r0, [r4, #8]
 80a0438:	b140      	cbz	r0, 80a044c <setup+0x58>
 80a043a:	2300      	movs	r3, #0
 80a043c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80a0440:	4619      	mov	r1, r3
 80a0442:	e9cd 2300 	strd	r2, r3, [sp]
 80a0446:	461a      	mov	r2, r3
 80a0448:	f000 fe80 	bl	80a114c <os_timer_change>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a044c:	491d      	ldr	r1, [pc, #116]	; (80a04c4 <setup+0xd0>)
 80a044e:	a806      	add	r0, sp, #24
 80a0450:	f001 fa17 	bl	80a1882 <_ZN6StringC1EPKc>
  Log.info("Max lora message length is: "+ String(rf95.maxMessageLength()));
 80a0454:	4818      	ldr	r0, [pc, #96]	; (80a04b8 <setup+0xc4>)
 80a0456:	f000 fabf 	bl	80a09d8 <_ZN7RH_RF9516maxMessageLengthEv>
 80a045a:	220a      	movs	r2, #10
 80a045c:	4601      	mov	r1, r0
 80a045e:	a802      	add	r0, sp, #8
 80a0460:	f001 fa72 	bl	80a1948 <_ZN6StringC1Ehh>
 80a0464:	a902      	add	r1, sp, #8
 80a0466:	a806      	add	r0, sp, #24
 80a0468:	f001 faca 	bl	80a1a00 <_ZplRK15StringSumHelperRK6String>
 80a046c:	6801      	ldr	r1, [r0, #0]
 80a046e:	4816      	ldr	r0, [pc, #88]	; (80a04c8 <setup+0xd4>)
 80a0470:	f7ff feb6 	bl	80a01e0 <_ZNK5spark6Logger4infoEPKcz>
 80a0474:	a802      	add	r0, sp, #8
 80a0476:	f001 f9ba 	bl	80a17ee <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a047a:	a806      	add	r0, sp, #24
 80a047c:	f001 f9b7 	bl	80a17ee <_ZN6StringD1Ev>
  Log.info("Finished Setup loop.");
 80a0480:	4912      	ldr	r1, [pc, #72]	; (80a04cc <setup+0xd8>)
 80a0482:	4811      	ldr	r0, [pc, #68]	; (80a04c8 <setup+0xd4>)
 80a0484:	f7ff feac 	bl	80a01e0 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("************************");
 80a0488:	4911      	ldr	r1, [pc, #68]	; (80a04d0 <setup+0xdc>)
 80a048a:	480f      	ldr	r0, [pc, #60]	; (80a04c8 <setup+0xd4>)
 80a048c:	f7ff fea8 	bl	80a01e0 <_ZNK5spark6Logger4infoEPKcz>
  lastSent = Time.now();
 80a0490:	f001 fca0 	bl	80a1dd4 <_ZN9TimeClass3nowEv>
 80a0494:	4b0f      	ldr	r3, [pc, #60]	; (80a04d4 <setup+0xe0>)
 80a0496:	17c1      	asrs	r1, r0, #31
 80a0498:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a049c:	b00a      	add	sp, #40	; 0x28
 80a049e:	bd10      	pop	{r4, pc}
    rf95.setFrequency(915);
 80a04a0:	490d      	ldr	r1, [pc, #52]	; (80a04d8 <setup+0xe4>)
 80a04a2:	4805      	ldr	r0, [pc, #20]	; (80a04b8 <setup+0xc4>)
 80a04a4:	f000 fb10 	bl	80a0ac8 <_ZN7RH_RF9512setFrequencyEf>
    rf95.setTxPower(23,false);
 80a04a8:	2200      	movs	r2, #0
 80a04aa:	2117      	movs	r1, #23
 80a04ac:	4802      	ldr	r0, [pc, #8]	; (80a04b8 <setup+0xc4>)
 80a04ae:	f000 fc1b 	bl	80a0ce8 <_ZN7RH_RF9510setTxPowerEab>
 80a04b2:	e7ba      	b.n	80a042a <setup+0x36>
 80a04b4:	20000000 	.word	0x20000000
 80a04b8:	200006dc 	.word	0x200006dc
 80a04bc:	080a35f4 	.word	0x080a35f4
 80a04c0:	200007fc 	.word	0x200007fc
 80a04c4:	080a3600 	.word	0x080a3600
 80a04c8:	20000850 	.word	0x20000850
 80a04cc:	080a361d 	.word	0x080a361d
 80a04d0:	080a3632 	.word	0x080a3632
 80a04d4:	20000090 	.word	0x20000090
 80a04d8:	4464c000 	.word	0x4464c000

080a04dc <_Z14TryGetMessagesv.part.0>:
    uint8_t len = sizeof(buf);
 80a04dc:	23fb      	movs	r3, #251	; 0xfb
void TryGetMessages()
 80a04de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a04e2:	b0d4      	sub	sp, #336	; 0x150
 80a04e4:	af00      	add	r7, sp, #0
    if (rf95.recv(buf, &len))
 80a04e6:	4899      	ldr	r0, [pc, #612]	; (80a074c <_Z14TryGetMessagesv.part.0+0x270>)
 80a04e8:	1cfa      	adds	r2, r7, #3
 80a04ea:	f107 0154 	add.w	r1, r7, #84	; 0x54
    uint8_t len = sizeof(buf);
 80a04ee:	70fb      	strb	r3, [r7, #3]
    if (rf95.recv(buf, &len))
 80a04f0:	f000 fac0 	bl	80a0a74 <_ZN7RH_RF954recvEPhS0_>
 80a04f4:	2800      	cmp	r0, #0
 80a04f6:	f000 8122 	beq.w	80a073e <_Z14TryGetMessagesv.part.0+0x262>
      digitalWrite(led, HIGH);
 80a04fa:	4d95      	ldr	r5, [pc, #596]	; (80a0750 <_Z14TryGetMessagesv.part.0+0x274>)
 80a04fc:	2101      	movs	r1, #1
 80a04fe:	8828      	ldrh	r0, [r5, #0]
 80a0500:	f002 fb35 	bl	80a2b6e <digitalWrite>
      Serial.println("got request: ");
 80a0504:	f002 f8aa 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0508:	4992      	ldr	r1, [pc, #584]	; (80a0754 <_Z14TryGetMessagesv.part.0+0x278>)
 80a050a:	f001 fbe7 	bl	80a1cdc <_ZN5Print7printlnEPKc>
      Serial.println((char *)buf);
 80a050e:	f002 f8a5 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0512:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80a0516:	f001 fbe1 	bl	80a1cdc <_ZN5Print7printlnEPKc>
      String newMsg = String((char *)buf);
 80a051a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80a051e:	1d38      	adds	r0, r7, #4
 80a0520:	f001 f9af 	bl	80a1882 <_ZN6StringC1EPKc>
      int msgStart = newMsg.indexOf("{");
 80a0524:	498c      	ldr	r1, [pc, #560]	; (80a0758 <_Z14TryGetMessagesv.part.0+0x27c>)
 80a0526:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a052a:	f001 f9aa 	bl	80a1882 <_ZN6StringC1EPKc>
 80a052e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a0532:	1d38      	adds	r0, r7, #4
 80a0534:	f001 faab 	bl	80a1a8e <_ZNK6String7indexOfERKS_>
 80a0538:	4604      	mov	r4, r0
 80a053a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a053e:	f001 f956 	bl	80a17ee <_ZN6StringD1Ev>
      int msgEnd = newMsg.indexOf("}");
 80a0542:	4986      	ldr	r1, [pc, #536]	; (80a075c <_Z14TryGetMessagesv.part.0+0x280>)
 80a0544:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0548:	f001 f99b 	bl	80a1882 <_ZN6StringC1EPKc>
 80a054c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a0550:	1d38      	adds	r0, r7, #4
 80a0552:	f001 fa9c 	bl	80a1a8e <_ZNK6String7indexOfERKS_>
 80a0556:	4606      	mov	r6, r0
 80a0558:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a055c:	f001 f947 	bl	80a17ee <_ZN6StringD1Ev>
      if (msgStart > 0 && msgEnd > 0)
 80a0560:	2c00      	cmp	r4, #0
 80a0562:	f340 80e6 	ble.w	80a0732 <_Z14TryGetMessagesv.part.0+0x256>
 80a0566:	2e00      	cmp	r6, #0
 80a0568:	f340 80e3 	ble.w	80a0732 <_Z14TryGetMessagesv.part.0+0x256>
        String sender = newMsg.substring(0, msgStart);
 80a056c:	4623      	mov	r3, r4
 80a056e:	2200      	movs	r2, #0
 80a0570:	1d39      	adds	r1, r7, #4
 80a0572:	f107 0014 	add.w	r0, r7, #20
 80a0576:	f001 fab3 	bl	80a1ae0 <_ZNK6String9substringEjj>
        Serial.println(sender);
 80a057a:	f002 f86f 	bl	80a265c <_Z16_fetch_usbserialv>
 80a057e:	6979      	ldr	r1, [r7, #20]
 80a0580:	f001 fbac 	bl	80a1cdc <_ZN5Print7printlnEPKc>
        String msgRcived = newMsg.substring(msgStart, msgEnd + 1);
 80a0584:	1c73      	adds	r3, r6, #1
 80a0586:	4622      	mov	r2, r4
 80a0588:	1d39      	adds	r1, r7, #4
 80a058a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a058e:	f001 faa7 	bl	80a1ae0 <_ZNK6String9substringEjj>
        Serial.println(msgRcived);
 80a0592:	f002 f863 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80a0598:	f001 fba0 	bl	80a1cdc <_ZN5Print7printlnEPKc>
        if (sender.length() > 0 && msgRcived.length() > 0)
 80a059c:	69fb      	ldr	r3, [r7, #28]
 80a059e:	2b00      	cmp	r3, #0
 80a05a0:	f000 808d 	beq.w	80a06be <_Z14TryGetMessagesv.part.0+0x1e2>
 80a05a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80a05a6:	2b00      	cmp	r3, #0
 80a05a8:	f000 8089 	beq.w	80a06be <_Z14TryGetMessagesv.part.0+0x1e2>
          msgRcived.replace("Dv", "Dd");
 80a05ac:	496c      	ldr	r1, [pc, #432]	; (80a0760 <_Z14TryGetMessagesv.part.0+0x284>)
 80a05ae:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a05b2:	f001 f966 	bl	80a1882 <_ZN6StringC1EPKc>
 80a05b6:	496b      	ldr	r1, [pc, #428]	; (80a0764 <_Z14TryGetMessagesv.part.0+0x288>)
 80a05b8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a05bc:	f001 f961 	bl	80a1882 <_ZN6StringC1EPKc>
 80a05c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80a05c4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a05c8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a05cc:	f001 faaa 	bl	80a1b24 <_ZN6String7replaceERKS_S1_>
 80a05d0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a05d4:	f001 f90b 	bl	80a17ee <_ZN6StringD1Ev>
 80a05d8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a05dc:	f001 f907 	bl	80a17ee <_ZN6StringD1Ev>
          msgRcived.remove(msgRcived.length() - 1);
 80a05e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80a05e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a05e6:	3901      	subs	r1, #1
 80a05e8:	f001 fb3b 	bl	80a1c62 <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
 80a05ec:	495e      	ldr	r1, [pc, #376]	; (80a0768 <_Z14TryGetMessagesv.part.0+0x28c>)
 80a05ee:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a05f2:	f001 f946 	bl	80a1882 <_ZN6StringC1EPKc>
          msgRcived.concat(",\"Si\": \"" + String(rf95.lastRssi())+"\" ");
 80a05f6:	4855      	ldr	r0, [pc, #340]	; (80a074c <_Z14TryGetMessagesv.part.0+0x270>)
 80a05f8:	f000 f942 	bl	80a0880 <_ZN15RHGenericDriver8lastRssiEv>
 80a05fc:	220a      	movs	r2, #10
 80a05fe:	4601      	mov	r1, r0
 80a0600:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a0604:	f001 f9b2 	bl	80a196c <_ZN6StringC1Eih>
 80a0608:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80a060c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0610:	f001 f9f6 	bl	80a1a00 <_ZplRK15StringSumHelperRK6String>
 80a0614:	4955      	ldr	r1, [pc, #340]	; (80a076c <_Z14TryGetMessagesv.part.0+0x290>)
 80a0616:	f001 f9ff 	bl	80a1a18 <_ZplRK15StringSumHelperPKc>
 80a061a:	4601      	mov	r1, r0
 80a061c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a0620:	f001 f9ce 	bl	80a19c0 <_ZN6String6concatERKS_>
 80a0624:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80a0628:	f001 f8e1 	bl	80a17ee <_ZN6StringD1Ev>
          messageQue[iReceiving] = String(msgRcived);
 80a062c:	4c50      	ldr	r4, [pc, #320]	; (80a0770 <_Z14TryGetMessagesv.part.0+0x294>)
class StringSumHelper : public String
 80a062e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0632:	f001 f8dc 	bl	80a17ee <_ZN6StringD1Ev>
          msgRcived.concat(",\"Dv\": \"Server01\" }");
 80a0636:	494f      	ldr	r1, [pc, #316]	; (80a0774 <_Z14TryGetMessagesv.part.0+0x298>)
 80a0638:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a063c:	f001 f9c4 	bl	80a19c8 <_ZN6String6concatEPKc>
          messageQue[iReceiving] = String(msgRcived);
 80a0640:	4b4d      	ldr	r3, [pc, #308]	; (80a0778 <_Z14TryGetMessagesv.part.0+0x29c>)
 80a0642:	6822      	ldr	r2, [r4, #0]
 80a0644:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80a0648:	eb03 1802 	add.w	r8, r3, r2, lsl #4
 80a064c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0650:	f001 f956 	bl	80a1900 <_ZN6StringC1ERKS_>
 80a0654:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80a0658:	4640      	mov	r0, r8
 80a065a:	f001 f95c 	bl	80a1916 <_ZN6StringaSEOS_>
 80a065e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80a0662:	f001 f8c4 	bl	80a17ee <_ZN6StringD1Ev>
          iReceiving++;
 80a0666:	6823      	ldr	r3, [r4, #0]
          Serial.println("- as a reply.");
 80a0668:	466e      	mov	r6, sp
          iReceiving++;
 80a066a:	3301      	adds	r3, #1
          if (iReceiving >= queLength)
 80a066c:	2b63      	cmp	r3, #99	; 0x63
 80a066e:	dc44      	bgt.n	80a06fa <_Z14TryGetMessagesv.part.0+0x21e>
          sender.concat(' ');
 80a0670:	2120      	movs	r1, #32
 80a0672:	f107 0014 	add.w	r0, r7, #20
            iReceiving = 0;
 80a0676:	6023      	str	r3, [r4, #0]
          sender.concat(' ');
 80a0678:	f001 f9b5 	bl	80a19e6 <_ZN6String6concatEc>
          char dataMsg[sender.length()+1];
 80a067c:	69fa      	ldr	r2, [r7, #28]
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a067e:	f107 0014 	add.w	r0, r7, #20
 80a0682:	f102 0308 	add.w	r3, r2, #8
 80a0686:	f023 0307 	bic.w	r3, r3, #7
 80a068a:	ebad 0d03 	sub.w	sp, sp, r3
 80a068e:	4669      	mov	r1, sp
 80a0690:	2300      	movs	r3, #0
 80a0692:	f001 f9d5 	bl	80a1a40 <_ZNK6String8getBytesEPhjj>
          uint8_t data[sender.length()+1];
 80a0696:	69fa      	ldr	r2, [r7, #28]
          char dataMsg[sender.length()+1];
 80a0698:	466c      	mov	r4, sp
          uint8_t data[sender.length()+1];
 80a069a:	f102 0308 	add.w	r3, r2, #8
 80a069e:	f023 0307 	bic.w	r3, r3, #7
 80a06a2:	ebad 0d03 	sub.w	sp, sp, r3
 80a06a6:	46e8      	mov	r8, sp
          for (size_t i = 0; i < sender.length()+1; i++)
 80a06a8:	1e63      	subs	r3, r4, #1
 80a06aa:	f10d 31ff 	add.w	r1, sp, #4294967295
 80a06ae:	4414      	add	r4, r2
 80a06b0:	42a3      	cmp	r3, r4
 80a06b2:	d024      	beq.n	80a06fe <_Z14TryGetMessagesv.part.0+0x222>
            data[i] = uint8_t(dataMsg[i]);
 80a06b4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80a06b8:	f801 0f01 	strb.w	r0, [r1, #1]!
          for (size_t i = 0; i < sender.length()+1; i++)
 80a06bc:	e7f8      	b.n	80a06b0 <_Z14TryGetMessagesv.part.0+0x1d4>
          Serial.println("ID or message not found. No reply message sent.");
 80a06be:	f001 ffcd 	bl	80a265c <_Z16_fetch_usbserialv>
 80a06c2:	492e      	ldr	r1, [pc, #184]	; (80a077c <_Z14TryGetMessagesv.part.0+0x2a0>)
 80a06c4:	f001 fb0a 	bl	80a1cdc <_ZN5Print7printlnEPKc>
        String msgRcived = newMsg.substring(msgStart, msgEnd + 1);
 80a06c8:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80a06cc:	f001 f88f 	bl	80a17ee <_ZN6StringD1Ev>
        String sender = newMsg.substring(0, msgStart);
 80a06d0:	f107 0014 	add.w	r0, r7, #20
 80a06d4:	f001 f88b 	bl	80a17ee <_ZN6StringD1Ev>
      digitalWrite(led, LOW);
 80a06d8:	8828      	ldrh	r0, [r5, #0]
 80a06da:	2100      	movs	r1, #0
 80a06dc:	f002 fa47 	bl	80a2b6e <digitalWrite>
      String newMsg = String((char *)buf);
 80a06e0:	1d38      	adds	r0, r7, #4
 80a06e2:	f001 f884 	bl	80a17ee <_ZN6StringD1Ev>
    Serial.println("");
 80a06e6:	f001 ffb9 	bl	80a265c <_Z16_fetch_usbserialv>
 80a06ea:	4925      	ldr	r1, [pc, #148]	; (80a0780 <_Z14TryGetMessagesv.part.0+0x2a4>)
 80a06ec:	f001 faf6 	bl	80a1cdc <_ZN5Print7printlnEPKc>
}
 80a06f0:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 80a06f4:	46bd      	mov	sp, r7
 80a06f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            iReceiving = 0;
 80a06fa:	2300      	movs	r3, #0
 80a06fc:	e7b8      	b.n	80a0670 <_Z14TryGetMessagesv.part.0+0x194>
          rf95.send(data, sizeof(data));
 80a06fe:	3201      	adds	r2, #1
 80a0700:	b2d2      	uxtb	r2, r2
 80a0702:	4641      	mov	r1, r8
 80a0704:	4811      	ldr	r0, [pc, #68]	; (80a074c <_Z14TryGetMessagesv.part.0+0x270>)
 80a0706:	f000 fab7 	bl	80a0c78 <_ZN7RH_RF954sendEPKhh>
          rf95.waitPacketSent();
 80a070a:	4810      	ldr	r0, [pc, #64]	; (80a074c <_Z14TryGetMessagesv.part.0+0x270>)
 80a070c:	f000 f862 	bl	80a07d4 <_ZN15RHGenericDriver14waitPacketSentEv>
          Serial.print("Sent -");
 80a0710:	f001 ffa4 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0714:	491b      	ldr	r1, [pc, #108]	; (80a0784 <_Z14TryGetMessagesv.part.0+0x2a8>)
 80a0716:	f001 face 	bl	80a1cb6 <_ZN5Print5printEPKc>
          Serial.print((char *)data);
 80a071a:	f001 ff9f 	bl	80a265c <_Z16_fetch_usbserialv>
 80a071e:	4641      	mov	r1, r8
 80a0720:	f001 fac9 	bl	80a1cb6 <_ZN5Print5printEPKc>
          Serial.println("- as a reply.");
 80a0724:	f001 ff9a 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0728:	4917      	ldr	r1, [pc, #92]	; (80a0788 <_Z14TryGetMessagesv.part.0+0x2ac>)
 80a072a:	f001 fad7 	bl	80a1cdc <_ZN5Print7printlnEPKc>
 80a072e:	46b5      	mov	sp, r6
 80a0730:	e7ca      	b.n	80a06c8 <_Z14TryGetMessagesv.part.0+0x1ec>
        Serial.println("No start or end bracket found, no reply message sent.");
 80a0732:	f001 ff93 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0736:	4915      	ldr	r1, [pc, #84]	; (80a078c <_Z14TryGetMessagesv.part.0+0x2b0>)
 80a0738:	f001 fad0 	bl	80a1cdc <_ZN5Print7printlnEPKc>
 80a073c:	e7cc      	b.n	80a06d8 <_Z14TryGetMessagesv.part.0+0x1fc>
      Serial.println("recv failed");
 80a073e:	f001 ff8d 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0742:	4913      	ldr	r1, [pc, #76]	; (80a0790 <_Z14TryGetMessagesv.part.0+0x2b4>)
 80a0744:	f001 faca 	bl	80a1cdc <_ZN5Print7printlnEPKc>
 80a0748:	e7cd      	b.n	80a06e6 <_Z14TryGetMessagesv.part.0+0x20a>
 80a074a:	bf00      	nop
 80a074c:	200006dc 	.word	0x200006dc
 80a0750:	20000000 	.word	0x20000000
 80a0754:	080a364b 	.word	0x080a364b
 80a0758:	080a3659 	.word	0x080a3659
 80a075c:	080a367f 	.word	0x080a367f
 80a0760:	080a365b 	.word	0x080a365b
 80a0764:	080a365e 	.word	0x080a365e
 80a0768:	080a3661 	.word	0x080a3661
 80a076c:	080a366a 	.word	0x080a366a
 80a0770:	20000088 	.word	0x20000088
 80a0774:	080a366d 	.word	0x080a366d
 80a0778:	20000098 	.word	0x20000098
 80a077c:	080a3681 	.word	0x080a3681
 80a0780:	080a35e2 	.word	0x080a35e2
 80a0784:	080a36b1 	.word	0x080a36b1
 80a0788:	080a36b8 	.word	0x080a36b8
 80a078c:	080a36c6 	.word	0x080a36c6
 80a0790:	080a36fc 	.word	0x080a36fc

080a0794 <_Z14TryGetMessagesv>:
{
 80a0794:	b508      	push	{r3, lr}
  if (rf95.available())
 80a0796:	4804      	ldr	r0, [pc, #16]	; (80a07a8 <_Z14TryGetMessagesv+0x14>)
 80a0798:	f000 fa4f 	bl	80a0c3a <_ZN7RH_RF959availableEv>
 80a079c:	b118      	cbz	r0, 80a07a6 <_Z14TryGetMessagesv+0x12>
}
 80a079e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a07a2:	f7ff be9b 	b.w	80a04dc <_Z14TryGetMessagesv.part.0>
 80a07a6:	bd08      	pop	{r3, pc}
 80a07a8:	200006dc 	.word	0x200006dc

080a07ac <loop>:
{
 80a07ac:	b508      	push	{r3, lr}
  TryGetMessages();
 80a07ae:	f7ff fff1 	bl	80a0794 <_Z14TryGetMessagesv>
  TrySendQue();
 80a07b2:	f7ff fd2d 	bl	80a0210 <_Z10TrySendQuev>
}
 80a07b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  TryGetMessages();
 80a07ba:	f7ff bfeb 	b.w	80a0794 <_Z14TryGetMessagesv>

080a07be <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
 80a07be:	2001      	movs	r0, #1
 80a07c0:	4770      	bx	lr

080a07c2 <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
 80a07c2:	b510      	push	{r4, lr}
 80a07c4:	4604      	mov	r4, r0
    while (!available())
 80a07c6:	6823      	ldr	r3, [r4, #0]
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	685b      	ldr	r3, [r3, #4]
 80a07cc:	4798      	blx	r3
 80a07ce:	2800      	cmp	r0, #0
 80a07d0:	d0f9      	beq.n	80a07c6 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
 80a07d2:	bd10      	pop	{r4, pc}

080a07d4 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
 80a07d4:	7903      	ldrb	r3, [r0, #4]
 80a07d6:	2b03      	cmp	r3, #3
 80a07d8:	d0fc      	beq.n	80a07d4 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
 80a07da:	2001      	movs	r0, #1
 80a07dc:	4770      	bx	lr

080a07de <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
 80a07de:	7181      	strb	r1, [r0, #6]
}
 80a07e0:	4770      	bx	lr

080a07e2 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
 80a07e2:	7141      	strb	r1, [r0, #5]
}
 80a07e4:	4770      	bx	lr

080a07e6 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
 80a07e6:	72c1      	strb	r1, [r0, #11]
}
 80a07e8:	4770      	bx	lr

080a07ea <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
 80a07ea:	7301      	strb	r1, [r0, #12]
}
 80a07ec:	4770      	bx	lr

080a07ee <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
 80a07ee:	7341      	strb	r1, [r0, #13]
}
 80a07f0:	4770      	bx	lr

080a07f2 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
 80a07f2:	7b83      	ldrb	r3, [r0, #14]
 80a07f4:	ea23 0302 	bic.w	r3, r3, r2
    _txHeaderFlags |= set;
 80a07f8:	4319      	orrs	r1, r3
 80a07fa:	7381      	strb	r1, [r0, #14]
}
 80a07fc:	4770      	bx	lr

080a07fe <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
 80a07fe:	79c0      	ldrb	r0, [r0, #7]
}
 80a0800:	4770      	bx	lr

080a0802 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
 80a0802:	7a00      	ldrb	r0, [r0, #8]
}
 80a0804:	4770      	bx	lr

080a0806 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
 80a0806:	7a40      	ldrb	r0, [r0, #9]
}
 80a0808:	4770      	bx	lr

080a080a <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
 80a080a:	7a80      	ldrb	r0, [r0, #10]
}
 80a080c:	4770      	bx	lr

080a080e <_ZN15RHGenericDriver5sleepEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
 80a080e:	2000      	movs	r0, #0
 80a0810:	4770      	bx	lr

080a0812 <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
 80a0812:	b570      	push	{r4, r5, r6, lr}
 80a0814:	4604      	mov	r4, r0
 80a0816:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0818:	f000 fc48 	bl	80a10ac <HAL_Timer_Get_Milli_Seconds>
 80a081c:	4605      	mov	r5, r0
 80a081e:	f000 fc45 	bl	80a10ac <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 80a0822:	1b40      	subs	r0, r0, r5
 80a0824:	42b0      	cmp	r0, r6
 80a0826:	d206      	bcs.n	80a0836 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
 80a0828:	6823      	ldr	r3, [r4, #0]
 80a082a:	4620      	mov	r0, r4
 80a082c:	685b      	ldr	r3, [r3, #4]
 80a082e:	4798      	blx	r3
 80a0830:	2800      	cmp	r0, #0
 80a0832:	d0f4      	beq.n	80a081e <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
 80a0834:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a0836:	2000      	movs	r0, #0
 80a0838:	e7fc      	b.n	80a0834 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

080a083a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
 80a083a:	b570      	push	{r4, r5, r6, lr}
 80a083c:	4604      	mov	r4, r0
 80a083e:	460e      	mov	r6, r1
 80a0840:	f000 fc34 	bl	80a10ac <HAL_Timer_Get_Milli_Seconds>
 80a0844:	4605      	mov	r5, r0
 80a0846:	f000 fc31 	bl	80a10ac <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
 80a084a:	1b40      	subs	r0, r0, r5
 80a084c:	42b0      	cmp	r0, r6
 80a084e:	d204      	bcs.n	80a085a <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
 80a0850:	7923      	ldrb	r3, [r4, #4]
 80a0852:	2b03      	cmp	r3, #3
 80a0854:	d0f7      	beq.n	80a0846 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
 80a0856:	2001      	movs	r0, #1
}
 80a0858:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80a085a:	2000      	movs	r0, #0
 80a085c:	e7fc      	b.n	80a0858 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>
	...

080a0860 <_ZN15RHGenericDriverC1Ev>:
    _txGood(0)
 80a0860:	4a06      	ldr	r2, [pc, #24]	; (80a087c <_ZN15RHGenericDriverC1Ev+0x1c>)
 80a0862:	21ff      	movs	r1, #255	; 0xff
 80a0864:	6002      	str	r2, [r0, #0]
 80a0866:	2200      	movs	r2, #0
 80a0868:	7141      	strb	r1, [r0, #5]
 80a086a:	7102      	strb	r2, [r0, #4]
 80a086c:	72c1      	strb	r1, [r0, #11]
 80a086e:	8202      	strh	r2, [r0, #16]
 80a0870:	8181      	strh	r1, [r0, #12]
 80a0872:	8242      	strh	r2, [r0, #18]
 80a0874:	7382      	strb	r2, [r0, #14]
 80a0876:	8282      	strh	r2, [r0, #20]
}
 80a0878:	4770      	bx	lr
 80a087a:	bf00      	nop
 80a087c:	080a3724 	.word	0x080a3724

080a0880 <_ZN15RHGenericDriver8lastRssiEv>:
    return _lastRssi;
 80a0880:	7bc0      	ldrb	r0, [r0, #15]
}
 80a0882:	b240      	sxtb	r0, r0
 80a0884:	4770      	bx	lr

080a0886 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// \param[in] frequency The data rate to use: one of RHGenericSPI::Frequency
    virtual void setFrequency(Frequency frequency);

    // Try to add SPI Transaction support
    // Note: Maybe add some way to set SPISettings?
    virtual void beginTransaction() {};
 80a0886:	4770      	bx	lr

080a0888 <_ZN12RHGenericSPI14endTransactionEv>:
    virtual void endTransaction() {};
 80a0888:	4770      	bx	lr

080a088a <_ZN13RHHardwareSPI15attachInterruptEv>:
void RHHardwareSPI::attachInterrupt() 
{
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO)
    SPI.attachInterrupt();
#endif
}
 80a088a:	4770      	bx	lr

080a088c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a088c:	b510      	push	{r4, lr}
 80a088e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0890:	6880      	ldr	r0, [r0, #8]
 80a0892:	b108      	cbz	r0, 80a0898 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0894:	f000 fc6a 	bl	80a116c <os_mutex_recursive_destroy>
 80a0898:	4620      	mov	r0, r4
 80a089a:	bd10      	pop	{r4, pc}

080a089c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 80a089c:	b510      	push	{r4, lr}
 80a089e:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
 80a08a0:	f000 f890 	bl	80a09c4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
 80a08a4:	4b01      	ldr	r3, [pc, #4]	; (80a08ac <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x10>)
}
 80a08a6:	4620      	mov	r0, r4
    RHGenericSPI(frequency, bitOrder, dataMode)
 80a08a8:	6023      	str	r3, [r4, #0]
}
 80a08aa:	bd10      	pop	{r4, pc}
 80a08ac:	080a3784 	.word	0x080a3784

080a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a08b0:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a08b2:	4d0c      	ldr	r5, [pc, #48]	; (80a08e4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a08b4:	7829      	ldrb	r1, [r5, #0]
 80a08b6:	f3bf 8f5b 	dmb	ish
 80a08ba:	f011 0401 	ands.w	r4, r1, #1
 80a08be:	d10f      	bne.n	80a08e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a08c0:	4628      	mov	r0, r5
 80a08c2:	f7ff fbfb 	bl	80a00bc <__cxa_guard_acquire>
 80a08c6:	b158      	cbz	r0, 80a08e0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a08c8:	4621      	mov	r1, r4
 80a08ca:	4807      	ldr	r0, [pc, #28]	; (80a08e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a08cc:	f000 fe7f 	bl	80a15ce <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a08d0:	4628      	mov	r0, r5
 80a08d2:	f7ff fbf8 	bl	80a00c6 <__cxa_guard_release>
 80a08d6:	4a05      	ldr	r2, [pc, #20]	; (80a08ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80a08d8:	4905      	ldr	r1, [pc, #20]	; (80a08f0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80a08da:	4803      	ldr	r0, [pc, #12]	; (80a08e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a08dc:	f002 f9b8 	bl	80a2c50 <__aeabi_atexit>
        return instance;
    }
 80a08e0:	4801      	ldr	r0, [pc, #4]	; (80a08e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a08e2:	bd38      	pop	{r3, r4, r5, pc}
 80a08e4:	20000818 	.word	0x20000818
 80a08e8:	2000081c 	.word	0x2000081c
 80a08ec:	20000070 	.word	0x20000070
 80a08f0:	080a088d 	.word	0x080a088d

080a08f4 <_ZN13RHHardwareSPI8transferEh>:
{
 80a08f4:	b510      	push	{r4, lr}
 80a08f6:	460c      	mov	r4, r1
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a08f8:	f7ff ffda 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a08fc:	4621      	mov	r1, r4
}
 80a08fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0902:	f000 beeb 	b.w	80a16dc <_ZN8SPIClass8transferEh>

080a0906 <_ZN13RHHardwareSPI3endEv>:
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif
}

void RHHardwareSPI::end() 
{
 80a0906:	b508      	push	{r3, lr}
        instance().end();
 80a0908:	f7ff ffd2 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
 80a090c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0910:	f000 be7a 	b.w	80a1608 <_ZN8SPIClass3endEv>

080a0914 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE13setClockSpeedEjj.isra.0.constprop.0>:
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
 80a0914:	b510      	push	{r4, lr}
 80a0916:	4604      	mov	r4, r0
        return instance().setClockSpeed(value, scale);
 80a0918:	f7ff ffca 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a091c:	4621      	mov	r1, r4
    }
 80a091e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().setClockSpeed(value, scale);
 80a0922:	4a01      	ldr	r2, [pc, #4]	; (80a0928 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE13setClockSpeedEjj.isra.0.constprop.0+0x14>)
 80a0924:	f000 beae 	b.w	80a1684 <_ZN8SPIClass13setClockSpeedEjj>
 80a0928:	000f4240 	.word	0x000f4240

080a092c <_ZN13RHHardwareSPI5beginEv>:
{
 80a092c:	b538      	push	{r3, r4, r5, lr}
 80a092e:	4605      	mov	r5, r0
    Serial.println("HERE");
 80a0930:	f001 fe94 	bl	80a265c <_Z16_fetch_usbserialv>
 80a0934:	491a      	ldr	r1, [pc, #104]	; (80a09a0 <_ZN13RHHardwareSPI5beginEv+0x74>)
 80a0936:	f001 f9d1 	bl	80a1cdc <_ZN5Print7printlnEPKc>
    if (_dataMode == DataMode0)
 80a093a:	79ac      	ldrb	r4, [r5, #6]
 80a093c:	b134      	cbz	r4, 80a094c <_ZN13RHHardwareSPI5beginEv+0x20>
    else if (_dataMode == DataMode1)
 80a093e:	2c01      	cmp	r4, #1
 80a0940:	d004      	beq.n	80a094c <_ZN13RHHardwareSPI5beginEv+0x20>
    else if (_dataMode == DataMode2)
 80a0942:	2c02      	cmp	r4, #2
 80a0944:	d002      	beq.n	80a094c <_ZN13RHHardwareSPI5beginEv+0x20>
	dataMode = SPI_MODE0;
 80a0946:	2c03      	cmp	r4, #3
 80a0948:	bf18      	it	ne
 80a094a:	2400      	movne	r4, #0
        instance().setDataMode(mode);
 80a094c:	f7ff ffb0 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0950:	4621      	mov	r1, r4
 80a0952:	f000 fe73 	bl	80a163c <_ZN8SPIClass11setDataModeEh>
    if (_bitOrder == BitOrderLSBFirst)
 80a0956:	796b      	ldrb	r3, [r5, #5]
 80a0958:	2b01      	cmp	r3, #1
 80a095a:	d10c      	bne.n	80a0976 <_ZN13RHHardwareSPI5beginEv+0x4a>
        instance().setBitOrder(order);
 80a095c:	f7ff ffa8 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a0960:	2100      	movs	r1, #0
 80a0962:	f000 fe5d 	bl	80a1620 <_ZN8SPIClass11setBitOrderEh>
    switch (_frequency)
 80a0966:	792b      	ldrb	r3, [r5, #4]
 80a0968:	3b01      	subs	r3, #1
 80a096a:	2b03      	cmp	r3, #3
 80a096c:	d807      	bhi.n	80a097e <_ZN13RHHardwareSPI5beginEv+0x52>
 80a096e:	e8df f003 	tbb	[pc, r3]
 80a0972:	110f      	.short	0x110f
 80a0974:	1513      	.short	0x1513
 80a0976:	f7ff ff9b 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a097a:	2101      	movs	r1, #1
 80a097c:	e7f1      	b.n	80a0962 <_ZN13RHHardwareSPI5beginEv+0x36>
	    SPI.setClockSpeed(1, MHZ);
 80a097e:	2001      	movs	r0, #1
	    SPI.setClockSpeed(16, MHZ);
 80a0980:	f7ff ffc8 	bl	80a0914 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE13setClockSpeedEjj.isra.0.constprop.0>
        instance().begin();
 80a0984:	f7ff ff94 	bl	80a08b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
 80a0988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a098c:	f000 be2e 	b.w	80a15ec <_ZN8SPIClass5beginEv>
	    SPI.setClockSpeed(2, MHZ);
 80a0990:	2002      	movs	r0, #2
 80a0992:	e7f5      	b.n	80a0980 <_ZN13RHHardwareSPI5beginEv+0x54>
	    SPI.setClockSpeed(4, MHZ);
 80a0994:	2004      	movs	r0, #4
 80a0996:	e7f3      	b.n	80a0980 <_ZN13RHHardwareSPI5beginEv+0x54>
	    SPI.setClockSpeed(8, MHZ);
 80a0998:	2008      	movs	r0, #8
 80a099a:	e7f1      	b.n	80a0980 <_ZN13RHHardwareSPI5beginEv+0x54>
	    SPI.setClockSpeed(16, MHZ);
 80a099c:	2010      	movs	r0, #16
 80a099e:	e7ef      	b.n	80a0980 <_ZN13RHHardwareSPI5beginEv+0x54>
 80a09a0:	080a3774 	.word	0x080a3774

080a09a4 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
 80a09a4:	2300      	movs	r3, #0
 80a09a6:	4802      	ldr	r0, [pc, #8]	; (80a09b0 <_GLOBAL__sub_I_hardware_spi+0xc>)
 80a09a8:	461a      	mov	r2, r3
 80a09aa:	4619      	mov	r1, r3
 80a09ac:	f7ff bf76 	b.w	80a089c <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
 80a09b0:	20000828 	.word	0x20000828

080a09b4 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual void attachInterrupt() {};
 80a09b4:	4770      	bx	lr

080a09b6 <_ZN12RHGenericSPI15detachInterruptEv>:
    virtual void detachInterrupt() {};
 80a09b6:	4770      	bx	lr

080a09b8 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
 80a09b8:	7141      	strb	r1, [r0, #5]
}
 80a09ba:	4770      	bx	lr

080a09bc <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
 80a09bc:	7181      	strb	r1, [r0, #6]
}
 80a09be:	4770      	bx	lr

080a09c0 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
 80a09c0:	7101      	strb	r1, [r0, #4]
}
 80a09c2:	4770      	bx	lr

080a09c4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
 80a09c4:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
 80a09c6:	4d03      	ldr	r5, [pc, #12]	; (80a09d4 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
 80a09c8:	7101      	strb	r1, [r0, #4]
 80a09ca:	6005      	str	r5, [r0, #0]
 80a09cc:	7142      	strb	r2, [r0, #5]
 80a09ce:	7183      	strb	r3, [r0, #6]
}
 80a09d0:	bd30      	pop	{r4, r5, pc}
 80a09d2:	bf00      	nop
 80a09d4:	080a37b4 	.word	0x080a37b4

080a09d8 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
 80a09d8:	20fb      	movs	r0, #251	; 0xfb
 80a09da:	4770      	bx	lr

080a09dc <_ZN7RH_RF955sleepEv>:
	_mode = RHModeIdle;
    }
}

bool RH_RF95::sleep()
{
 80a09dc:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
 80a09de:	7903      	ldrb	r3, [r0, #4]
{
 80a09e0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
 80a09e2:	2b01      	cmp	r3, #1
 80a09e4:	d005      	beq.n	80a09f2 <_ZN7RH_RF955sleepEv+0x16>
    {
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
 80a09e6:	2200      	movs	r2, #0
 80a09e8:	2101      	movs	r1, #1
 80a09ea:	f000 fa9e 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
 80a09ee:	2301      	movs	r3, #1
 80a09f0:	7123      	strb	r3, [r4, #4]
    }
    return true;
}
 80a09f2:	2001      	movs	r0, #1
 80a09f4:	bd10      	pop	{r4, pc}
	...

080a09f8 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
 80a09f8:	b538      	push	{r3, r4, r5, lr}
 80a09fa:	4604      	mov	r4, r0
 80a09fc:	4615      	mov	r5, r2
    _rxBufValid(0)
 80a09fe:	461a      	mov	r2, r3
 80a0a00:	f000 fa5e 	bl	80a0ec0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
 80a0a04:	4b04      	ldr	r3, [pc, #16]	; (80a0a18 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x20>)
}
 80a0a06:	4620      	mov	r0, r4
    _rxBufValid(0)
 80a0a08:	6023      	str	r3, [r4, #0]
 80a0a0a:	2300      	movs	r3, #0
 80a0a0c:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    _myInterruptIndex = 0xff; // Not allocated yet
 80a0a10:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
 80a0a12:	7765      	strb	r5, [r4, #29]
    _myInterruptIndex = 0xff; // Not allocated yet
 80a0a14:	77a3      	strb	r3, [r4, #30]
}
 80a0a16:	bd38      	pop	{r3, r4, r5, pc}
 80a0a18:	080a37f4 	.word	0x080a37f4

080a0a1c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
 80a0a1c:	7fc3      	ldrb	r3, [r0, #31]
 80a0a1e:	2b03      	cmp	r3, #3
 80a0a20:	d91b      	bls.n	80a0a5a <_ZN7RH_RF9513validateRxBufEv+0x3e>
    _rxHeaderTo    = _buf[0];
 80a0a22:	f890 3020 	ldrb.w	r3, [r0, #32]
 80a0a26:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
 80a0a28:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80a0a2c:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
 80a0a2e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80a0a32:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
 80a0a34:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80a0a38:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
 80a0a3a:	7983      	ldrb	r3, [r0, #6]
 80a0a3c:	b933      	cbnz	r3, 80a0a4c <_ZN7RH_RF9513validateRxBufEv+0x30>
 80a0a3e:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
 80a0a40:	7942      	ldrb	r2, [r0, #5]
 80a0a42:	429a      	cmp	r2, r3
 80a0a44:	d002      	beq.n	80a0a4c <_ZN7RH_RF9513validateRxBufEv+0x30>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
 80a0a46:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
 80a0a48:	2bff      	cmp	r3, #255	; 0xff
 80a0a4a:	d106      	bne.n	80a0a5a <_ZN7RH_RF9513validateRxBufEv+0x3e>
	_rxGood++;
 80a0a4c:	8a43      	ldrh	r3, [r0, #18]
 80a0a4e:	3301      	adds	r3, #1
 80a0a50:	b29b      	uxth	r3, r3
 80a0a52:	8243      	strh	r3, [r0, #18]
	_rxBufValid = true;
 80a0a54:	2301      	movs	r3, #1
 80a0a56:	f880 311f 	strb.w	r3, [r0, #287]	; 0x11f
}
 80a0a5a:	4770      	bx	lr

080a0a5c <_ZN7RH_RF9510clearRxBufEv>:
{
 80a0a5c:	b510      	push	{r4, lr}
 80a0a5e:	4604      	mov	r4, r0
    ATOMIC_BLOCK_START;
 80a0a60:	f000 fb2c 	bl	80a10bc <HAL_disable_irq>
    _rxBufValid = false;
 80a0a64:	2300      	movs	r3, #0
 80a0a66:	f884 311f 	strb.w	r3, [r4, #287]	; 0x11f
    _bufLen = 0;
 80a0a6a:	77e3      	strb	r3, [r4, #31]
}
 80a0a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ATOMIC_BLOCK_END;
 80a0a70:	f000 bb2c 	b.w	80a10cc <HAL_enable_irq>

080a0a74 <_ZN7RH_RF954recvEPhS0_>:
{
 80a0a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!available())
 80a0a78:	6803      	ldr	r3, [r0, #0]
{
 80a0a7a:	4604      	mov	r4, r0
    if (!available())
 80a0a7c:	685b      	ldr	r3, [r3, #4]
{
 80a0a7e:	460f      	mov	r7, r1
 80a0a80:	4615      	mov	r5, r2
    if (!available())
 80a0a82:	4798      	blx	r3
 80a0a84:	4606      	mov	r6, r0
 80a0a86:	b1c8      	cbz	r0, 80a0abc <_ZN7RH_RF954recvEPhS0_+0x48>
    if (buf && len)
 80a0a88:	b1af      	cbz	r7, 80a0ab6 <_ZN7RH_RF954recvEPhS0_+0x42>
 80a0a8a:	b1a5      	cbz	r5, 80a0ab6 <_ZN7RH_RF954recvEPhS0_+0x42>
	ATOMIC_BLOCK_START;
 80a0a8c:	f000 fb16 	bl	80a10bc <HAL_disable_irq>
 80a0a90:	4680      	mov	r8, r0
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
 80a0a92:	7fe3      	ldrb	r3, [r4, #31]
 80a0a94:	782a      	ldrb	r2, [r5, #0]
 80a0a96:	3b03      	subs	r3, #3
 80a0a98:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 80a0a9a:	bfd8      	it	le
 80a0a9c:	7fe3      	ldrble	r3, [r4, #31]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 80a0a9e:	4638      	mov	r0, r7
	    *len = _bufLen-RH_RF95_HEADER_LEN;
 80a0aa0:	bfdc      	itt	le
 80a0aa2:	3b04      	suble	r3, #4
 80a0aa4:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
 80a0aa6:	782a      	ldrb	r2, [r5, #0]
 80a0aa8:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80a0aac:	f002 fcd8 	bl	80a3460 <memcpy>
	ATOMIC_BLOCK_END;
 80a0ab0:	4640      	mov	r0, r8
 80a0ab2:	f000 fb0b 	bl	80a10cc <HAL_enable_irq>
    clearRxBuf(); // This message accepted and cleared
 80a0ab6:	4620      	mov	r0, r4
 80a0ab8:	f7ff ffd0 	bl	80a0a5c <_ZN7RH_RF9510clearRxBufEv>
}
 80a0abc:	4630      	mov	r0, r6
 80a0abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0ac2:	0000      	movs	r0, r0
 80a0ac4:	0000      	movs	r0, r0
	...

080a0ac8 <_ZN7RH_RF9512setFrequencyEf>:
{
 80a0ac8:	b538      	push	{r3, r4, r5, lr}
 80a0aca:	4604      	mov	r4, r0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
 80a0acc:	4608      	mov	r0, r1
 80a0ace:	f002 fa2f 	bl	80a2f30 <__aeabi_f2d>
 80a0ad2:	a311      	add	r3, pc, #68	; (adr r3, 80a0b18 <_ZN7RH_RF9512setFrequencyEf+0x50>)
 80a0ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ad8:	f002 fa82 	bl	80a2fe0 <__aeabi_dmul>
 80a0adc:	a310      	add	r3, pc, #64	; (adr r3, 80a0b20 <_ZN7RH_RF9512setFrequencyEf+0x58>)
 80a0ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ae2:	f002 fba7 	bl	80a3234 <__aeabi_ddiv>
 80a0ae6:	f002 fc8d 	bl	80a3404 <__aeabi_d2uiz>
 80a0aea:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 80a0aec:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80a0af0:	2106      	movs	r1, #6
 80a0af2:	4620      	mov	r0, r4
 80a0af4:	f000 fa19 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 80a0af8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80a0afc:	2107      	movs	r1, #7
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	f000 fa13 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 80a0b04:	2108      	movs	r1, #8
 80a0b06:	4620      	mov	r0, r4
 80a0b08:	b2ea      	uxtb	r2, r5
 80a0b0a:	f000 fa0e 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
}
 80a0b0e:	2001      	movs	r0, #1
 80a0b10:	bd38      	pop	{r3, r4, r5, pc}
 80a0b12:	bf00      	nop
 80a0b14:	f3af 8000 	nop.w
 80a0b18:	00000000 	.word	0x00000000
 80a0b1c:	412e8480 	.word	0x412e8480
 80a0b20:	00000000 	.word	0x00000000
 80a0b24:	404e8480 	.word	0x404e8480

080a0b28 <_ZN7RH_RF9511setModeIdleEv>:
{
 80a0b28:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
 80a0b2a:	7903      	ldrb	r3, [r0, #4]
{
 80a0b2c:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
 80a0b2e:	2b02      	cmp	r3, #2
 80a0b30:	d005      	beq.n	80a0b3e <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
 80a0b32:	2201      	movs	r2, #1
 80a0b34:	4611      	mov	r1, r2
 80a0b36:	f000 f9f8 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
 80a0b3a:	2302      	movs	r3, #2
 80a0b3c:	7123      	strb	r3, [r4, #4]
}
 80a0b3e:	bd10      	pop	{r4, pc}

080a0b40 <_ZN7RH_RF9515handleInterruptEv>:
{
 80a0b40:	b538      	push	{r3, r4, r5, lr}
 80a0b42:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
 80a0b44:	2112      	movs	r1, #18
 80a0b46:	f000 f9c9 	bl	80a0edc <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx && irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
 80a0b4a:	7923      	ldrb	r3, [r4, #4]
 80a0b4c:	2b04      	cmp	r3, #4
 80a0b4e:	d10d      	bne.n	80a0b6c <_ZN7RH_RF9515handleInterruptEv+0x2c>
 80a0b50:	f010 0fa0 	tst.w	r0, #160	; 0xa0
 80a0b54:	d00a      	beq.n	80a0b6c <_ZN7RH_RF9515handleInterruptEv+0x2c>
	_rxBad++;
 80a0b56:	8a23      	ldrh	r3, [r4, #16]
 80a0b58:	3301      	adds	r3, #1
 80a0b5a:	b29b      	uxth	r3, r3
 80a0b5c:	8223      	strh	r3, [r4, #16]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0b5e:	4620      	mov	r0, r4
}
 80a0b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0b64:	22ff      	movs	r2, #255	; 0xff
 80a0b66:	2112      	movs	r1, #18
 80a0b68:	f000 b9df 	b.w	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
 80a0b6c:	7923      	ldrb	r3, [r4, #4]
 80a0b6e:	2b04      	cmp	r3, #4
 80a0b70:	d101      	bne.n	80a0b76 <_ZN7RH_RF9515handleInterruptEv+0x36>
 80a0b72:	0642      	lsls	r2, r0, #25
 80a0b74:	d409      	bmi.n	80a0b8a <_ZN7RH_RF9515handleInterruptEv+0x4a>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
 80a0b76:	7923      	ldrb	r3, [r4, #4]
 80a0b78:	2b03      	cmp	r3, #3
 80a0b7a:	d1f0      	bne.n	80a0b5e <_ZN7RH_RF9515handleInterruptEv+0x1e>
 80a0b7c:	0703      	lsls	r3, r0, #28
 80a0b7e:	d5ee      	bpl.n	80a0b5e <_ZN7RH_RF9515handleInterruptEv+0x1e>
	_txGood++;
 80a0b80:	8aa3      	ldrh	r3, [r4, #20]
 80a0b82:	3301      	adds	r3, #1
 80a0b84:	b29b      	uxth	r3, r3
 80a0b86:	82a3      	strh	r3, [r4, #20]
 80a0b88:	e028      	b.n	80a0bdc <_ZN7RH_RF9515handleInterruptEv+0x9c>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 80a0b8a:	2113      	movs	r1, #19
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	f000 f9a5 	bl	80a0edc <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80a0b92:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
 80a0b94:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80a0b96:	4620      	mov	r0, r4
 80a0b98:	f000 f9a0 	bl	80a0edc <_ZN11RHSPIDriver7spiReadEh>
 80a0b9c:	210d      	movs	r1, #13
 80a0b9e:	4602      	mov	r2, r0
 80a0ba0:	4620      	mov	r0, r4
 80a0ba2:	f000 f9c2 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
 80a0ba6:	462b      	mov	r3, r5
 80a0ba8:	2100      	movs	r1, #0
 80a0baa:	f104 0220 	add.w	r2, r4, #32
 80a0bae:	4620      	mov	r0, r4
 80a0bb0:	f000 f9e3 	bl	80a0f7a <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0bb4:	22ff      	movs	r2, #255	; 0xff
 80a0bb6:	2112      	movs	r1, #18
 80a0bb8:	4620      	mov	r0, r4
	_bufLen = len;
 80a0bba:	77e5      	strb	r5, [r4, #31]
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
 80a0bbc:	f000 f9b5 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE) - 137;
 80a0bc0:	211a      	movs	r1, #26
 80a0bc2:	4620      	mov	r0, r4
 80a0bc4:	f000 f98a 	bl	80a0edc <_ZN11RHSPIDriver7spiReadEh>
 80a0bc8:	3077      	adds	r0, #119	; 0x77
 80a0bca:	b240      	sxtb	r0, r0
 80a0bcc:	73e0      	strb	r0, [r4, #15]
	validateRxBuf(); 
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	f7ff ff24 	bl	80a0a1c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
 80a0bd4:	f894 311f 	ldrb.w	r3, [r4, #287]	; 0x11f
 80a0bd8:	2b00      	cmp	r3, #0
 80a0bda:	d0c0      	beq.n	80a0b5e <_ZN7RH_RF9515handleInterruptEv+0x1e>
	setModeIdle();
 80a0bdc:	4620      	mov	r0, r4
 80a0bde:	f7ff ffa3 	bl	80a0b28 <_ZN7RH_RF9511setModeIdleEv>
 80a0be2:	e7bc      	b.n	80a0b5e <_ZN7RH_RF9515handleInterruptEv+0x1e>

080a0be4 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
 80a0be4:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <_ZN7RH_RF954isr0Ev+0xc>)
 80a0be6:	6818      	ldr	r0, [r3, #0]
 80a0be8:	b108      	cbz	r0, 80a0bee <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
 80a0bea:	f7ff bfa9 	b.w	80a0b40 <_ZN7RH_RF9515handleInterruptEv>
}
 80a0bee:	4770      	bx	lr
 80a0bf0:	20000834 	.word	0x20000834

080a0bf4 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
 80a0bf4:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <_ZN7RH_RF954isr1Ev+0xc>)
 80a0bf6:	6858      	ldr	r0, [r3, #4]
 80a0bf8:	b108      	cbz	r0, 80a0bfe <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
 80a0bfa:	f7ff bfa1 	b.w	80a0b40 <_ZN7RH_RF9515handleInterruptEv>
}
 80a0bfe:	4770      	bx	lr
 80a0c00:	20000834 	.word	0x20000834

080a0c04 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
 80a0c04:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <_ZN7RH_RF954isr2Ev+0xc>)
 80a0c06:	6898      	ldr	r0, [r3, #8]
 80a0c08:	b108      	cbz	r0, 80a0c0e <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
 80a0c0a:	f7ff bf99 	b.w	80a0b40 <_ZN7RH_RF9515handleInterruptEv>
}
 80a0c0e:	4770      	bx	lr
 80a0c10:	20000834 	.word	0x20000834

080a0c14 <_ZN7RH_RF959setModeRxEv>:

void RH_RF95::setModeRx()
{
 80a0c14:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
 80a0c16:	7903      	ldrb	r3, [r0, #4]
{
 80a0c18:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
 80a0c1a:	2b04      	cmp	r3, #4
 80a0c1c:	d00c      	beq.n	80a0c38 <_ZN7RH_RF959setModeRxEv+0x24>
    {
       //Serial.println("SetModeRx");
       _mode = RHModeRx;
 80a0c1e:	2304      	movs	r3, #4
	   spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 80a0c20:	2205      	movs	r2, #5
 80a0c22:	2101      	movs	r1, #1
       _mode = RHModeRx;
 80a0c24:	7103      	strb	r3, [r0, #4]
	   spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
 80a0c26:	f000 f980 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	   spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 80a0c2a:	4620      	mov	r0, r4
    }
}
 80a0c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	   spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 80a0c30:	2200      	movs	r2, #0
 80a0c32:	2140      	movs	r1, #64	; 0x40
 80a0c34:	f000 b979 	b.w	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
}
 80a0c38:	bd10      	pop	{r4, pc}

080a0c3a <_ZN7RH_RF959availableEv>:
{
 80a0c3a:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
 80a0c3c:	7903      	ldrb	r3, [r0, #4]
{
 80a0c3e:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
 80a0c40:	2b03      	cmp	r3, #3
 80a0c42:	d005      	beq.n	80a0c50 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
 80a0c44:	f7ff ffe6 	bl	80a0c14 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
 80a0c48:	f894 011f 	ldrb.w	r0, [r4, #287]	; 0x11f
 80a0c4c:	b2c0      	uxtb	r0, r0
}
 80a0c4e:	bd10      	pop	{r4, pc}
	return false;
 80a0c50:	2000      	movs	r0, #0
 80a0c52:	e7fc      	b.n	80a0c4e <_ZN7RH_RF959availableEv+0x14>

080a0c54 <_ZN7RH_RF959setModeTxEv>:

void RH_RF95::setModeTx()
{
 80a0c54:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
 80a0c56:	7903      	ldrb	r3, [r0, #4]
{
 80a0c58:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
 80a0c5a:	2b03      	cmp	r3, #3
 80a0c5c:	d00b      	beq.n	80a0c76 <_ZN7RH_RF959setModeTxEv+0x22>
    {
    _mode = RHModeTx;       // set first to avoid possible race condition
 80a0c5e:	2203      	movs	r2, #3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 80a0c60:	2101      	movs	r1, #1
    _mode = RHModeTx;       // set first to avoid possible race condition
 80a0c62:	7102      	strb	r2, [r0, #4]
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
 80a0c64:	f000 f961 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 80a0c68:	2240      	movs	r2, #64	; 0x40
 80a0c6a:	4620      	mov	r0, r4
    }
}
 80a0c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 80a0c70:	4611      	mov	r1, r2
 80a0c72:	f000 b95a 	b.w	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
}
 80a0c76:	bd10      	pop	{r4, pc}

080a0c78 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 80a0c78:	2afb      	cmp	r2, #251	; 0xfb
{
 80a0c7a:	b570      	push	{r4, r5, r6, lr}
 80a0c7c:	4604      	mov	r4, r0
 80a0c7e:	460e      	mov	r6, r1
 80a0c80:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
 80a0c82:	d82f      	bhi.n	80a0ce4 <_ZN7RH_RF954sendEPKhh+0x6c>
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
 80a0c84:	6803      	ldr	r3, [r0, #0]
 80a0c86:	699b      	ldr	r3, [r3, #24]
 80a0c88:	4798      	blx	r3
    setModeIdle();
 80a0c8a:	4620      	mov	r0, r4
 80a0c8c:	f7ff ff4c 	bl	80a0b28 <_ZN7RH_RF9511setModeIdleEv>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 80a0c90:	2200      	movs	r2, #0
 80a0c92:	210d      	movs	r1, #13
 80a0c94:	4620      	mov	r0, r4
 80a0c96:	f000 f948 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
 80a0c9a:	2100      	movs	r1, #0
 80a0c9c:	7ae2      	ldrb	r2, [r4, #11]
 80a0c9e:	4620      	mov	r0, r4
 80a0ca0:	f000 f943 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
 80a0ca4:	2100      	movs	r1, #0
 80a0ca6:	7b22      	ldrb	r2, [r4, #12]
 80a0ca8:	4620      	mov	r0, r4
 80a0caa:	f000 f93e 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
 80a0cae:	2100      	movs	r1, #0
 80a0cb0:	7b62      	ldrb	r2, [r4, #13]
 80a0cb2:	4620      	mov	r0, r4
 80a0cb4:	f000 f939 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
 80a0cb8:	2100      	movs	r1, #0
 80a0cba:	7ba2      	ldrb	r2, [r4, #14]
 80a0cbc:	4620      	mov	r0, r4
 80a0cbe:	f000 f934 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
 80a0cc2:	462b      	mov	r3, r5
 80a0cc4:	4632      	mov	r2, r6
 80a0cc6:	2100      	movs	r1, #0
 80a0cc8:	4620      	mov	r0, r4
 80a0cca:	f000 f987 	bl	80a0fdc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
 80a0cce:	1d2a      	adds	r2, r5, #4
 80a0cd0:	2122      	movs	r1, #34	; 0x22
 80a0cd2:	b2d2      	uxtb	r2, r2
 80a0cd4:	4620      	mov	r0, r4
 80a0cd6:	f000 f928 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
 80a0cda:	4620      	mov	r0, r4
 80a0cdc:	f7ff ffba 	bl	80a0c54 <_ZN7RH_RF959setModeTxEv>
 80a0ce0:	2001      	movs	r0, #1
}
 80a0ce2:	bd70      	pop	{r4, r5, r6, pc}
	return false;
 80a0ce4:	2000      	movs	r0, #0
 80a0ce6:	e7fc      	b.n	80a0ce2 <_ZN7RH_RF954sendEPKhh+0x6a>

080a0ce8 <_ZN7RH_RF9510setTxPowerEab>:

void RH_RF95::setTxPower(int8_t power, bool useRFO)
{
 80a0ce8:	b538      	push	{r3, r4, r5, lr}
 80a0cea:	4605      	mov	r5, r0
 80a0cec:	460c      	mov	r4, r1
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
 80a0cee:	b16a      	cbz	r2, 80a0d0c <_ZN7RH_RF9510setTxPowerEab+0x24>
    {
	if (power > 14)
	    power = 14;
	if (power < -1)
	    power = -1;
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 80a0cf0:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
 80a0cf4:	2a0e      	cmp	r2, #14
 80a0cf6:	bfa8      	it	ge
 80a0cf8:	220e      	movge	r2, #14
 80a0cfa:	2109      	movs	r1, #9
 80a0cfc:	3201      	adds	r2, #1
 80a0cfe:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80a0d02:	b2d2      	uxtb	r2, r2
	// The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
	// but OutputPower claims it would be 17dBm.
	// My measurements show 20dBm is correct
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 80a0d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 80a0d08:	f000 b90f 	b.w	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	if (power > 23)
 80a0d0c:	2917      	cmp	r1, #23
 80a0d0e:	dc11      	bgt.n	80a0d34 <_ZN7RH_RF9510setTxPowerEab+0x4c>
	if (power < 5)
 80a0d10:	2904      	cmp	r1, #4
 80a0d12:	dd11      	ble.n	80a0d38 <_ZN7RH_RF9510setTxPowerEab+0x50>
	if (power > 20)
 80a0d14:	2914      	cmp	r1, #20
 80a0d16:	dd10      	ble.n	80a0d3a <_ZN7RH_RF9510setTxPowerEab+0x52>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 80a0d18:	2207      	movs	r2, #7
 80a0d1a:	214d      	movs	r1, #77	; 0x4d
 80a0d1c:	4628      	mov	r0, r5
 80a0d1e:	f000 f904 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
 80a0d22:	3c03      	subs	r4, #3
 80a0d24:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 80a0d26:	1f62      	subs	r2, r4, #5
 80a0d28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80a0d2c:	2109      	movs	r1, #9
 80a0d2e:	4628      	mov	r0, r5
 80a0d30:	b2d2      	uxtb	r2, r2
 80a0d32:	e7e7      	b.n	80a0d04 <_ZN7RH_RF9510setTxPowerEab+0x1c>
	    power = 23;
 80a0d34:	2417      	movs	r4, #23
 80a0d36:	e7ef      	b.n	80a0d18 <_ZN7RH_RF9510setTxPowerEab+0x30>
	    power = 5;
 80a0d38:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 80a0d3a:	2204      	movs	r2, #4
 80a0d3c:	214d      	movs	r1, #77	; 0x4d
 80a0d3e:	4628      	mov	r0, r5
 80a0d40:	f000 f8f3 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
 80a0d44:	e7ef      	b.n	80a0d26 <_ZN7RH_RF9510setTxPowerEab+0x3e>

080a0d46 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:

// Sets registers from a canned modem configuration structure
void RH_RF95::setModemRegisters(const ModemConfig* config)
{
 80a0d46:	b538      	push	{r3, r4, r5, lr}
 80a0d48:	4605      	mov	r5, r0
 80a0d4a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
 80a0d4c:	780a      	ldrb	r2, [r1, #0]
 80a0d4e:	211d      	movs	r1, #29
 80a0d50:	f000 f8eb 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
 80a0d54:	7862      	ldrb	r2, [r4, #1]
 80a0d56:	211e      	movs	r1, #30
 80a0d58:	4628      	mov	r0, r5
 80a0d5a:	f000 f8e6 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 80a0d5e:	4628      	mov	r0, r5
 80a0d60:	78a2      	ldrb	r2, [r4, #2]
 80a0d62:	2126      	movs	r1, #38	; 0x26
}
 80a0d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
 80a0d68:	f000 b8df 	b.w	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>

080a0d6c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:

// Set one of the canned FSK Modem configs
// Returns true if its a valid choice
bool RH_RF95::setModemConfig(ModemConfigChoice index)
{
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 80a0d6c:	2905      	cmp	r1, #5
{
 80a0d6e:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
 80a0d70:	d80f      	bhi.n	80a0d92 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
        return false;

    ModemConfig cfg;
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 80a0d72:	4b09      	ldr	r3, [pc, #36]	; (80a0d98 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
 80a0d74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a0d78:	185c      	adds	r4, r3, r1
 80a0d7a:	5a5a      	ldrh	r2, [r3, r1]
 80a0d7c:	78a3      	ldrb	r3, [r4, #2]
    setModemRegisters(&cfg);
 80a0d7e:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
 80a0d80:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0d84:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
 80a0d88:	f7ff ffdd 	bl	80a0d46 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>

    return true;
 80a0d8c:	2001      	movs	r0, #1
}
 80a0d8e:	b002      	add	sp, #8
 80a0d90:	bd10      	pop	{r4, pc}
        return false;
 80a0d92:	2000      	movs	r0, #0
 80a0d94:	e7fb      	b.n	80a0d8e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
 80a0d96:	bf00      	nop
 80a0d98:	080a37dc 	.word	0x080a37dc

080a0d9c <_ZN7RH_RF9517setPreambleLengthEt>:

void RH_RF95::setPreambleLength(uint16_t bytes)
{
 80a0d9c:	b538      	push	{r3, r4, r5, lr}
 80a0d9e:	4605      	mov	r5, r0
 80a0da0:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 80a0da2:	0a0a      	lsrs	r2, r1, #8
 80a0da4:	2120      	movs	r1, #32
 80a0da6:	f000 f8c0 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80a0daa:	4628      	mov	r0, r5
 80a0dac:	b2e2      	uxtb	r2, r4
 80a0dae:	2121      	movs	r1, #33	; 0x21
}
 80a0db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80a0db4:	f000 b8b9 	b.w	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>

080a0db8 <_ZN7RH_RF954initEv>:
{
 80a0db8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0dba:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
 80a0dbc:	f000 f86c 	bl	80a0e98 <_ZN11RHSPIDriver4initEv>
 80a0dc0:	4605      	mov	r5, r0
 80a0dc2:	b918      	cbnz	r0, 80a0dcc <_ZN7RH_RF954initEv+0x14>
	return false;
 80a0dc4:	2500      	movs	r5, #0
}
 80a0dc6:	4628      	mov	r0, r5
 80a0dc8:	b002      	add	sp, #8
 80a0dca:	bd70      	pop	{r4, r5, r6, pc}
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80a0dcc:	2280      	movs	r2, #128	; 0x80
 80a0dce:	2101      	movs	r1, #1
 80a0dd0:	4620      	mov	r0, r4
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
 80a0dd2:	7f66      	ldrb	r6, [r4, #29]
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 80a0dd4:	f000 f8a9 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
 80a0dd8:	200a      	movs	r0, #10
 80a0dda:	f001 f815 	bl	80a1e08 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 80a0dde:	2101      	movs	r1, #1
 80a0de0:	4620      	mov	r0, r4
 80a0de2:	f000 f87b 	bl	80a0edc <_ZN11RHSPIDriver7spiReadEh>
 80a0de6:	2880      	cmp	r0, #128	; 0x80
 80a0de8:	d1ec      	bne.n	80a0dc4 <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
 80a0dea:	2100      	movs	r1, #0
 80a0dec:	7f60      	ldrb	r0, [r4, #29]
 80a0dee:	f001 fead 	bl	80a2b4c <pinMode>
    if (_myInterruptIndex == 0xff)
 80a0df2:	7fa3      	ldrb	r3, [r4, #30]
 80a0df4:	2bff      	cmp	r3, #255	; 0xff
 80a0df6:	d106      	bne.n	80a0e06 <_ZN7RH_RF954initEv+0x4e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
 80a0df8:	4a21      	ldr	r2, [pc, #132]	; (80a0e80 <_ZN7RH_RF954initEv+0xc8>)
 80a0dfa:	7813      	ldrb	r3, [r2, #0]
 80a0dfc:	2b03      	cmp	r3, #3
 80a0dfe:	d8e1      	bhi.n	80a0dc4 <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
 80a0e00:	1c59      	adds	r1, r3, #1
 80a0e02:	7011      	strb	r1, [r2, #0]
 80a0e04:	77a3      	strb	r3, [r4, #30]
    _deviceForInterrupt[_myInterruptIndex] = this;
 80a0e06:	7fa2      	ldrb	r2, [r4, #30]
 80a0e08:	4b1e      	ldr	r3, [pc, #120]	; (80a0e84 <_ZN7RH_RF954initEv+0xcc>)
 80a0e0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
 80a0e0e:	bb32      	cbnz	r2, 80a0e5e <_ZN7RH_RF954initEv+0xa6>
	attachInterrupt(interruptNumber, isr0, RISING);
 80a0e10:	9200      	str	r2, [sp, #0]
 80a0e12:	f04f 33ff 	mov.w	r3, #4294967295
 80a0e16:	2201      	movs	r2, #1
 80a0e18:	491b      	ldr	r1, [pc, #108]	; (80a0e88 <_ZN7RH_RF954initEv+0xd0>)
	attachInterrupt(interruptNumber, isr2, RISING);
 80a0e1a:	4630      	mov	r0, r6
 80a0e1c:	f001 fc78 	bl	80a2710 <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 80a0e20:	2200      	movs	r2, #0
 80a0e22:	210e      	movs	r1, #14
 80a0e24:	4620      	mov	r0, r4
 80a0e26:	f000 f880 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 80a0e2a:	2200      	movs	r2, #0
 80a0e2c:	210f      	movs	r1, #15
 80a0e2e:	4620      	mov	r0, r4
 80a0e30:	f000 f87b 	bl	80a0f2a <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
 80a0e34:	4620      	mov	r0, r4
 80a0e36:	f7ff fe77 	bl	80a0b28 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr48Sf512);
 80a0e3a:	2104      	movs	r1, #4
 80a0e3c:	4620      	mov	r0, r4
 80a0e3e:	f7ff ff95 	bl	80a0d6c <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
 80a0e42:	4620      	mov	r0, r4
 80a0e44:	2108      	movs	r1, #8
 80a0e46:	f7ff ffa9 	bl	80a0d9c <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(915.0);
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	490f      	ldr	r1, [pc, #60]	; (80a0e8c <_ZN7RH_RF954initEv+0xd4>)
 80a0e4e:	f7ff fe3b 	bl	80a0ac8 <_ZN7RH_RF9512setFrequencyEf>
    setTxPower(23);
 80a0e52:	2200      	movs	r2, #0
 80a0e54:	2117      	movs	r1, #23
 80a0e56:	4620      	mov	r0, r4
 80a0e58:	f7ff ff46 	bl	80a0ce8 <_ZN7RH_RF9510setTxPowerEab>
    return true;
 80a0e5c:	e7b3      	b.n	80a0dc6 <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
 80a0e5e:	2a01      	cmp	r2, #1
 80a0e60:	f04f 0300 	mov.w	r3, #0
 80a0e64:	d104      	bne.n	80a0e70 <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr1, RISING);
 80a0e66:	9300      	str	r3, [sp, #0]
 80a0e68:	4909      	ldr	r1, [pc, #36]	; (80a0e90 <_ZN7RH_RF954initEv+0xd8>)
 80a0e6a:	f04f 33ff 	mov.w	r3, #4294967295
 80a0e6e:	e7d4      	b.n	80a0e1a <_ZN7RH_RF954initEv+0x62>
    else if (_myInterruptIndex == 2)
 80a0e70:	2a02      	cmp	r2, #2
 80a0e72:	d1a7      	bne.n	80a0dc4 <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
 80a0e74:	9300      	str	r3, [sp, #0]
 80a0e76:	2201      	movs	r2, #1
 80a0e78:	f04f 33ff 	mov.w	r3, #4294967295
 80a0e7c:	4905      	ldr	r1, [pc, #20]	; (80a0e94 <_ZN7RH_RF954initEv+0xdc>)
 80a0e7e:	e7cc      	b.n	80a0e1a <_ZN7RH_RF954initEv+0x62>
 80a0e80:	20000830 	.word	0x20000830
 80a0e84:	20000834 	.word	0x20000834
 80a0e88:	080a0be5 	.word	0x080a0be5
 80a0e8c:	4464c000 	.word	0x4464c000
 80a0e90:	080a0bf5 	.word	0x080a0bf5
 80a0e94:	080a0c05 	.word	0x080a0c05

080a0e98 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
 80a0e98:	b510      	push	{r4, lr}
 80a0e9a:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
 80a0e9c:	6980      	ldr	r0, [r0, #24]
 80a0e9e:	6803      	ldr	r3, [r0, #0]
 80a0ea0:	68db      	ldr	r3, [r3, #12]
 80a0ea2:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
 80a0ea4:	7f20      	ldrb	r0, [r4, #28]
 80a0ea6:	2101      	movs	r1, #1
 80a0ea8:	f001 fe50 	bl	80a2b4c <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
 80a0eac:	2101      	movs	r1, #1
 80a0eae:	7f20      	ldrb	r0, [r4, #28]
 80a0eb0:	f001 fe5d 	bl	80a2b6e <digitalWrite>

    delay(100);
 80a0eb4:	2064      	movs	r0, #100	; 0x64
 80a0eb6:	f000 ffa7 	bl	80a1e08 <delay>
    return true;
}
 80a0eba:	2001      	movs	r0, #1
 80a0ebc:	bd10      	pop	{r4, pc}
	...

080a0ec0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
 80a0ec0:	b570      	push	{r4, r5, r6, lr}
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	460d      	mov	r5, r1
 80a0ec6:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
 80a0ec8:	f7ff fcca 	bl	80a0860 <_ZN15RHGenericDriverC1Ev>
 80a0ecc:	4b02      	ldr	r3, [pc, #8]	; (80a0ed8 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x18>)
}
 80a0ece:	4620      	mov	r0, r4
    _slaveSelectPin(slaveSelectPin)
 80a0ed0:	6023      	str	r3, [r4, #0]
 80a0ed2:	61a6      	str	r6, [r4, #24]
 80a0ed4:	7725      	strb	r5, [r4, #28]
}
 80a0ed6:	bd70      	pop	{r4, r5, r6, pc}
 80a0ed8:	080a384c 	.word	0x080a384c

080a0edc <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
 80a0edc:	b570      	push	{r4, r5, r6, lr}
 80a0ede:	4604      	mov	r4, r0
 80a0ee0:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
 80a0ee2:	f000 f8eb 	bl	80a10bc <HAL_disable_irq>
 80a0ee6:	4606      	mov	r6, r0
    _spi.beginTransaction();
 80a0ee8:	69a0      	ldr	r0, [r4, #24]
 80a0eea:	6803      	ldr	r3, [r0, #0]
 80a0eec:	6a1b      	ldr	r3, [r3, #32]
 80a0eee:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a0ef0:	7f20      	ldrb	r0, [r4, #28]
 80a0ef2:	2100      	movs	r1, #0
 80a0ef4:	f001 fe3b 	bl	80a2b6e <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
 80a0ef8:	69a0      	ldr	r0, [r4, #24]
 80a0efa:	f005 017f 	and.w	r1, r5, #127	; 0x7f
 80a0efe:	6803      	ldr	r3, [r0, #0]
 80a0f00:	681b      	ldr	r3, [r3, #0]
 80a0f02:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
 80a0f04:	69a0      	ldr	r0, [r4, #24]
 80a0f06:	2100      	movs	r1, #0
 80a0f08:	6803      	ldr	r3, [r0, #0]
 80a0f0a:	681b      	ldr	r3, [r3, #0]
 80a0f0c:	4798      	blx	r3
 80a0f0e:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
 80a0f10:	2101      	movs	r1, #1
 80a0f12:	7f20      	ldrb	r0, [r4, #28]
 80a0f14:	f001 fe2b 	bl	80a2b6e <digitalWrite>
    _spi.endTransaction();
 80a0f18:	69a0      	ldr	r0, [r4, #24]
 80a0f1a:	6803      	ldr	r3, [r0, #0]
 80a0f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f1e:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a0f20:	4630      	mov	r0, r6
 80a0f22:	f000 f8d3 	bl	80a10cc <HAL_enable_irq>
    return val;
}
 80a0f26:	4628      	mov	r0, r5
 80a0f28:	bd70      	pop	{r4, r5, r6, pc}

080a0f2a <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
 80a0f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f2c:	4617      	mov	r7, r2
 80a0f2e:	4604      	mov	r4, r0
 80a0f30:	460d      	mov	r5, r1
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0f32:	f000 f8c3 	bl	80a10bc <HAL_disable_irq>
 80a0f36:	4606      	mov	r6, r0
    _spi.beginTransaction();
 80a0f38:	69a0      	ldr	r0, [r4, #24]
 80a0f3a:	6803      	ldr	r3, [r0, #0]
 80a0f3c:	6a1b      	ldr	r3, [r3, #32]
 80a0f3e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a0f40:	7f20      	ldrb	r0, [r4, #28]
 80a0f42:	2100      	movs	r1, #0
 80a0f44:	f001 fe13 	bl	80a2b6e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
 80a0f48:	69a0      	ldr	r0, [r4, #24]
 80a0f4a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a0f4e:	6803      	ldr	r3, [r0, #0]
 80a0f50:	681b      	ldr	r3, [r3, #0]
 80a0f52:	4798      	blx	r3
 80a0f54:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
 80a0f56:	69a0      	ldr	r0, [r4, #24]
 80a0f58:	4639      	mov	r1, r7
 80a0f5a:	6803      	ldr	r3, [r0, #0]
 80a0f5c:	681b      	ldr	r3, [r3, #0]
 80a0f5e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
 80a0f60:	2101      	movs	r1, #1
 80a0f62:	7f20      	ldrb	r0, [r4, #28]
 80a0f64:	f001 fe03 	bl	80a2b6e <digitalWrite>
    _spi.endTransaction();
 80a0f68:	69a0      	ldr	r0, [r4, #24]
 80a0f6a:	6803      	ldr	r3, [r0, #0]
 80a0f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f6e:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a0f70:	4630      	mov	r0, r6
 80a0f72:	f000 f8ab 	bl	80a10cc <HAL_enable_irq>
    return status;
}
 80a0f76:	4628      	mov	r0, r5
 80a0f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f7a <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
 80a0f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0f7e:	460f      	mov	r7, r1
 80a0f80:	4615      	mov	r5, r2
 80a0f82:	4604      	mov	r4, r0
 80a0f84:	461e      	mov	r6, r3
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0f86:	f000 f899 	bl	80a10bc <HAL_disable_irq>
 80a0f8a:	4680      	mov	r8, r0
    _spi.beginTransaction();
 80a0f8c:	69a0      	ldr	r0, [r4, #24]
 80a0f8e:	442e      	add	r6, r5
 80a0f90:	6803      	ldr	r3, [r0, #0]
 80a0f92:	6a1b      	ldr	r3, [r3, #32]
 80a0f94:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a0f96:	2100      	movs	r1, #0
 80a0f98:	7f20      	ldrb	r0, [r4, #28]
 80a0f9a:	f001 fde8 	bl	80a2b6e <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
 80a0f9e:	69a0      	ldr	r0, [r4, #24]
 80a0fa0:	f007 017f 	and.w	r1, r7, #127	; 0x7f
 80a0fa4:	6803      	ldr	r3, [r0, #0]
 80a0fa6:	681b      	ldr	r3, [r3, #0]
 80a0fa8:	4798      	blx	r3
 80a0faa:	4607      	mov	r7, r0
    while (len--)
 80a0fac:	42b5      	cmp	r5, r6
 80a0fae:	d007      	beq.n	80a0fc0 <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x46>
	*dest++ = _spi.transfer(0);
 80a0fb0:	69a0      	ldr	r0, [r4, #24]
 80a0fb2:	2100      	movs	r1, #0
 80a0fb4:	6803      	ldr	r3, [r0, #0]
 80a0fb6:	681b      	ldr	r3, [r3, #0]
 80a0fb8:	4798      	blx	r3
 80a0fba:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
 80a0fbe:	e7f5      	b.n	80a0fac <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x32>
    digitalWrite(_slaveSelectPin, HIGH);
 80a0fc0:	2101      	movs	r1, #1
 80a0fc2:	7f20      	ldrb	r0, [r4, #28]
 80a0fc4:	f001 fdd3 	bl	80a2b6e <digitalWrite>
    _spi.endTransaction();
 80a0fc8:	69a0      	ldr	r0, [r4, #24]
 80a0fca:	6803      	ldr	r3, [r0, #0]
 80a0fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0fce:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a0fd0:	4640      	mov	r0, r8
 80a0fd2:	f000 f87b 	bl	80a10cc <HAL_enable_irq>
    return status;
}
 80a0fd6:	4638      	mov	r0, r7
 80a0fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0fdc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
 80a0fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0fe0:	460f      	mov	r7, r1
 80a0fe2:	4615      	mov	r5, r2
 80a0fe4:	4604      	mov	r4, r0
 80a0fe6:	461e      	mov	r6, r3
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
 80a0fe8:	f000 f868 	bl	80a10bc <HAL_disable_irq>
 80a0fec:	4680      	mov	r8, r0
    _spi.beginTransaction();
 80a0fee:	69a0      	ldr	r0, [r4, #24]
 80a0ff0:	442e      	add	r6, r5
 80a0ff2:	6803      	ldr	r3, [r0, #0]
 80a0ff4:	6a1b      	ldr	r3, [r3, #32]
 80a0ff6:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
 80a0ff8:	2100      	movs	r1, #0
 80a0ffa:	7f20      	ldrb	r0, [r4, #28]
 80a0ffc:	f001 fdb7 	bl	80a2b6e <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
 80a1000:	69a0      	ldr	r0, [r4, #24]
 80a1002:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 80a1006:	6803      	ldr	r3, [r0, #0]
 80a1008:	681b      	ldr	r3, [r3, #0]
 80a100a:	4798      	blx	r3
 80a100c:	4607      	mov	r7, r0
    while (len--)
 80a100e:	42b5      	cmp	r5, r6
 80a1010:	d006      	beq.n	80a1020 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x44>
	_spi.transfer(*src++);
 80a1012:	69a0      	ldr	r0, [r4, #24]
 80a1014:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1018:	6803      	ldr	r3, [r0, #0]
 80a101a:	681b      	ldr	r3, [r3, #0]
 80a101c:	4798      	blx	r3
    while (len--)
 80a101e:	e7f6      	b.n	80a100e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x32>
    digitalWrite(_slaveSelectPin, HIGH);
 80a1020:	2101      	movs	r1, #1
 80a1022:	7f20      	ldrb	r0, [r4, #28]
 80a1024:	f001 fda3 	bl	80a2b6e <digitalWrite>
    _spi.endTransaction();
 80a1028:	69a0      	ldr	r0, [r4, #24]
 80a102a:	6803      	ldr	r3, [r0, #0]
 80a102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a102e:	4798      	blx	r3
    ATOMIC_BLOCK_END;
 80a1030:	4640      	mov	r0, r8
 80a1032:	f000 f84b 	bl	80a10cc <HAL_enable_irq>
    return status;
}
 80a1036:	4638      	mov	r0, r7
 80a1038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a103c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a103c:	b508      	push	{r3, lr}
 80a103e:	4b02      	ldr	r3, [pc, #8]	; (80a1048 <HAL_Pin_Mode+0xc>)
 80a1040:	681b      	ldr	r3, [r3, #0]
 80a1042:	689b      	ldr	r3, [r3, #8]
 80a1044:	9301      	str	r3, [sp, #4]
 80a1046:	bd08      	pop	{r3, pc}
 80a1048:	080601b0 	.word	0x080601b0

080a104c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a104c:	b508      	push	{r3, lr}
 80a104e:	4b02      	ldr	r3, [pc, #8]	; (80a1058 <HAL_Get_Pin_Mode+0xc>)
 80a1050:	681b      	ldr	r3, [r3, #0]
 80a1052:	68db      	ldr	r3, [r3, #12]
 80a1054:	9301      	str	r3, [sp, #4]
 80a1056:	bd08      	pop	{r3, pc}
 80a1058:	080601b0 	.word	0x080601b0

080a105c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b02      	ldr	r3, [pc, #8]	; (80a1068 <HAL_GPIO_Write+0xc>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	691b      	ldr	r3, [r3, #16]
 80a1064:	9301      	str	r3, [sp, #4]
 80a1066:	bd08      	pop	{r3, pc}
 80a1068:	080601b0 	.word	0x080601b0

080a106c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a106c:	b508      	push	{r3, lr}
 80a106e:	4b02      	ldr	r3, [pc, #8]	; (80a1078 <HAL_Interrupts_Attach+0xc>)
 80a1070:	681b      	ldr	r3, [r3, #0]
 80a1072:	699b      	ldr	r3, [r3, #24]
 80a1074:	9301      	str	r3, [sp, #4]
 80a1076:	bd08      	pop	{r3, pc}
 80a1078:	080601b0 	.word	0x080601b0

080a107c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
 80a107c:	b508      	push	{r3, lr}
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <HAL_Interrupts_Detach+0xc>)
 80a1080:	681b      	ldr	r3, [r3, #0]
 80a1082:	69db      	ldr	r3, [r3, #28]
 80a1084:	9301      	str	r3, [sp, #4]
 80a1086:	bd08      	pop	{r3, pc}
 80a1088:	080601b0 	.word	0x080601b0

080a108c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a108c:	b508      	push	{r3, lr}
 80a108e:	4b02      	ldr	r3, [pc, #8]	; (80a1098 <HAL_RNG_GetRandomNumber+0xc>)
 80a1090:	681b      	ldr	r3, [r3, #0]
 80a1092:	685b      	ldr	r3, [r3, #4]
 80a1094:	9301      	str	r3, [sp, #4]
 80a1096:	bd08      	pop	{r3, pc}
 80a1098:	0806019c 	.word	0x0806019c

080a109c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a109c:	b508      	push	{r3, lr}
 80a109e:	4b02      	ldr	r3, [pc, #8]	; (80a10a8 <HAL_Delay_Microseconds+0xc>)
 80a10a0:	681b      	ldr	r3, [r3, #0]
 80a10a2:	68db      	ldr	r3, [r3, #12]
 80a10a4:	9301      	str	r3, [sp, #4]
 80a10a6:	bd08      	pop	{r3, pc}
 80a10a8:	0806019c 	.word	0x0806019c

080a10ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a10ac:	b508      	push	{r3, lr}
 80a10ae:	4b02      	ldr	r3, [pc, #8]	; (80a10b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a10b0:	681b      	ldr	r3, [r3, #0]
 80a10b2:	695b      	ldr	r3, [r3, #20]
 80a10b4:	9301      	str	r3, [sp, #4]
 80a10b6:	bd08      	pop	{r3, pc}
 80a10b8:	0806019c 	.word	0x0806019c

080a10bc <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a10bc:	b508      	push	{r3, lr}
 80a10be:	4b02      	ldr	r3, [pc, #8]	; (80a10c8 <HAL_disable_irq+0xc>)
 80a10c0:	681b      	ldr	r3, [r3, #0]
 80a10c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a10c4:	9301      	str	r3, [sp, #4]
 80a10c6:	bd08      	pop	{r3, pc}
 80a10c8:	0806019c 	.word	0x0806019c

080a10cc <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a10cc:	b508      	push	{r3, lr}
 80a10ce:	4b02      	ldr	r3, [pc, #8]	; (80a10d8 <HAL_enable_irq+0xc>)
 80a10d0:	681b      	ldr	r3, [r3, #0]
 80a10d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a10d4:	9301      	str	r3, [sp, #4]
 80a10d6:	bd08      	pop	{r3, pc}
 80a10d8:	0806019c 	.word	0x0806019c

080a10dc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a10dc:	b508      	push	{r3, lr}
 80a10de:	4b02      	ldr	r3, [pc, #8]	; (80a10e8 <hal_rtc_time_is_valid+0xc>)
 80a10e0:	681b      	ldr	r3, [r3, #0]
 80a10e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a10e4:	9301      	str	r3, [sp, #4]
 80a10e6:	bd08      	pop	{r3, pc}
 80a10e8:	0806019c 	.word	0x0806019c

080a10ec <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a10ec:	b508      	push	{r3, lr}
 80a10ee:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <hal_rtc_get_time+0xc>)
 80a10f0:	681b      	ldr	r3, [r3, #0]
 80a10f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a10f4:	9301      	str	r3, [sp, #4]
 80a10f6:	bd08      	pop	{r3, pc}
 80a10f8:	0806019c 	.word	0x0806019c

080a10fc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <os_thread_yield+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	68db      	ldr	r3, [r3, #12]
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601d0 	.word	0x080601d0

080a110c <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <os_thread_scheduling+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	69db      	ldr	r3, [r3, #28]
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601d0 	.word	0x080601d0

080a111c <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <os_timer_create+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	6a1b      	ldr	r3, [r3, #32]
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601d0 	.word	0x080601d0

080a112c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <os_timer_destroy+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601d0 	.word	0x080601d0

080a113c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <os_timer_get_id+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601d0 	.word	0x080601d0

080a114c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <os_timer_change+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601d0 	.word	0x080601d0

080a115c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <os_mutex_recursive_create+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601d0 	.word	0x080601d0

080a116c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <os_mutex_recursive_destroy+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601d0 	.word	0x080601d0

080a117c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <os_mutex_recursive_lock+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	080601d0 	.word	0x080601d0

080a118c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <os_mutex_recursive_unlock+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080601d0 	.word	0x080601d0

080a119c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <os_timer_set_id+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601d0 	.word	0x080601d0

080a11ac <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <hal_usart_init+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	699b      	ldr	r3, [r3, #24]
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601c4 	.word	0x080601c4

080a11bc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b02      	ldr	r3, [pc, #8]	; (80a11c8 <hal_usart_write+0xc>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a11c4:	9301      	str	r3, [sp, #4]
 80a11c6:	bd08      	pop	{r3, pc}
 80a11c8:	080601c4 	.word	0x080601c4

080a11cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a11cc:	b508      	push	{r3, lr}
 80a11ce:	4b02      	ldr	r3, [pc, #8]	; (80a11d8 <hal_usart_available+0xc>)
 80a11d0:	681b      	ldr	r3, [r3, #0]
 80a11d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a11d4:	9301      	str	r3, [sp, #4]
 80a11d6:	bd08      	pop	{r3, pc}
 80a11d8:	080601c4 	.word	0x080601c4

080a11dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a11dc:	b508      	push	{r3, lr}
 80a11de:	4b02      	ldr	r3, [pc, #8]	; (80a11e8 <hal_usart_read+0xc>)
 80a11e0:	681b      	ldr	r3, [r3, #0]
 80a11e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a11e4:	9301      	str	r3, [sp, #4]
 80a11e6:	bd08      	pop	{r3, pc}
 80a11e8:	080601c4 	.word	0x080601c4

080a11ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a11ec:	b508      	push	{r3, lr}
 80a11ee:	4b02      	ldr	r3, [pc, #8]	; (80a11f8 <hal_usart_peek+0xc>)
 80a11f0:	681b      	ldr	r3, [r3, #0]
 80a11f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a11f4:	9301      	str	r3, [sp, #4]
 80a11f6:	bd08      	pop	{r3, pc}
 80a11f8:	080601c4 	.word	0x080601c4

080a11fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a11fc:	b508      	push	{r3, lr}
 80a11fe:	4b02      	ldr	r3, [pc, #8]	; (80a1208 <hal_usart_flush+0xc>)
 80a1200:	681b      	ldr	r3, [r3, #0]
 80a1202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1204:	9301      	str	r3, [sp, #4]
 80a1206:	bd08      	pop	{r3, pc}
 80a1208:	080601c4 	.word	0x080601c4

080a120c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a120c:	b508      	push	{r3, lr}
 80a120e:	4b02      	ldr	r3, [pc, #8]	; (80a1218 <hal_usart_is_enabled+0xc>)
 80a1210:	681b      	ldr	r3, [r3, #0]
 80a1212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1214:	9301      	str	r3, [sp, #4]
 80a1216:	bd08      	pop	{r3, pc}
 80a1218:	080601c4 	.word	0x080601c4

080a121c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a121c:	b508      	push	{r3, lr}
 80a121e:	4b02      	ldr	r3, [pc, #8]	; (80a1228 <hal_usart_available_data_for_write+0xc>)
 80a1220:	681b      	ldr	r3, [r3, #0]
 80a1222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1224:	9301      	str	r3, [sp, #4]
 80a1226:	bd08      	pop	{r3, pc}
 80a1228:	080601c4 	.word	0x080601c4

080a122c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a122c:	b508      	push	{r3, lr}
 80a122e:	4b02      	ldr	r3, [pc, #8]	; (80a1238 <hal_i2c_write+0xc>)
 80a1230:	681b      	ldr	r3, [r3, #0]
 80a1232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1234:	9301      	str	r3, [sp, #4]
 80a1236:	bd08      	pop	{r3, pc}
 80a1238:	080601ac 	.word	0x080601ac

080a123c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a123c:	b508      	push	{r3, lr}
 80a123e:	4b02      	ldr	r3, [pc, #8]	; (80a1248 <hal_i2c_available+0xc>)
 80a1240:	681b      	ldr	r3, [r3, #0]
 80a1242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1244:	9301      	str	r3, [sp, #4]
 80a1246:	bd08      	pop	{r3, pc}
 80a1248:	080601ac 	.word	0x080601ac

080a124c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a124c:	b508      	push	{r3, lr}
 80a124e:	4b02      	ldr	r3, [pc, #8]	; (80a1258 <hal_i2c_read+0xc>)
 80a1250:	681b      	ldr	r3, [r3, #0]
 80a1252:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1254:	9301      	str	r3, [sp, #4]
 80a1256:	bd08      	pop	{r3, pc}
 80a1258:	080601ac 	.word	0x080601ac

080a125c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a125c:	b508      	push	{r3, lr}
 80a125e:	4b02      	ldr	r3, [pc, #8]	; (80a1268 <hal_i2c_peek+0xc>)
 80a1260:	681b      	ldr	r3, [r3, #0]
 80a1262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1264:	9301      	str	r3, [sp, #4]
 80a1266:	bd08      	pop	{r3, pc}
 80a1268:	080601ac 	.word	0x080601ac

080a126c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a126c:	b508      	push	{r3, lr}
 80a126e:	4b02      	ldr	r3, [pc, #8]	; (80a1278 <hal_i2c_flush+0xc>)
 80a1270:	681b      	ldr	r3, [r3, #0]
 80a1272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1274:	9301      	str	r3, [sp, #4]
 80a1276:	bd08      	pop	{r3, pc}
 80a1278:	080601ac 	.word	0x080601ac

080a127c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a127c:	b508      	push	{r3, lr}
 80a127e:	4b02      	ldr	r3, [pc, #8]	; (80a1288 <hal_i2c_is_enabled+0xc>)
 80a1280:	681b      	ldr	r3, [r3, #0]
 80a1282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1284:	9301      	str	r3, [sp, #4]
 80a1286:	bd08      	pop	{r3, pc}
 80a1288:	080601ac 	.word	0x080601ac

080a128c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a128c:	b508      	push	{r3, lr}
 80a128e:	4b03      	ldr	r3, [pc, #12]	; (80a129c <hal_i2c_init+0x10>)
 80a1290:	681b      	ldr	r3, [r3, #0]
 80a1292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1296:	9301      	str	r3, [sp, #4]
 80a1298:	bd08      	pop	{r3, pc}
 80a129a:	0000      	.short	0x0000
 80a129c:	080601ac 	.word	0x080601ac

080a12a0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <hal_spi_begin+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	681b      	ldr	r3, [r3, #0]
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601b4 	.word	0x080601b4

080a12b0 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <hal_spi_end+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	685b      	ldr	r3, [r3, #4]
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601b4 	.word	0x080601b4

080a12c0 <hal_spi_set_bit_order>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <hal_spi_set_bit_order+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	689b      	ldr	r3, [r3, #8]
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601b4 	.word	0x080601b4

080a12d0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <hal_spi_set_data_mode+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	68db      	ldr	r3, [r3, #12]
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601b4 	.word	0x080601b4

080a12e0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <hal_spi_set_clock_divider+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	691b      	ldr	r3, [r3, #16]
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	080601b4 	.word	0x080601b4

080a12f0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <hal_spi_transfer+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	695b      	ldr	r3, [r3, #20]
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601b4 	.word	0x080601b4

080a1300 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <hal_spi_init+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	69db      	ldr	r3, [r3, #28]
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601b4 	.word	0x080601b4

080a1310 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <hal_spi_is_enabled+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	6a1b      	ldr	r3, [r3, #32]
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601b4 	.word	0x080601b4

080a1320 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <hal_spi_info+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601b4 	.word	0x080601b4

080a1330 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_USB_USART_Init+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	681b      	ldr	r3, [r3, #0]
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601d8 	.word	0x080601d8

080a1340 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_USB_USART_Begin+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	685b      	ldr	r3, [r3, #4]
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601d8 	.word	0x080601d8

080a1350 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_USB_USART_Available_Data+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	691b      	ldr	r3, [r3, #16]
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601d8 	.word	0x080601d8

080a1360 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b02      	ldr	r3, [pc, #8]	; (80a136c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	695b      	ldr	r3, [r3, #20]
 80a1368:	9301      	str	r3, [sp, #4]
 80a136a:	bd08      	pop	{r3, pc}
 80a136c:	080601d8 	.word	0x080601d8

080a1370 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1370:	b508      	push	{r3, lr}
 80a1372:	4b02      	ldr	r3, [pc, #8]	; (80a137c <HAL_USB_USART_Receive_Data+0xc>)
 80a1374:	681b      	ldr	r3, [r3, #0]
 80a1376:	699b      	ldr	r3, [r3, #24]
 80a1378:	9301      	str	r3, [sp, #4]
 80a137a:	bd08      	pop	{r3, pc}
 80a137c:	080601d8 	.word	0x080601d8

080a1380 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1380:	b508      	push	{r3, lr}
 80a1382:	4b02      	ldr	r3, [pc, #8]	; (80a138c <HAL_USB_USART_Send_Data+0xc>)
 80a1384:	681b      	ldr	r3, [r3, #0]
 80a1386:	69db      	ldr	r3, [r3, #28]
 80a1388:	9301      	str	r3, [sp, #4]
 80a138a:	bd08      	pop	{r3, pc}
 80a138c:	080601d8 	.word	0x080601d8

080a1390 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1390:	b508      	push	{r3, lr}
 80a1392:	4b02      	ldr	r3, [pc, #8]	; (80a139c <HAL_USB_USART_Flush_Data+0xc>)
 80a1394:	681b      	ldr	r3, [r3, #0]
 80a1396:	6a1b      	ldr	r3, [r3, #32]
 80a1398:	9301      	str	r3, [sp, #4]
 80a139a:	bd08      	pop	{r3, pc}
 80a139c:	080601d8 	.word	0x080601d8

080a13a0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a13a0:	b508      	push	{r3, lr}
 80a13a2:	4b02      	ldr	r3, [pc, #8]	; (80a13ac <inet_gethostbyname+0xc>)
 80a13a4:	681b      	ldr	r3, [r3, #0]
 80a13a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a13a8:	9301      	str	r3, [sp, #4]
 80a13aa:	bd08      	pop	{r3, pc}
 80a13ac:	080601c0 	.word	0x080601c0

080a13b0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a13b0:	b508      	push	{r3, lr}
 80a13b2:	4b02      	ldr	r3, [pc, #8]	; (80a13bc <panic_+0xc>)
 80a13b4:	681b      	ldr	r3, [r3, #0]
 80a13b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a13b8:	9301      	str	r3, [sp, #4]
 80a13ba:	bd08      	pop	{r3, pc}
 80a13bc:	080201a8 	.word	0x080201a8

080a13c0 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a13c0:	b508      	push	{r3, lr}
 80a13c2:	4b02      	ldr	r3, [pc, #8]	; (80a13cc <log_message_v+0xc>)
 80a13c4:	681b      	ldr	r3, [r3, #0]
 80a13c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a13c8:	9301      	str	r3, [sp, #4]
 80a13ca:	bd08      	pop	{r3, pc}
 80a13cc:	080201a8 	.word	0x080201a8

080a13d0 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a13d0:	b508      	push	{r3, lr}
 80a13d2:	4b02      	ldr	r3, [pc, #8]	; (80a13dc <system_mode+0xc>)
 80a13d4:	681b      	ldr	r3, [r3, #0]
 80a13d6:	681b      	ldr	r3, [r3, #0]
 80a13d8:	9301      	str	r3, [sp, #4]
 80a13da:	bd08      	pop	{r3, pc}
 80a13dc:	080601a4 	.word	0x080601a4

080a13e0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a13e0:	b508      	push	{r3, lr}
 80a13e2:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <set_system_mode+0xc>)
 80a13e4:	681b      	ldr	r3, [r3, #0]
 80a13e6:	685b      	ldr	r3, [r3, #4]
 80a13e8:	9301      	str	r3, [sp, #4]
 80a13ea:	bd08      	pop	{r3, pc}
 80a13ec:	080601a4 	.word	0x080601a4

080a13f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a13f0:	b508      	push	{r3, lr}
 80a13f2:	4b02      	ldr	r3, [pc, #8]	; (80a13fc <system_delay_ms+0xc>)
 80a13f4:	681b      	ldr	r3, [r3, #0]
 80a13f6:	695b      	ldr	r3, [r3, #20]
 80a13f8:	9301      	str	r3, [sp, #4]
 80a13fa:	bd08      	pop	{r3, pc}
 80a13fc:	080601a4 	.word	0x080601a4

080a1400 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1400:	b508      	push	{r3, lr}
 80a1402:	4b02      	ldr	r3, [pc, #8]	; (80a140c <application_thread_current+0xc>)
 80a1404:	681b      	ldr	r3, [r3, #0]
 80a1406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1408:	9301      	str	r3, [sp, #4]
 80a140a:	bd08      	pop	{r3, pc}
 80a140c:	080601a4 	.word	0x080601a4

080a1410 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1410:	b508      	push	{r3, lr}
 80a1412:	4b02      	ldr	r3, [pc, #8]	; (80a141c <application_thread_invoke+0xc>)
 80a1414:	681b      	ldr	r3, [r3, #0]
 80a1416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1418:	9301      	str	r3, [sp, #4]
 80a141a:	bd08      	pop	{r3, pc}
 80a141c:	080601a4 	.word	0x080601a4

080a1420 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1420:	b508      	push	{r3, lr}
 80a1422:	4b02      	ldr	r3, [pc, #8]	; (80a142c <system_thread_get_state+0xc>)
 80a1424:	681b      	ldr	r3, [r3, #0]
 80a1426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1428:	9301      	str	r3, [sp, #4]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	080601a4 	.word	0x080601a4

080a1430 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1430:	b508      	push	{r3, lr}
 80a1432:	4b03      	ldr	r3, [pc, #12]	; (80a1440 <system_ctrl_set_app_request_handler+0x10>)
 80a1434:	681b      	ldr	r3, [r3, #0]
 80a1436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a143a:	9301      	str	r3, [sp, #4]
 80a143c:	bd08      	pop	{r3, pc}
 80a143e:	0000      	.short	0x0000
 80a1440:	080601a4 	.word	0x080601a4

080a1444 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b03      	ldr	r3, [pc, #12]	; (80a1454 <system_ctrl_set_result+0x10>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a144e:	9301      	str	r3, [sp, #4]
 80a1450:	bd08      	pop	{r3, pc}
 80a1452:	0000      	.short	0x0000
 80a1454:	080601a4 	.word	0x080601a4

080a1458 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1458:	b508      	push	{r3, lr}
 80a145a:	4b02      	ldr	r3, [pc, #8]	; (80a1464 <network_connect+0xc>)
 80a145c:	681b      	ldr	r3, [r3, #0]
 80a145e:	685b      	ldr	r3, [r3, #4]
 80a1460:	9301      	str	r3, [sp, #4]
 80a1462:	bd08      	pop	{r3, pc}
 80a1464:	080601c8 	.word	0x080601c8

080a1468 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1468:	b508      	push	{r3, lr}
 80a146a:	4b02      	ldr	r3, [pc, #8]	; (80a1474 <network_connecting+0xc>)
 80a146c:	681b      	ldr	r3, [r3, #0]
 80a146e:	689b      	ldr	r3, [r3, #8]
 80a1470:	9301      	str	r3, [sp, #4]
 80a1472:	bd08      	pop	{r3, pc}
 80a1474:	080601c8 	.word	0x080601c8

080a1478 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1478:	b508      	push	{r3, lr}
 80a147a:	4b02      	ldr	r3, [pc, #8]	; (80a1484 <network_disconnect+0xc>)
 80a147c:	681b      	ldr	r3, [r3, #0]
 80a147e:	68db      	ldr	r3, [r3, #12]
 80a1480:	9301      	str	r3, [sp, #4]
 80a1482:	bd08      	pop	{r3, pc}
 80a1484:	080601c8 	.word	0x080601c8

080a1488 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1488:	b508      	push	{r3, lr}
 80a148a:	4b02      	ldr	r3, [pc, #8]	; (80a1494 <network_ready+0xc>)
 80a148c:	681b      	ldr	r3, [r3, #0]
 80a148e:	691b      	ldr	r3, [r3, #16]
 80a1490:	9301      	str	r3, [sp, #4]
 80a1492:	bd08      	pop	{r3, pc}
 80a1494:	080601c8 	.word	0x080601c8

080a1498 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b02      	ldr	r3, [pc, #8]	; (80a14a4 <network_on+0xc>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	695b      	ldr	r3, [r3, #20]
 80a14a0:	9301      	str	r3, [sp, #4]
 80a14a2:	bd08      	pop	{r3, pc}
 80a14a4:	080601c8 	.word	0x080601c8

080a14a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <network_off+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	699b      	ldr	r3, [r3, #24]
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601c8 	.word	0x080601c8

080a14b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <network_listen+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	69db      	ldr	r3, [r3, #28]
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601c8 	.word	0x080601c8

080a14c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a14c8:	b508      	push	{r3, lr}
 80a14ca:	4b02      	ldr	r3, [pc, #8]	; (80a14d4 <network_listening+0xc>)
 80a14cc:	681b      	ldr	r3, [r3, #0]
 80a14ce:	6a1b      	ldr	r3, [r3, #32]
 80a14d0:	9301      	str	r3, [sp, #4]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	080601c8 	.word	0x080601c8

080a14d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b02      	ldr	r3, [pc, #8]	; (80a14e4 <network_set_listen_timeout+0xc>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a14e0:	9301      	str	r3, [sp, #4]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	080601c8 	.word	0x080601c8

080a14e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a14e8:	b508      	push	{r3, lr}
 80a14ea:	4b02      	ldr	r3, [pc, #8]	; (80a14f4 <network_get_listen_timeout+0xc>)
 80a14ec:	681b      	ldr	r3, [r3, #0]
 80a14ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a14f0:	9301      	str	r3, [sp, #4]
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	080601c8 	.word	0x080601c8

080a14f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <network_is_on+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601c8 	.word	0x080601c8

080a1508 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <network_is_off+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	080601c8 	.word	0x080601c8

080a1518 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <spark_process+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	689b      	ldr	r3, [r3, #8]
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	080601cc 	.word	0x080601cc

080a1528 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <spark_cloud_flag_connected+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	695b      	ldr	r3, [r3, #20]
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	080601cc 	.word	0x080601cc

080a1538 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1538:	b508      	push	{r3, lr}
 80a153a:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <spark_send_event+0xc>)
 80a153c:	681b      	ldr	r3, [r3, #0]
 80a153e:	6a1b      	ldr	r3, [r3, #32]
 80a1540:	9301      	str	r3, [sp, #4]
 80a1542:	bd08      	pop	{r3, pc}
 80a1544:	080601cc 	.word	0x080601cc

080a1548 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1548:	b508      	push	{r3, lr}
 80a154a:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <spark_sync_time_pending+0xc>)
 80a154c:	681b      	ldr	r3, [r3, #0]
 80a154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1550:	9301      	str	r3, [sp, #4]
 80a1552:	bd08      	pop	{r3, pc}
 80a1554:	080601cc 	.word	0x080601cc

080a1558 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1558:	b508      	push	{r3, lr}
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a155c:	681b      	ldr	r3, [r3, #0]
 80a155e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1560:	9301      	str	r3, [sp, #4]
 80a1562:	bd08      	pop	{r3, pc}
 80a1564:	080601cc 	.word	0x080601cc

080a1568 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1568:	b508      	push	{r3, lr}
 80a156a:	4b02      	ldr	r3, [pc, #8]	; (80a1574 <malloc+0xc>)
 80a156c:	681b      	ldr	r3, [r3, #0]
 80a156e:	681b      	ldr	r3, [r3, #0]
 80a1570:	9301      	str	r3, [sp, #4]
 80a1572:	bd08      	pop	{r3, pc}
 80a1574:	080601a0 	.word	0x080601a0

080a1578 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1578:	b508      	push	{r3, lr}
 80a157a:	4b02      	ldr	r3, [pc, #8]	; (80a1584 <free+0xc>)
 80a157c:	681b      	ldr	r3, [r3, #0]
 80a157e:	685b      	ldr	r3, [r3, #4]
 80a1580:	9301      	str	r3, [sp, #4]
 80a1582:	bd08      	pop	{r3, pc}
 80a1584:	080601a0 	.word	0x080601a0

080a1588 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <realloc+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	689b      	ldr	r3, [r3, #8]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601a0 	.word	0x080601a0

080a1598 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <abort+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601a0 	.word	0x080601a0

080a15a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <_malloc_r+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601a0 	.word	0x080601a0

080a15b8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <newlib_impure_ptr_callback+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601a0 	.word	0x080601a0

080a15c8 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a15c8:	6880      	ldr	r0, [r0, #8]
 80a15ca:	f7ff bddf 	b.w	80a118c <os_mutex_recursive_unlock>

080a15ce <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a15ce:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a15d0:	2600      	movs	r6, #0
 80a15d2:	4604      	mov	r4, r0
 80a15d4:	460d      	mov	r5, r1
 80a15d6:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a15da:	f7ff fdbf 	bl	80a115c <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a15de:	4628      	mov	r0, r5
    _spi = spi;
 80a15e0:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a15e2:	f7ff fe8d 	bl	80a1300 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a15e6:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a15e8:	6066      	str	r6, [r4, #4]
}
 80a15ea:	bd70      	pop	{r4, r5, r6, pc}

080a15ec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a15ec:	b510      	push	{r4, lr}
 80a15ee:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
 80a15f0:	6880      	ldr	r0, [r0, #8]
 80a15f2:	f7ff fdc3 	bl	80a117c <os_mutex_recursive_lock>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 80a15f6:	7820      	ldrb	r0, [r4, #0]
 80a15f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a15fc:	f7ff fe50 	bl	80a12a0 <hal_spi_begin>
        unlock();
 80a1600:	4620      	mov	r0, r4
 80a1602:	f7ff ffe1 	bl	80a15c8 <_ZN8SPIClass6unlockEv>
    }
}
 80a1606:	bd10      	pop	{r4, pc}

080a1608 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
 80a1608:	b510      	push	{r4, lr}
 80a160a:	4604      	mov	r4, r0
 80a160c:	6880      	ldr	r0, [r0, #8]
 80a160e:	f7ff fdb5 	bl	80a117c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_end(_spi);
 80a1612:	7820      	ldrb	r0, [r4, #0]
 80a1614:	f7ff fe4c 	bl	80a12b0 <hal_spi_end>
        unlock();
 80a1618:	4620      	mov	r0, r4
 80a161a:	f7ff ffd5 	bl	80a15c8 <_ZN8SPIClass6unlockEv>
    }
}
 80a161e:	bd10      	pop	{r4, pc}

080a1620 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a1620:	b538      	push	{r3, r4, r5, lr}
 80a1622:	4604      	mov	r4, r0
 80a1624:	460d      	mov	r5, r1
 80a1626:	6880      	ldr	r0, [r0, #8]
 80a1628:	f7ff fda8 	bl	80a117c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_bit_order(_spi, bitOrder);
 80a162c:	7820      	ldrb	r0, [r4, #0]
 80a162e:	4629      	mov	r1, r5
 80a1630:	f7ff fe46 	bl	80a12c0 <hal_spi_set_bit_order>
        unlock();
 80a1634:	4620      	mov	r0, r4
 80a1636:	f7ff ffc7 	bl	80a15c8 <_ZN8SPIClass6unlockEv>
    }
}
 80a163a:	bd38      	pop	{r3, r4, r5, pc}

080a163c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
 80a163c:	b538      	push	{r3, r4, r5, lr}
 80a163e:	4604      	mov	r4, r0
 80a1640:	460d      	mov	r5, r1
 80a1642:	6880      	ldr	r0, [r0, #8]
 80a1644:	f7ff fd9a 	bl	80a117c <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_set_data_mode(_spi, mode);
 80a1648:	7820      	ldrb	r0, [r4, #0]
 80a164a:	4629      	mov	r1, r5
 80a164c:	f7ff fe40 	bl	80a12d0 <hal_spi_set_data_mode>
        unlock();
 80a1650:	4620      	mov	r0, r4
 80a1652:	f7ff ffb9 	bl	80a15c8 <_ZN8SPIClass6unlockEv>
    }
}
 80a1656:	bd38      	pop	{r3, r4, r5, pc}

080a1658 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a1658:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a165a:	2400      	movs	r4, #0
 80a165c:	0840      	lsrs	r0, r0, #1
 80a165e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1660:	6818      	ldr	r0, [r3, #0]
 80a1662:	b2e5      	uxtb	r5, r4
 80a1664:	4288      	cmp	r0, r1
 80a1666:	d906      	bls.n	80a1676 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1668:	3401      	adds	r4, #1
 80a166a:	2c08      	cmp	r4, #8
 80a166c:	d002      	beq.n	80a1674 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a166e:	0840      	lsrs	r0, r0, #1
 80a1670:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 80a1672:	e7f5      	b.n	80a1660 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1674:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1678:	5d5b      	ldrb	r3, [r3, r5]
 80a167a:	7013      	strb	r3, [r2, #0]
}
 80a167c:	bd30      	pop	{r4, r5, pc}
 80a167e:	bf00      	nop
 80a1680:	080a389c 	.word	0x080a389c

080a1684 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    unsigned clock = 0;
 80a1686:	2500      	movs	r5, #0
{
 80a1688:	4604      	mov	r4, r0
 80a168a:	b089      	sub	sp, #36	; 0x24
 80a168c:	6880      	ldr	r0, [r0, #8]

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a168e:	fb02 f601 	mul.w	r6, r2, r1
    unsigned clock = 0;
 80a1692:	9502      	str	r5, [sp, #8]
 80a1694:	f7ff fd72 	bl	80a117c <os_mutex_recursive_lock>
    memset(info, 0, sizeof(hal_spi_info_t));
 80a1698:	4629      	mov	r1, r5
 80a169a:	2214      	movs	r2, #20
 80a169c:	a803      	add	r0, sp, #12

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a169e:	7827      	ldrb	r7, [r4, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 80a16a0:	f001 ff06 	bl	80a34b0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a16a4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 80a16a6:	462a      	mov	r2, r5
 80a16a8:	4638      	mov	r0, r7
 80a16aa:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 80a16ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 80a16b0:	f7ff fe36 	bl	80a1320 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a16b4:	ab02      	add	r3, sp, #8
 80a16b6:	f10d 0207 	add.w	r2, sp, #7
 80a16ba:	4631      	mov	r1, r6
 80a16bc:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
 80a16be:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a16c2:	f7ff ffc9 	bl	80a1658 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 80a16c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a16ca:	7820      	ldrb	r0, [r4, #0]
 80a16cc:	f7ff fe08 	bl	80a12e0 <hal_spi_set_clock_divider>
        unlock();
 80a16d0:	4620      	mov	r0, r4
 80a16d2:	f7ff ff79 	bl	80a15c8 <_ZN8SPIClass6unlockEv>
    }

    return clock;
}
 80a16d6:	9802      	ldr	r0, [sp, #8]
 80a16d8:	b009      	add	sp, #36	; 0x24
 80a16da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a16dc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a16dc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a16de:	7800      	ldrb	r0, [r0, #0]
 80a16e0:	f7ff fe06 	bl	80a12f0 <hal_spi_transfer>
}
 80a16e4:	b2c0      	uxtb	r0, r0
 80a16e6:	bd08      	pop	{r3, pc}

080a16e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a16e8:	b510      	push	{r4, lr}
 80a16ea:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a16ec:	6800      	ldr	r0, [r0, #0]
 80a16ee:	b118      	cbz	r0, 80a16f8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a16f0:	f7ff ff42 	bl	80a1578 <free>
            wakeupSource_ = nullptr;
 80a16f4:	2300      	movs	r3, #0
 80a16f6:	6023      	str	r3, [r4, #0]
        }
    }
 80a16f8:	bd10      	pop	{r4, pc}

080a16fa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a16fa:	b510      	push	{r4, lr}
 80a16fc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a16fe:	f7ff fff3 	bl	80a16e8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a1702:	4620      	mov	r0, r4
 80a1704:	bd10      	pop	{r4, pc}
	...

080a1708 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1708:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a170a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a170c:	b510      	push	{r4, lr}
 80a170e:	4b08      	ldr	r3, [pc, #32]	; (80a1730 <_GLOBAL__sub_I_System+0x28>)
 80a1710:	4c08      	ldr	r4, [pc, #32]	; (80a1734 <_GLOBAL__sub_I_System+0x2c>)
 80a1712:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a1714:	4b08      	ldr	r3, [pc, #32]	; (80a1738 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a1716:	6020      	str	r0, [r4, #0]
 80a1718:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a171a:	71a0      	strb	r0, [r4, #6]
 80a171c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a171e:	f7ff fe5f 	bl	80a13e0 <set_system_mode>
SystemClass System;
 80a1722:	4620      	mov	r0, r4
 80a1724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a1728:	4a04      	ldr	r2, [pc, #16]	; (80a173c <_GLOBAL__sub_I_System+0x34>)
 80a172a:	4905      	ldr	r1, [pc, #20]	; (80a1740 <_GLOBAL__sub_I_System+0x38>)
 80a172c:	f001 ba90 	b.w	80a2c50 <__aeabi_atexit>
 80a1730:	2000084c 	.word	0x2000084c
 80a1734:	20000840 	.word	0x20000840
 80a1738:	ffff0000 	.word	0xffff0000
 80a173c:	20000070 	.word	0x20000070
 80a1740:	080a16fb 	.word	0x080a16fb

080a1744 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1744:	b510      	push	{r4, lr}
 80a1746:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1748:	f001 ff01 	bl	80a354e <strlen>
 80a174c:	1e43      	subs	r3, r0, #1
 80a174e:	4620      	mov	r0, r4
 80a1750:	4423      	add	r3, r4
	while(i<j){
 80a1752:	4283      	cmp	r3, r0
 80a1754:	d906      	bls.n	80a1764 <_Z11str_reversePc+0x20>
		c = *i;
 80a1756:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1758:	7819      	ldrb	r1, [r3, #0]
 80a175a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a175e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a1762:	e7f6      	b.n	80a1752 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a1764:	bd10      	pop	{r4, pc}

080a1766 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1766:	b570      	push	{r4, r5, r6, lr}
 80a1768:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a176a:	1e91      	subs	r1, r2, #2
 80a176c:	2922      	cmp	r1, #34	; 0x22
 80a176e:	d822      	bhi.n	80a17b6 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a1770:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a1772:	b168      	cbz	r0, 80a1790 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1774:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1778:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a177c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a177e:	2809      	cmp	r0, #9
                *ptr += '0';
 80a1780:	bf94      	ite	ls
 80a1782:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1784:	3157      	addhi	r1, #87	; 0x57
 80a1786:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a1788:	4630      	mov	r0, r6
 80a178a:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a178e:	e7f0      	b.n	80a1772 <ultoa+0xc>
 80a1790:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a1792:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a1794:	4423      	add	r3, r4
 80a1796:	4293      	cmp	r3, r2
 80a1798:	d902      	bls.n	80a17a0 <ultoa+0x3a>
            *ptr++ = '0';
 80a179a:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a179e:	e7fa      	b.n	80a1796 <ultoa+0x30>
 80a17a0:	1b5a      	subs	r2, r3, r5
 80a17a2:	42ab      	cmp	r3, r5
 80a17a4:	bf38      	it	cc
 80a17a6:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a17a8:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a17aa:	4620      	mov	r0, r4
	*ptr = '\0';
 80a17ac:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a17ae:	f7ff ffc9 	bl	80a1744 <_Z11str_reversePc>
	return buffer;
 80a17b2:	4620      	mov	r0, r4
}
 80a17b4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a17b6:	2000      	movs	r0, #0
 80a17b8:	e7fc      	b.n	80a17b4 <ultoa+0x4e>

080a17ba <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a17ba:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a17bc:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a17be:	460c      	mov	r4, r1
 80a17c0:	4615      	mov	r5, r2
	if(a<0){
 80a17c2:	da0d      	bge.n	80a17e0 <itoa+0x26>
		*buffer = '-';
 80a17c4:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a17c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a17ca:	bf0c      	ite	eq
 80a17cc:	4618      	moveq	r0, r3
 80a17ce:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a17d0:	2301      	movs	r3, #1
		*buffer = '-';
 80a17d2:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a17d4:	462a      	mov	r2, r5
 80a17d6:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a17d8:	f7ff ffc5 	bl	80a1766 <ultoa>
	}
	return buffer;
}
 80a17dc:	4620      	mov	r0, r4
 80a17de:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a17e0:	2301      	movs	r3, #1
 80a17e2:	e7f9      	b.n	80a17d8 <itoa+0x1e>

080a17e4 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a17e4:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a17e6:	2301      	movs	r3, #1
 80a17e8:	f7ff ffbd 	bl	80a1766 <ultoa>
}
 80a17ec:	bd08      	pop	{r3, pc}

080a17ee <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a17ee:	b510      	push	{r4, lr}
 80a17f0:	4604      	mov	r4, r0
{
	free(buffer);
 80a17f2:	6800      	ldr	r0, [r0, #0]
 80a17f4:	f7ff fec0 	bl	80a1578 <free>
}
 80a17f8:	4620      	mov	r0, r4
 80a17fa:	bd10      	pop	{r4, pc}

080a17fc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a17fc:	b510      	push	{r4, lr}
 80a17fe:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1800:	6800      	ldr	r0, [r0, #0]
 80a1802:	b108      	cbz	r0, 80a1808 <_ZN6String10invalidateEv+0xc>
 80a1804:	f7ff feb8 	bl	80a1578 <free>
	buffer = NULL;
 80a1808:	2300      	movs	r3, #0
	capacity = len = 0;
 80a180a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a180e:	6023      	str	r3, [r4, #0]
}
 80a1810:	bd10      	pop	{r4, pc}

080a1812 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1812:	b538      	push	{r3, r4, r5, lr}
 80a1814:	4604      	mov	r4, r0
 80a1816:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1818:	6800      	ldr	r0, [r0, #0]
 80a181a:	3101      	adds	r1, #1
 80a181c:	f7ff feb4 	bl	80a1588 <realloc>
	if (newbuffer) {
 80a1820:	b110      	cbz	r0, 80a1828 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1822:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a1826:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1828:	bd38      	pop	{r3, r4, r5, pc}

080a182a <_ZN6String7reserveEj>:
{
 80a182a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a182c:	6803      	ldr	r3, [r0, #0]
{
 80a182e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1830:	b123      	cbz	r3, 80a183c <_ZN6String7reserveEj+0x12>
 80a1832:	6843      	ldr	r3, [r0, #4]
 80a1834:	428b      	cmp	r3, r1
 80a1836:	d301      	bcc.n	80a183c <_ZN6String7reserveEj+0x12>
 80a1838:	2001      	movs	r0, #1
}
 80a183a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a183c:	4620      	mov	r0, r4
 80a183e:	f7ff ffe8 	bl	80a1812 <_ZN6String12changeBufferEj>
 80a1842:	2800      	cmp	r0, #0
 80a1844:	d0f9      	beq.n	80a183a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a1846:	68a3      	ldr	r3, [r4, #8]
 80a1848:	2b00      	cmp	r3, #0
 80a184a:	d1f5      	bne.n	80a1838 <_ZN6String7reserveEj+0xe>
 80a184c:	6822      	ldr	r2, [r4, #0]
 80a184e:	7013      	strb	r3, [r2, #0]
 80a1850:	e7f2      	b.n	80a1838 <_ZN6String7reserveEj+0xe>

080a1852 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1852:	b570      	push	{r4, r5, r6, lr}
 80a1854:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1856:	4611      	mov	r1, r2
{
 80a1858:	4604      	mov	r4, r0
 80a185a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a185c:	f7ff ffe5 	bl	80a182a <_ZN6String7reserveEj>
 80a1860:	b920      	cbnz	r0, 80a186c <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a1862:	4620      	mov	r0, r4
 80a1864:	f7ff ffca 	bl	80a17fc <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a1868:	4620      	mov	r0, r4
 80a186a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a186c:	462a      	mov	r2, r5
 80a186e:	4631      	mov	r1, r6
 80a1870:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a1872:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1874:	f001 fdf4 	bl	80a3460 <memcpy>
	buffer[len] = 0;
 80a1878:	2100      	movs	r1, #0
 80a187a:	6822      	ldr	r2, [r4, #0]
 80a187c:	68a3      	ldr	r3, [r4, #8]
 80a187e:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a1880:	e7f2      	b.n	80a1868 <_ZN6String4copyEPKcj+0x16>

080a1882 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a1882:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a1884:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a1886:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1888:	460d      	mov	r5, r1
	capacity = 0;
 80a188a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a188e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1890:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a1892:	b139      	cbz	r1, 80a18a4 <_ZN6StringC1EPKc+0x22>
 80a1894:	4608      	mov	r0, r1
 80a1896:	f001 fe5a 	bl	80a354e <strlen>
 80a189a:	4629      	mov	r1, r5
 80a189c:	4602      	mov	r2, r0
 80a189e:	4620      	mov	r0, r4
 80a18a0:	f7ff ffd7 	bl	80a1852 <_ZN6String4copyEPKcj>
}
 80a18a4:	4620      	mov	r0, r4
 80a18a6:	bd38      	pop	{r3, r4, r5, pc}

080a18a8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a18a8:	b538      	push	{r3, r4, r5, lr}
 80a18aa:	4605      	mov	r5, r0
	if (buffer) {
 80a18ac:	6800      	ldr	r0, [r0, #0]
{
 80a18ae:	460c      	mov	r4, r1
	if (buffer) {
 80a18b0:	b168      	cbz	r0, 80a18ce <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a18b2:	686a      	ldr	r2, [r5, #4]
 80a18b4:	688b      	ldr	r3, [r1, #8]
 80a18b6:	429a      	cmp	r2, r3
 80a18b8:	d307      	bcc.n	80a18ca <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a18ba:	6809      	ldr	r1, [r1, #0]
 80a18bc:	f001 fe24 	bl	80a3508 <strcpy>
			len = rhs.len;
 80a18c0:	68a3      	ldr	r3, [r4, #8]
 80a18c2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a18c4:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a18c6:	60a3      	str	r3, [r4, #8]
}
 80a18c8:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a18ca:	f7ff fe55 	bl	80a1578 <free>
	buffer = rhs.buffer;
 80a18ce:	6823      	ldr	r3, [r4, #0]
 80a18d0:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a18d2:	6863      	ldr	r3, [r4, #4]
 80a18d4:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a18d6:	68a3      	ldr	r3, [r4, #8]
 80a18d8:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a18da:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a18dc:	e9c4 3300 	strd	r3, r3, [r4]
 80a18e0:	e7f1      	b.n	80a18c6 <_ZN6String4moveERS_+0x1e>

080a18e2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a18e2:	4288      	cmp	r0, r1
{
 80a18e4:	b510      	push	{r4, lr}
 80a18e6:	460b      	mov	r3, r1
 80a18e8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a18ea:	d004      	beq.n	80a18f6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a18ec:	6809      	ldr	r1, [r1, #0]
 80a18ee:	b121      	cbz	r1, 80a18fa <_ZN6StringaSERKS_+0x18>
 80a18f0:	689a      	ldr	r2, [r3, #8]
 80a18f2:	f7ff ffae 	bl	80a1852 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	bd10      	pop	{r4, pc}
	else invalidate();
 80a18fa:	f7ff ff7f 	bl	80a17fc <_ZN6String10invalidateEv>
 80a18fe:	e7fa      	b.n	80a18f6 <_ZN6StringaSERKS_+0x14>

080a1900 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a1900:	2300      	movs	r3, #0
String::String(const String &value)
 80a1902:	b510      	push	{r4, lr}
 80a1904:	4604      	mov	r4, r0
	capacity = 0;
 80a1906:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a190a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a190c:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a190e:	f7ff ffe8 	bl	80a18e2 <_ZN6StringaSERKS_>
}
 80a1912:	4620      	mov	r0, r4
 80a1914:	bd10      	pop	{r4, pc}

080a1916 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1916:	4288      	cmp	r0, r1
{
 80a1918:	b510      	push	{r4, lr}
 80a191a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a191c:	d001      	beq.n	80a1922 <_ZN6StringaSEOS_+0xc>
 80a191e:	f7ff ffc3 	bl	80a18a8 <_ZN6String4moveERS_>
	return *this;
}
 80a1922:	4620      	mov	r0, r4
 80a1924:	bd10      	pop	{r4, pc}

080a1926 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1926:	b538      	push	{r3, r4, r5, lr}
 80a1928:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a192a:	460c      	mov	r4, r1
 80a192c:	b149      	cbz	r1, 80a1942 <_ZN6StringaSEPKc+0x1c>
 80a192e:	4608      	mov	r0, r1
 80a1930:	f001 fe0d 	bl	80a354e <strlen>
 80a1934:	4621      	mov	r1, r4
 80a1936:	4602      	mov	r2, r0
 80a1938:	4628      	mov	r0, r5
 80a193a:	f7ff ff8a 	bl	80a1852 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a193e:	4628      	mov	r0, r5
 80a1940:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a1942:	f7ff ff5b 	bl	80a17fc <_ZN6String10invalidateEv>
 80a1946:	e7fa      	b.n	80a193e <_ZN6StringaSEPKc+0x18>

080a1948 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a1948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a194a:	4604      	mov	r4, r0
	buffer = NULL;
 80a194c:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a194e:	4608      	mov	r0, r1
	capacity = 0;
 80a1950:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1954:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1956:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a1958:	a901      	add	r1, sp, #4
 80a195a:	f7ff ff43 	bl	80a17e4 <utoa>
	*this = buf;
 80a195e:	4620      	mov	r0, r4
 80a1960:	a901      	add	r1, sp, #4
 80a1962:	f7ff ffe0 	bl	80a1926 <_ZN6StringaSEPKc>
}
 80a1966:	4620      	mov	r0, r4
 80a1968:	b004      	add	sp, #16
 80a196a:	bd10      	pop	{r4, pc}

080a196c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a196c:	b510      	push	{r4, lr}
	buffer = NULL;
 80a196e:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a1970:	4604      	mov	r4, r0
 80a1972:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a1974:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a1978:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a197a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a197c:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a197e:	a901      	add	r1, sp, #4
 80a1980:	f7ff ff1b 	bl	80a17ba <itoa>
	*this = buf;
 80a1984:	4620      	mov	r0, r4
 80a1986:	a901      	add	r1, sp, #4
 80a1988:	f7ff ffcd 	bl	80a1926 <_ZN6StringaSEPKc>
}
 80a198c:	4620      	mov	r0, r4
 80a198e:	b00a      	add	sp, #40	; 0x28
 80a1990:	bd10      	pop	{r4, pc}

080a1992 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a1992:	b570      	push	{r4, r5, r6, lr}
 80a1994:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a1996:	460e      	mov	r6, r1
 80a1998:	b909      	cbnz	r1, 80a199e <_ZN6String6concatEPKcj+0xc>
 80a199a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a199c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a199e:	b16a      	cbz	r2, 80a19bc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a19a0:	6884      	ldr	r4, [r0, #8]
 80a19a2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a19a4:	4621      	mov	r1, r4
 80a19a6:	f7ff ff40 	bl	80a182a <_ZN6String7reserveEj>
 80a19aa:	2800      	cmp	r0, #0
 80a19ac:	d0f5      	beq.n	80a199a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a19ae:	6828      	ldr	r0, [r5, #0]
 80a19b0:	68ab      	ldr	r3, [r5, #8]
 80a19b2:	4631      	mov	r1, r6
 80a19b4:	4418      	add	r0, r3
 80a19b6:	f001 fda7 	bl	80a3508 <strcpy>
	len = newlen;
 80a19ba:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a19bc:	2001      	movs	r0, #1
 80a19be:	e7ed      	b.n	80a199c <_ZN6String6concatEPKcj+0xa>

080a19c0 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a19c0:	688a      	ldr	r2, [r1, #8]
 80a19c2:	6809      	ldr	r1, [r1, #0]
 80a19c4:	f7ff bfe5 	b.w	80a1992 <_ZN6String6concatEPKcj>

080a19c8 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
 80a19c8:	b538      	push	{r3, r4, r5, lr}
 80a19ca:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a19cc:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a19ce:	4608      	mov	r0, r1
	if (!cstr) return 0;
 80a19d0:	b141      	cbz	r1, 80a19e4 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a19d2:	f001 fdbc 	bl	80a354e <strlen>
 80a19d6:	4621      	mov	r1, r4
 80a19d8:	4602      	mov	r2, r0
 80a19da:	4628      	mov	r0, r5
}
 80a19dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return concat(cstr, strlen(cstr));
 80a19e0:	f7ff bfd7 	b.w	80a1992 <_ZN6String6concatEPKcj>
}
 80a19e4:	bd38      	pop	{r3, r4, r5, pc}

080a19e6 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a19e6:	2300      	movs	r3, #0
{
 80a19e8:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a19ea:	2201      	movs	r2, #1
	buf[0] = c;
 80a19ec:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a19f0:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a19f2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a19f6:	f7ff ffcc 	bl	80a1992 <_ZN6String6concatEPKcj>
}
 80a19fa:	b003      	add	sp, #12
 80a19fc:	f85d fb04 	ldr.w	pc, [sp], #4

080a1a00 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a1a00:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1a02:	688a      	ldr	r2, [r1, #8]
 80a1a04:	6809      	ldr	r1, [r1, #0]
{
 80a1a06:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a1a08:	f7ff ffc3 	bl	80a1992 <_ZN6String6concatEPKcj>
 80a1a0c:	b910      	cbnz	r0, 80a1a14 <_ZplRK15StringSumHelperRK6String+0x14>
 80a1a0e:	4620      	mov	r0, r4
 80a1a10:	f7ff fef4 	bl	80a17fc <_ZN6String10invalidateEv>
	return a;
}
 80a1a14:	4620      	mov	r0, r4
 80a1a16:	bd10      	pop	{r4, pc}

080a1a18 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a1a18:	b538      	push	{r3, r4, r5, lr}
 80a1a1a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1a1c:	460d      	mov	r5, r1
 80a1a1e:	b921      	cbnz	r1, 80a1a2a <_ZplRK15StringSumHelperPKc+0x12>
 80a1a20:	4620      	mov	r0, r4
 80a1a22:	f7ff feeb 	bl	80a17fc <_ZN6String10invalidateEv>
	return a;
}
 80a1a26:	4620      	mov	r0, r4
 80a1a28:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1a2a:	4608      	mov	r0, r1
 80a1a2c:	f001 fd8f 	bl	80a354e <strlen>
 80a1a30:	4629      	mov	r1, r5
 80a1a32:	4602      	mov	r2, r0
 80a1a34:	4620      	mov	r0, r4
 80a1a36:	f7ff ffac 	bl	80a1992 <_ZN6String6concatEPKcj>
 80a1a3a:	2800      	cmp	r0, #0
 80a1a3c:	d0f0      	beq.n	80a1a20 <_ZplRK15StringSumHelperPKc+0x8>
 80a1a3e:	e7f2      	b.n	80a1a26 <_ZplRK15StringSumHelperPKc+0xe>

080a1a40 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a1a40:	b558      	push	{r3, r4, r6, lr}
 80a1a42:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a1a44:	b12a      	cbz	r2, 80a1a52 <_ZNK6String8getBytesEPhjj+0x12>
 80a1a46:	b121      	cbz	r1, 80a1a52 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
 80a1a48:	6884      	ldr	r4, [r0, #8]
 80a1a4a:	42a3      	cmp	r3, r4
 80a1a4c:	d302      	bcc.n	80a1a54 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a1a4e:	2300      	movs	r3, #0
 80a1a50:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
 80a1a52:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
 80a1a54:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
 80a1a56:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
 80a1a58:	4294      	cmp	r4, r2
 80a1a5a:	bf28      	it	cs
 80a1a5c:	4614      	movcs	r4, r2
	strncpy((char *)buf, buffer + index, n);
 80a1a5e:	6801      	ldr	r1, [r0, #0]
 80a1a60:	4622      	mov	r2, r4
 80a1a62:	4419      	add	r1, r3
 80a1a64:	4630      	mov	r0, r6
 80a1a66:	f001 fd7a 	bl	80a355e <strncpy>
	buf[n] = 0;
 80a1a6a:	2300      	movs	r3, #0
 80a1a6c:	5533      	strb	r3, [r6, r4]
 80a1a6e:	e7f0      	b.n	80a1a52 <_ZNK6String8getBytesEPhjj+0x12>

080a1a70 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a1a70:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a1a72:	6883      	ldr	r3, [r0, #8]
 80a1a74:	4293      	cmp	r3, r2
 80a1a76:	d907      	bls.n	80a1a88 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a1a78:	6804      	ldr	r4, [r0, #0]
 80a1a7a:	6809      	ldr	r1, [r1, #0]
 80a1a7c:	18a0      	adds	r0, r4, r2
 80a1a7e:	f001 fd81 	bl	80a3584 <strstr>
	if (found == NULL) return -1;
 80a1a82:	b108      	cbz	r0, 80a1a88 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a1a84:	1b00      	subs	r0, r0, r4
}
 80a1a86:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
 80a1a88:	f04f 30ff 	mov.w	r0, #4294967295
 80a1a8c:	e7fb      	b.n	80a1a86 <_ZNK6String7indexOfERKS_j+0x16>

080a1a8e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
 80a1a8e:	2200      	movs	r2, #0
 80a1a90:	f7ff bfee 	b.w	80a1a70 <_ZNK6String7indexOfERKS_j>

080a1a94 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 80a1a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1a98:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a1a9a:	688a      	ldr	r2, [r1, #8]
{
 80a1a9c:	460e      	mov	r6, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a1a9e:	b1ca      	cbz	r2, 80a1ad4 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80a1aa0:	6883      	ldr	r3, [r0, #8]
 80a1aa2:	b1bb      	cbz	r3, 80a1ad4 <_ZNK6String11lastIndexOfERKS_j+0x40>
 80a1aa4:	429a      	cmp	r2, r3
 80a1aa6:	d815      	bhi.n	80a1ad4 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1aa8:	6807      	ldr	r7, [r0, #0]
	int found = -1;
 80a1aaa:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1aae:	4638      	mov	r0, r7
	if (fromIndex >= len) fromIndex = len - 1;
 80a1ab0:	42ab      	cmp	r3, r5
 80a1ab2:	bf98      	it	ls
 80a1ab4:	f103 35ff 	addls.w	r5, r3, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1ab8:	eb07 0805 	add.w	r8, r7, r5
 80a1abc:	4540      	cmp	r0, r8
 80a1abe:	d80b      	bhi.n	80a1ad8 <_ZNK6String11lastIndexOfERKS_j+0x44>
		p = strstr(p, s2.buffer);
 80a1ac0:	6831      	ldr	r1, [r6, #0]
 80a1ac2:	f001 fd5f 	bl	80a3584 <strstr>
		if (!p) break;
 80a1ac6:	b138      	cbz	r0, 80a1ad8 <_ZNK6String11lastIndexOfERKS_j+0x44>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 80a1ac8:	1bc3      	subs	r3, r0, r7
 80a1aca:	42ab      	cmp	r3, r5
 80a1acc:	bf98      	it	ls
 80a1ace:	461c      	movls	r4, r3
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 80a1ad0:	3001      	adds	r0, #1
 80a1ad2:	e7f3      	b.n	80a1abc <_ZNK6String11lastIndexOfERKS_j+0x28>
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 80a1ad4:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return found;
}
 80a1ad8:	4620      	mov	r0, r4
 80a1ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1ae0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ae2:	461d      	mov	r5, r3
	if (left > right) {
 80a1ae4:	429a      	cmp	r2, r3
 80a1ae6:	bf88      	it	hi
 80a1ae8:	4613      	movhi	r3, r2
{
 80a1aea:	460f      	mov	r7, r1
 80a1aec:	4614      	mov	r4, r2
	if (left > right) {
 80a1aee:	bf88      	it	hi
 80a1af0:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1af2:	490b      	ldr	r1, [pc, #44]	; (80a1b20 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a1af4:	bf88      	it	hi
 80a1af6:	461d      	movhi	r5, r3
{
 80a1af8:	4606      	mov	r6, r0
	String out;
 80a1afa:	f7ff fec2 	bl	80a1882 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a1afe:	68ba      	ldr	r2, [r7, #8]
 80a1b00:	42a2      	cmp	r2, r4
 80a1b02:	d30a      	bcc.n	80a1b1a <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a1b04:	6839      	ldr	r1, [r7, #0]
 80a1b06:	42aa      	cmp	r2, r5
 80a1b08:	bf94      	ite	ls
 80a1b0a:	ebc4 0202 	rsbls	r2, r4, r2
 80a1b0e:	ebc4 0205 	rsbhi	r2, r4, r5
 80a1b12:	4630      	mov	r0, r6
 80a1b14:	4421      	add	r1, r4
 80a1b16:	f7ff fe9c 	bl	80a1852 <_ZN6String4copyEPKcj>
	return out;
}
 80a1b1a:	4630      	mov	r0, r6
 80a1b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1b1e:	bf00      	nop
 80a1b20:	080a35e2 	.word	0x080a35e2

080a1b24 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 80a1b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 80a1b28:	f8d0 a008 	ldr.w	sl, [r0, #8]
{
 80a1b2c:	4605      	mov	r5, r0
 80a1b2e:	460f      	mov	r7, r1
 80a1b30:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 80a1b32:	f1ba 0f00 	cmp.w	sl, #0
 80a1b36:	d046      	beq.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>
 80a1b38:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80a1b3c:	f1bb 0f00 	cmp.w	fp, #0
 80a1b40:	d041      	beq.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>
	int diff = replace.len - find.len;
 80a1b42:	6893      	ldr	r3, [r2, #8]
	char *readFrom = buffer;
 80a1b44:	6804      	ldr	r4, [r0, #0]
	int diff = replace.len - find.len;
 80a1b46:	eba3 080b 	sub.w	r8, r3, fp
	char *foundAt;
	if (diff == 0) {
 80a1b4a:	f1b8 0f00 	cmp.w	r8, #0
 80a1b4e:	d10d      	bne.n	80a1b6c <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1b50:	4620      	mov	r0, r4
 80a1b52:	6839      	ldr	r1, [r7, #0]
 80a1b54:	f001 fd16 	bl	80a3584 <strstr>
 80a1b58:	4604      	mov	r4, r0
 80a1b5a:	2800      	cmp	r0, #0
 80a1b5c:	d033      	beq.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>
			memcpy(foundAt, replace.buffer, replace.len);
 80a1b5e:	68b2      	ldr	r2, [r6, #8]
 80a1b60:	6831      	ldr	r1, [r6, #0]
 80a1b62:	f001 fc7d 	bl	80a3460 <memcpy>
			readFrom = foundAt + replace.len;
 80a1b66:	68b0      	ldr	r0, [r6, #8]
 80a1b68:	4404      	add	r4, r0
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1b6a:	e7f1      	b.n	80a1b50 <_ZN6String7replaceERKS_S1_+0x2c>
		}
	} else if (diff < 0) {
 80a1b6c:	db0b      	blt.n	80a1b86 <_ZN6String7replaceERKS_S1_+0x62>
 80a1b6e:	46d1      	mov	r9, sl
 80a1b70:	6809      	ldr	r1, [r1, #0]
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1b72:	4620      	mov	r0, r4
 80a1b74:	9101      	str	r1, [sp, #4]
 80a1b76:	f001 fd05 	bl	80a3584 <strstr>
 80a1b7a:	b340      	cbz	r0, 80a1bce <_ZN6String7replaceERKS_S1_+0xaa>
 80a1b7c:	9901      	ldr	r1, [sp, #4]
			readFrom = foundAt + find.len;
 80a1b7e:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 80a1b82:	44c1      	add	r9, r8
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1b84:	e7f5      	b.n	80a1b72 <_ZN6String7replaceERKS_S1_+0x4e>
		char *writeTo = buffer;
 80a1b86:	46a1      	mov	r9, r4
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1b88:	4620      	mov	r0, r4
 80a1b8a:	6839      	ldr	r1, [r7, #0]
 80a1b8c:	f001 fcfa 	bl	80a3584 <strstr>
 80a1b90:	4682      	mov	sl, r0
 80a1b92:	b1a0      	cbz	r0, 80a1bbe <_ZN6String7replaceERKS_S1_+0x9a>
			unsigned int n = foundAt - readFrom;
 80a1b94:	eba0 0b04 	sub.w	fp, r0, r4
			memcpy(writeTo, readFrom, n);
 80a1b98:	4621      	mov	r1, r4
 80a1b9a:	465a      	mov	r2, fp
 80a1b9c:	4648      	mov	r0, r9
			writeTo += n;
 80a1b9e:	44d9      	add	r9, fp
			memcpy(writeTo, readFrom, n);
 80a1ba0:	f001 fc5e 	bl	80a3460 <memcpy>
			memcpy(writeTo, replace.buffer, replace.len);
 80a1ba4:	4648      	mov	r0, r9
 80a1ba6:	68b2      	ldr	r2, [r6, #8]
 80a1ba8:	6831      	ldr	r1, [r6, #0]
 80a1baa:	f001 fc59 	bl	80a3460 <memcpy>
			len += diff;
 80a1bae:	68ab      	ldr	r3, [r5, #8]
			writeTo += replace.len;
 80a1bb0:	68b2      	ldr	r2, [r6, #8]
			readFrom = foundAt + find.len;
 80a1bb2:	68bc      	ldr	r4, [r7, #8]
			len += diff;
 80a1bb4:	4443      	add	r3, r8
			writeTo += replace.len;
 80a1bb6:	4491      	add	r9, r2
			readFrom = foundAt + find.len;
 80a1bb8:	4454      	add	r4, sl
			len += diff;
 80a1bba:	60ab      	str	r3, [r5, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 80a1bbc:	e7e4      	b.n	80a1b88 <_ZN6String7replaceERKS_S1_+0x64>
		strcpy(writeTo, readFrom);
 80a1bbe:	4621      	mov	r1, r4
 80a1bc0:	4648      	mov	r0, r9
 80a1bc2:	f001 fca1 	bl	80a3508 <strcpy>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 80a1bc6:	4628      	mov	r0, r5
 80a1bc8:	b003      	add	sp, #12
 80a1bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (size == len) return *this;;
 80a1bce:	45ca      	cmp	sl, r9
 80a1bd0:	d0f9      	beq.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80a1bd2:	686b      	ldr	r3, [r5, #4]
 80a1bd4:	454b      	cmp	r3, r9
 80a1bd6:	d323      	bcc.n	80a1c20 <_ZN6String7replaceERKS_S1_+0xfc>
			buffer[len] = 0;
 80a1bd8:	f04f 0900 	mov.w	r9, #0
		int index = len - 1;
 80a1bdc:	68ac      	ldr	r4, [r5, #8]
 80a1bde:	1e62      	subs	r2, r4, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80a1be0:	2a00      	cmp	r2, #0
 80a1be2:	dbf0      	blt.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>
 80a1be4:	4639      	mov	r1, r7
 80a1be6:	4628      	mov	r0, r5
 80a1be8:	f7ff ff54 	bl	80a1a94 <_ZNK6String11lastIndexOfERKS_j>
 80a1bec:	1e04      	subs	r4, r0, #0
 80a1bee:	dbea      	blt.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>
			readFrom = buffer + index + find.len;
 80a1bf0:	68bb      	ldr	r3, [r7, #8]
 80a1bf2:	6829      	ldr	r1, [r5, #0]
 80a1bf4:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80a1bf6:	68aa      	ldr	r2, [r5, #8]
			readFrom = buffer + index + find.len;
 80a1bf8:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80a1bfa:	1ad2      	subs	r2, r2, r3
 80a1bfc:	eb01 0008 	add.w	r0, r1, r8
 80a1c00:	f001 fc3c 	bl	80a347c <memmove>
			len += diff;
 80a1c04:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 80a1c06:	682a      	ldr	r2, [r5, #0]
			len += diff;
 80a1c08:	4443      	add	r3, r8
 80a1c0a:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 80a1c0c:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 80a1c10:	6828      	ldr	r0, [r5, #0]
 80a1c12:	68b2      	ldr	r2, [r6, #8]
 80a1c14:	6831      	ldr	r1, [r6, #0]
 80a1c16:	4420      	add	r0, r4
 80a1c18:	f001 fc22 	bl	80a3460 <memcpy>
			index--;
 80a1c1c:	1e62      	subs	r2, r4, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80a1c1e:	e7df      	b.n	80a1be0 <_ZN6String7replaceERKS_S1_+0xbc>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80a1c20:	4649      	mov	r1, r9
 80a1c22:	4628      	mov	r0, r5
 80a1c24:	f7ff fdf5 	bl	80a1812 <_ZN6String12changeBufferEj>
 80a1c28:	2800      	cmp	r0, #0
 80a1c2a:	d1d5      	bne.n	80a1bd8 <_ZN6String7replaceERKS_S1_+0xb4>
 80a1c2c:	e7cb      	b.n	80a1bc6 <_ZN6String7replaceERKS_S1_+0xa2>

080a1c2e <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
 80a1c2e:	b538      	push	{r3, r4, r5, lr}
 80a1c30:	4604      	mov	r4, r0
	if (index >= len) { return *this; }
 80a1c32:	68a3      	ldr	r3, [r4, #8]
String& String::remove(unsigned int index, unsigned int count){
 80a1c34:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
 80a1c36:	428b      	cmp	r3, r1
 80a1c38:	d911      	bls.n	80a1c5e <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
 80a1c3a:	b182      	cbz	r2, 80a1c5e <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
 80a1c3c:	4411      	add	r1, r2
 80a1c3e:	428b      	cmp	r3, r1
 80a1c40:	bf38      	it	cc
 80a1c42:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
 80a1c44:	6825      	ldr	r5, [r4, #0]
	len = len - count;
 80a1c46:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
 80a1c48:	1813      	adds	r3, r2, r0
	len = len - count;
 80a1c4a:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
 80a1c4c:	1a0a      	subs	r2, r1, r0
 80a1c4e:	18e9      	adds	r1, r5, r3
 80a1c50:	4428      	add	r0, r5
 80a1c52:	f001 fc13 	bl	80a347c <memmove>
	buffer[len] = 0;
 80a1c56:	2100      	movs	r1, #0
 80a1c58:	6822      	ldr	r2, [r4, #0]
 80a1c5a:	68a3      	ldr	r3, [r4, #8]
 80a1c5c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	bd38      	pop	{r3, r4, r5, pc}

080a1c62 <_ZN6String6removeEj>:
        int count = len - index;
 80a1c62:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
 80a1c64:	1a52      	subs	r2, r2, r1
 80a1c66:	f7ff bfe2 	b.w	80a1c2e <_ZN6String6removeEjj>

080a1c6a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c6c:	4606      	mov	r6, r0
 80a1c6e:	460d      	mov	r5, r1
  size_t n = 0;
 80a1c70:	2400      	movs	r4, #0
 80a1c72:	188f      	adds	r7, r1, r2
  while (size--) {
 80a1c74:	42bd      	cmp	r5, r7
 80a1c76:	d00c      	beq.n	80a1c92 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1c78:	6833      	ldr	r3, [r6, #0]
 80a1c7a:	4630      	mov	r0, r6
 80a1c7c:	689b      	ldr	r3, [r3, #8]
 80a1c7e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1c82:	4798      	blx	r3
     if (chunk>=0)
 80a1c84:	1e03      	subs	r3, r0, #0
 80a1c86:	db01      	blt.n	80a1c8c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1c88:	441c      	add	r4, r3
  while (size--) {
 80a1c8a:	e7f3      	b.n	80a1c74 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1c8c:	2c00      	cmp	r4, #0
 80a1c8e:	bf08      	it	eq
 80a1c90:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1c92:	4620      	mov	r0, r4
 80a1c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c96 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1c96:	b570      	push	{r4, r5, r6, lr}
 80a1c98:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1c9a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1c9c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a1c9e:	b149      	cbz	r1, 80a1cb4 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1ca0:	f001 fc55 	bl	80a354e <strlen>
 80a1ca4:	682b      	ldr	r3, [r5, #0]
 80a1ca6:	4602      	mov	r2, r0
 80a1ca8:	4621      	mov	r1, r4
 80a1caa:	4628      	mov	r0, r5
    }
 80a1cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a1cb0:	68db      	ldr	r3, [r3, #12]
 80a1cb2:	4718      	bx	r3
    }
 80a1cb4:	bd70      	pop	{r4, r5, r6, pc}

080a1cb6 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a1cb6:	b508      	push	{r3, lr}
  return write(str);
 80a1cb8:	f7ff ffed 	bl	80a1c96 <_ZN5Print5writeEPKc>
}
 80a1cbc:	bd08      	pop	{r3, pc}

080a1cbe <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a1cbe:	6803      	ldr	r3, [r0, #0]
 80a1cc0:	689b      	ldr	r3, [r3, #8]
 80a1cc2:	4718      	bx	r3

080a1cc4 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1cc4:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1cc6:	210d      	movs	r1, #13
{
 80a1cc8:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1cca:	f7ff fff8 	bl	80a1cbe <_ZN5Print5printEc>
  n += print('\n');
 80a1cce:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a1cd0:	4604      	mov	r4, r0
  n += print('\n');
 80a1cd2:	4628      	mov	r0, r5
 80a1cd4:	f7ff fff3 	bl	80a1cbe <_ZN5Print5printEc>
  return n;
}
 80a1cd8:	4420      	add	r0, r4
 80a1cda:	bd38      	pop	{r3, r4, r5, pc}

080a1cdc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1cdc:	b538      	push	{r3, r4, r5, lr}
 80a1cde:	4605      	mov	r5, r0
  return write(str);
 80a1ce0:	f7ff ffd9 	bl	80a1c96 <_ZN5Print5writeEPKc>
 80a1ce4:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a1ce6:	4628      	mov	r0, r5
 80a1ce8:	f7ff ffec 	bl	80a1cc4 <_ZN5Print7printlnEv>
  return n;
}
 80a1cec:	4420      	add	r0, r4
 80a1cee:	bd38      	pop	{r3, r4, r5, pc}

080a1cf0 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1cf0:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1cf2:	2a01      	cmp	r2, #1
 80a1cf4:	bf98      	it	ls
 80a1cf6:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1cf8:	b530      	push	{r4, r5, lr}
 80a1cfa:	b08b      	sub	sp, #44	; 0x2c
 80a1cfc:	460c      	mov	r4, r1
  *str = '\0';
 80a1cfe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a1d02:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a1d04:	4625      	mov	r5, r4
 80a1d06:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a1d0a:	fb04 5312 	mls	r3, r4, r2, r5
 80a1d0e:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1d10:	2b09      	cmp	r3, #9
 80a1d12:	bf94      	ite	ls
 80a1d14:	3330      	addls	r3, #48	; 0x30
 80a1d16:	3337      	addhi	r3, #55	; 0x37
 80a1d18:	b2db      	uxtb	r3, r3
  } while(n);
 80a1d1a:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1d1c:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a1d20:	d9f0      	bls.n	80a1d04 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a1d22:	f7ff ffb8 	bl	80a1c96 <_ZN5Print5writeEPKc>
}
 80a1d26:	b00b      	add	sp, #44	; 0x2c
 80a1d28:	bd30      	pop	{r4, r5, pc}

080a1d2a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1d2a:	2300      	movs	r3, #0
 80a1d2c:	6840      	ldr	r0, [r0, #4]
 80a1d2e:	461a      	mov	r2, r3
 80a1d30:	4619      	mov	r1, r3
 80a1d32:	f7ff bbb1 	b.w	80a1498 <network_on>

080a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 80a1d36:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 80a1d38:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a1d3a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a1d3c:	b17c      	cbz	r4, 80a1d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a1d3e:	6863      	ldr	r3, [r4, #4]
 80a1d40:	3b01      	subs	r3, #1
 80a1d42:	6063      	str	r3, [r4, #4]
 80a1d44:	b95b      	cbnz	r3, 80a1d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a1d46:	6823      	ldr	r3, [r4, #0]
 80a1d48:	4620      	mov	r0, r4
 80a1d4a:	689b      	ldr	r3, [r3, #8]
 80a1d4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1d4e:	68a3      	ldr	r3, [r4, #8]
 80a1d50:	3b01      	subs	r3, #1
 80a1d52:	60a3      	str	r3, [r4, #8]
 80a1d54:	b91b      	cbnz	r3, 80a1d5e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1d56:	6823      	ldr	r3, [r4, #0]
 80a1d58:	4620      	mov	r0, r4
 80a1d5a:	68db      	ldr	r3, [r3, #12]
 80a1d5c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a1d5e:	4628      	mov	r0, r5
 80a1d60:	bd38      	pop	{r3, r4, r5, pc}

080a1d62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1d62:	680b      	ldr	r3, [r1, #0]
 80a1d64:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1d66:	b113      	cbz	r3, 80a1d6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a1d68:	685a      	ldr	r2, [r3, #4]
 80a1d6a:	3201      	adds	r2, #1
 80a1d6c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
 80a1d6e:	4770      	bx	lr

080a1d70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1d70:	4b01      	ldr	r3, [pc, #4]	; (80a1d78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1d72:	4a02      	ldr	r2, [pc, #8]	; (80a1d7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1d74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a1d76:	4770      	bx	lr
 80a1d78:	20000850 	.word	0x20000850
 80a1d7c:	080a38a4 	.word	0x080a38a4

080a1d80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a1d80:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1d82:	2000      	movs	r0, #0
 80a1d84:	f7ff fbe0 	bl	80a1548 <spark_sync_time_pending>
 80a1d88:	b128      	cbz	r0, 80a1d96 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1d8a:	f7ff fbcd 	bl	80a1528 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1d8e:	f080 0001 	eor.w	r0, r0, #1
 80a1d92:	b2c0      	uxtb	r0, r0
    }
 80a1d94:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a1d96:	2001      	movs	r0, #1
 80a1d98:	e7fc      	b.n	80a1d94 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

080a1d9a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a1d9a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a1d9c:	2000      	movs	r0, #0
 80a1d9e:	f7ff f99d 	bl	80a10dc <hal_rtc_time_is_valid>
    if (rtcstate)
 80a1da2:	4604      	mov	r4, r0
 80a1da4:	b9a0      	cbnz	r0, 80a1dd0 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a1da6:	f7ff fb13 	bl	80a13d0 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a1daa:	2801      	cmp	r0, #1
 80a1dac:	d110      	bne.n	80a1dd0 <_ZN9TimeClass7isValidEv+0x36>
 80a1dae:	4620      	mov	r0, r4
 80a1db0:	f7ff fb36 	bl	80a1420 <system_thread_get_state>
 80a1db4:	b960      	cbnz	r0, 80a1dd0 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a1db6:	f7ff ffe3 	bl	80a1d80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1dba:	b910      	cbnz	r0, 80a1dc2 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a1dbc:	f7ff fbac 	bl	80a1518 <spark_process>
        while (_while() && !_condition()) {
 80a1dc0:	e7f9      	b.n	80a1db6 <_ZN9TimeClass7isValidEv+0x1c>
 80a1dc2:	f7ff ffdd 	bl	80a1d80 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a1dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a1dca:	2000      	movs	r0, #0
 80a1dcc:	f7ff b986 	b.w	80a10dc <hal_rtc_time_is_valid>
}
 80a1dd0:	4620      	mov	r0, r4
 80a1dd2:	bd10      	pop	{r4, pc}

080a1dd4 <_ZN9TimeClass3nowEv>:
{
 80a1dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a1dd6:	f7ff ffe0 	bl	80a1d9a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a1dda:	2210      	movs	r2, #16
 80a1ddc:	2100      	movs	r1, #0
 80a1dde:	4668      	mov	r0, sp
 80a1de0:	f001 fb66 	bl	80a34b0 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a1de4:	2100      	movs	r1, #0
 80a1de6:	4668      	mov	r0, sp
 80a1de8:	f7ff f980 	bl	80a10ec <hal_rtc_get_time>
}
 80a1dec:	9800      	ldr	r0, [sp, #0]
 80a1dee:	b005      	add	sp, #20
 80a1df0:	f85d fb04 	ldr.w	pc, [sp], #4

080a1df4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1df4:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1df6:	681a      	ldr	r2, [r3, #0]
 80a1df8:	4b02      	ldr	r3, [pc, #8]	; (80a1e04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1dfa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a1dfc:	4770      	bx	lr
 80a1dfe:	bf00      	nop
 80a1e00:	20000004 	.word	0x20000004
 80a1e04:	20000854 	.word	0x20000854

080a1e08 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1e08:	2100      	movs	r1, #0
 80a1e0a:	f7ff baf1 	b.w	80a13f0 <system_delay_ms>

080a1e0e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1e0e:	b510      	push	{r4, lr}
 80a1e10:	4604      	mov	r4, r0
 80a1e12:	f7fe f99e 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
 80a1e16:	4620      	mov	r0, r4
 80a1e18:	bd10      	pop	{r4, pc}

080a1e1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 80a1e1a:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e1c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a1e1e:	460b      	mov	r3, r1
 80a1e20:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1e22:	c803      	ldmia	r0, {r0, r1}
 80a1e24:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1e28:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1e2c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a1e34:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1e38:	b002      	add	sp, #8
 80a1e3a:	bd10      	pop	{r4, pc}

080a1e3c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a1e3c:	2300      	movs	r3, #0
 80a1e3e:	4803      	ldr	r0, [pc, #12]	; (80a1e4c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1e40:	4a03      	ldr	r2, [pc, #12]	; (80a1e50 <_GLOBAL__sub_I_RGB+0x14>)
 80a1e42:	4904      	ldr	r1, [pc, #16]	; (80a1e54 <_GLOBAL__sub_I_RGB+0x18>)
 80a1e44:	6083      	str	r3, [r0, #8]
 80a1e46:	f000 bf03 	b.w	80a2c50 <__aeabi_atexit>
 80a1e4a:	bf00      	nop
 80a1e4c:	20000858 	.word	0x20000858
 80a1e50:	20000070 	.word	0x20000070
 80a1e54:	080a1e0f 	.word	0x080a1e0f

080a1e58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a1e58:	4b01      	ldr	r3, [pc, #4]	; (80a1e60 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a1e5a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a1e5c:	4770      	bx	lr
 80a1e5e:	bf00      	nop
 80a1e60:	20000008 	.word	0x20000008

080a1e64 <serialEventRun>:
{
 80a1e64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1e66:	4b13      	ldr	r3, [pc, #76]	; (80a1eb4 <serialEventRun+0x50>)
 80a1e68:	b143      	cbz	r3, 80a1e7c <serialEventRun+0x18>
 80a1e6a:	f000 fbf7 	bl	80a265c <_Z16_fetch_usbserialv>
 80a1e6e:	6803      	ldr	r3, [r0, #0]
 80a1e70:	691b      	ldr	r3, [r3, #16]
 80a1e72:	4798      	blx	r3
 80a1e74:	2800      	cmp	r0, #0
 80a1e76:	dd01      	ble.n	80a1e7c <serialEventRun+0x18>
        serialEvent();
 80a1e78:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a1e7c:	4b0e      	ldr	r3, [pc, #56]	; (80a1eb8 <serialEventRun+0x54>)
 80a1e7e:	b143      	cbz	r3, 80a1e92 <serialEventRun+0x2e>
 80a1e80:	f000 fcc2 	bl	80a2808 <_Z22__fetch_global_Serial1v>
 80a1e84:	6803      	ldr	r3, [r0, #0]
 80a1e86:	691b      	ldr	r3, [r3, #16]
 80a1e88:	4798      	blx	r3
 80a1e8a:	2800      	cmp	r0, #0
 80a1e8c:	dd01      	ble.n	80a1e92 <serialEventRun+0x2e>
        serialEvent1();
 80a1e8e:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a1e92:	4b0a      	ldr	r3, [pc, #40]	; (80a1ebc <serialEventRun+0x58>)
 80a1e94:	b10b      	cbz	r3, 80a1e9a <serialEventRun+0x36>
 80a1e96:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1e9a:	4b09      	ldr	r3, [pc, #36]	; (80a1ec0 <serialEventRun+0x5c>)
 80a1e9c:	b143      	cbz	r3, 80a1eb0 <serialEventRun+0x4c>
 80a1e9e:	f000 fc0d 	bl	80a26bc <_Z17_fetch_usbserial1v>
 80a1ea2:	6803      	ldr	r3, [r0, #0]
 80a1ea4:	691b      	ldr	r3, [r3, #16]
 80a1ea6:	4798      	blx	r3
 80a1ea8:	2800      	cmp	r0, #0
 80a1eaa:	dd01      	ble.n	80a1eb0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a1eac:	f3af 8000 	nop.w
}
 80a1eb0:	bd08      	pop	{r3, pc}
 80a1eb2:	bf00      	nop
	...

080a1ec4 <_post_loop>:
{
 80a1ec4:	b508      	push	{r3, lr}
	serialEventRun();
 80a1ec6:	f7ff ffcd 	bl	80a1e64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1eca:	f7ff f8ef 	bl	80a10ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1ece:	4b01      	ldr	r3, [pc, #4]	; (80a1ed4 <_post_loop+0x10>)
 80a1ed0:	6018      	str	r0, [r3, #0]
}
 80a1ed2:	bd08      	pop	{r3, pc}
 80a1ed4:	200008d0 	.word	0x200008d0

080a1ed8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1ed8:	4802      	ldr	r0, [pc, #8]	; (80a1ee4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1eda:	4a03      	ldr	r2, [pc, #12]	; (80a1ee8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1edc:	4903      	ldr	r1, [pc, #12]	; (80a1eec <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1ede:	1a12      	subs	r2, r2, r0
 80a1ee0:	f001 babe 	b.w	80a3460 <memcpy>
 80a1ee4:	40024000 	.word	0x40024000
 80a1ee8:	40024004 	.word	0x40024004
 80a1eec:	080a3a20 	.word	0x080a3a20

080a1ef0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ef0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1ef2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1ef4:	461a      	mov	r2, r3
 80a1ef6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1efa:	9300      	str	r3, [sp, #0]
 80a1efc:	f7ff faa2 	bl	80a1444 <system_ctrl_set_result>
}
 80a1f00:	b003      	add	sp, #12
 80a1f02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1f08 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a1f08:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1f0a:	8843      	ldrh	r3, [r0, #2]
 80a1f0c:	2b0a      	cmp	r3, #10
 80a1f0e:	d008      	beq.n	80a1f22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1f10:	2b50      	cmp	r3, #80	; 0x50
 80a1f12:	d10b      	bne.n	80a1f2c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a1f14:	4b09      	ldr	r3, [pc, #36]	; (80a1f3c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1f16:	681b      	ldr	r3, [r3, #0]
 80a1f18:	b14b      	cbz	r3, 80a1f2e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a1f1a:	b003      	add	sp, #12
 80a1f1c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a1f20:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a1f22:	f7ff ffe5 	bl	80a1ef0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a1f26:	b003      	add	sp, #12
 80a1f28:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1f2c:	2300      	movs	r3, #0
 80a1f2e:	461a      	mov	r2, r3
 80a1f30:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1f34:	9300      	str	r3, [sp, #0]
 80a1f36:	f7ff fa85 	bl	80a1444 <system_ctrl_set_result>
}
 80a1f3a:	e7f4      	b.n	80a1f26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a1f3c:	2000086c 	.word	0x2000086c

080a1f40 <module_user_init_hook>:
{
 80a1f40:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1f42:	4c12      	ldr	r4, [pc, #72]	; (80a1f8c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a1f44:	2100      	movs	r1, #0
 80a1f46:	4812      	ldr	r0, [pc, #72]	; (80a1f90 <module_user_init_hook+0x50>)
 80a1f48:	f7ff fb36 	bl	80a15b8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1f4c:	4d11      	ldr	r5, [pc, #68]	; (80a1f94 <module_user_init_hook+0x54>)
 80a1f4e:	6823      	ldr	r3, [r4, #0]
 80a1f50:	42ab      	cmp	r3, r5
 80a1f52:	bf0c      	ite	eq
 80a1f54:	2201      	moveq	r2, #1
 80a1f56:	2200      	movne	r2, #0
 80a1f58:	4b0f      	ldr	r3, [pc, #60]	; (80a1f98 <module_user_init_hook+0x58>)
 80a1f5a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1f5c:	d002      	beq.n	80a1f64 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a1f5e:	f7ff ffbb 	bl	80a1ed8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1f62:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1f64:	f7ff f892 	bl	80a108c <HAL_RNG_GetRandomNumber>
 80a1f68:	4604      	mov	r4, r0
    srand(seed);
 80a1f6a:	f001 faa9 	bl	80a34c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1f6e:	4b0b      	ldr	r3, [pc, #44]	; (80a1f9c <module_user_init_hook+0x5c>)
 80a1f70:	b113      	cbz	r3, 80a1f78 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1f78:	2100      	movs	r1, #0
 80a1f7a:	4808      	ldr	r0, [pc, #32]	; (80a1f9c <module_user_init_hook+0x5c>)
 80a1f7c:	f7ff faec 	bl	80a1558 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1f84:	2100      	movs	r1, #0
 80a1f86:	4806      	ldr	r0, [pc, #24]	; (80a1fa0 <module_user_init_hook+0x60>)
 80a1f88:	f7ff ba52 	b.w	80a1430 <system_ctrl_set_app_request_handler>
 80a1f8c:	40024000 	.word	0x40024000
 80a1f90:	080a1e59 	.word	0x080a1e59
 80a1f94:	9a271c1e 	.word	0x9a271c1e
 80a1f98:	20000868 	.word	0x20000868
 80a1f9c:	00000000 	.word	0x00000000
 80a1fa0:	080a1f09 	.word	0x080a1f09

080a1fa4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1fa4:	4770      	bx	lr

080a1fa6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a1fa6:	2000      	movs	r0, #0
 80a1fa8:	4770      	bx	lr

080a1faa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1faa:	b510      	push	{r4, lr}
 80a1fac:	4604      	mov	r4, r0
 80a1fae:	2110      	movs	r1, #16
 80a1fb0:	f000 fe53 	bl	80a2c5a <_ZdlPvj>
 80a1fb4:	4620      	mov	r0, r4
 80a1fb6:	bd10      	pop	{r4, pc}

080a1fb8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a1fb8:	b508      	push	{r3, lr}
      { delete this; }
 80a1fba:	f7ff fff6 	bl	80a1faa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1fbe:	bd08      	pop	{r3, pc}

080a1fc0 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1fc0:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1fc2:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a1fc4:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a1fc8:	6002      	str	r2, [r0, #0]
 80a1fca:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1fcc:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fce:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1fd0:	680c      	ldr	r4, [r1, #0]
 80a1fd2:	8085      	strh	r5, [r0, #4]
 80a1fd4:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1fd6:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1fd8:	bd30      	pop	{r4, r5, pc}

080a1fda <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1fda:	b510      	push	{r4, lr}
 80a1fdc:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1fde:	6800      	ldr	r0, [r0, #0]
 80a1fe0:	f7ff faca 	bl	80a1578 <free>
}
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	bd10      	pop	{r4, pc}

080a1fe8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a1fe8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1fea:	68c4      	ldr	r4, [r0, #12]
 80a1fec:	b1f4      	cbz	r4, 80a202c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a1fee:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1ff0:	2b02      	cmp	r3, #2
 80a1ff2:	d103      	bne.n	80a1ffc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1ff4:	f104 000c 	add.w	r0, r4, #12
 80a1ff8:	f7ff ffef 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a1ffc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1ffe:	b135      	cbz	r5, 80a200e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
 80a2000:	4628      	mov	r0, r5
 80a2002:	f7fe f8a6 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
 80a2006:	2110      	movs	r1, #16
 80a2008:	4628      	mov	r0, r5
 80a200a:	f000 fe26 	bl	80a2c5a <_ZdlPvj>
 80a200e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2010:	b135      	cbz	r5, 80a2020 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a2012:	4628      	mov	r0, r5
 80a2014:	f7fe f89d 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
 80a2018:	2110      	movs	r1, #16
 80a201a:	4628      	mov	r0, r5
 80a201c:	f000 fe1d 	bl	80a2c5a <_ZdlPvj>
 80a2020:	4620      	mov	r0, r4
 80a2022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2026:	2114      	movs	r1, #20
 80a2028:	f000 be17 	b.w	80a2c5a <_ZdlPvj>
 80a202c:	bd38      	pop	{r3, r4, r5, pc}

080a202e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a202e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2030:	460e      	mov	r6, r1
 80a2032:	4604      	mov	r4, r0
 80a2034:	f856 3b04 	ldr.w	r3, [r6], #4
 80a2038:	460d      	mov	r5, r1
 80a203a:	a801      	add	r0, sp, #4
 80a203c:	4631      	mov	r1, r6
 80a203e:	9300      	str	r3, [sp, #0]
 80a2040:	f7ff fe8f 	bl	80a1d62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2044:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a2046:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a2048:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a204a:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a204c:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a204e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a2050:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a2052:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a2054:	f7ff fe6f 	bl	80a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2058:	4630      	mov	r0, r6
 80a205a:	f7ff fe6c 	bl	80a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a205e:	4628      	mov	r0, r5
 80a2060:	2108      	movs	r1, #8
 80a2062:	f000 fdfa 	bl	80a2c5a <_ZdlPvj>
        return p;
    }
 80a2066:	4620      	mov	r0, r4
 80a2068:	b002      	add	sp, #8
 80a206a:	bd70      	pop	{r4, r5, r6, pc}

080a206c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 80a206c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a206e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2070:	b90a      	cbnz	r2, 80a2076 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2072:	f000 fdf6 	bl	80a2c62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2076:	68c3      	ldr	r3, [r0, #12]
    }
 80a2078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a207c:	4718      	bx	r3

080a207e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a207e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a2080:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a2082:	f100 0110 	add.w	r1, r0, #16
 80a2086:	f7ff fff1 	bl	80a206c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a208a:	bd08      	pop	{r3, pc}

080a208c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a208c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a208e:	b510      	push	{r4, lr}
      if (_M_empty())
 80a2090:	b90a      	cbnz	r2, 80a2096 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2092:	f000 fde6 	bl	80a2c62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2096:	68c3      	ldr	r3, [r0, #12]
    }
 80a2098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a209c:	4718      	bx	r3

080a209e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a209e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a20a0:	6800      	ldr	r0, [r0, #0]
 80a20a2:	f100 0110 	add.w	r1, r0, #16
 80a20a6:	f7ff fff1 	bl	80a208c <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a20aa:	bd08      	pop	{r3, pc}

080a20ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a20ac:	b538      	push	{r3, r4, r5, lr}
 80a20ae:	2300      	movs	r3, #0
 80a20b0:	4604      	mov	r4, r0
 80a20b2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a20b4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a20b6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a20b8:	f7fd ffef 	bl	80a009a <_Znwj>
 80a20bc:	b128      	cbz	r0, 80a20ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a20be:	2301      	movs	r3, #1
 80a20c0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a20c4:	4b02      	ldr	r3, [pc, #8]	; (80a20d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a20c6:	60c5      	str	r5, [r0, #12]
 80a20c8:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a20ca:	6020      	str	r0, [r4, #0]
	}
 80a20cc:	4620      	mov	r0, r4
 80a20ce:	bd38      	pop	{r3, r4, r5, pc}
 80a20d0:	080a38cc 	.word	0x080a38cc

080a20d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a20d4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a20d6:	2300      	movs	r3, #0
 80a20d8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a20da:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a20dc:	4604      	mov	r4, r0
 80a20de:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a20e0:	b12b      	cbz	r3, 80a20ee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a20e2:	2202      	movs	r2, #2
 80a20e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a20e6:	68eb      	ldr	r3, [r5, #12]
 80a20e8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a20ea:	68ab      	ldr	r3, [r5, #8]
 80a20ec:	60a3      	str	r3, [r4, #8]
    }
 80a20ee:	4620      	mov	r0, r4
 80a20f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a20f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a20f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20f6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a20f8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a20fa:	4668      	mov	r0, sp
 80a20fc:	f7ff ff60 	bl	80a1fc0 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2100:	f04f 0302 	mov.w	r3, #2
 80a2104:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a2108:	2a00      	cmp	r2, #0
 80a210a:	d103      	bne.n	80a2114 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a210c:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a2110:	2900      	cmp	r1, #0
 80a2112:	d1f7      	bne.n	80a2104 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a2114:	d125      	bne.n	80a2162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a2116:	f104 050c 	add.w	r5, r4, #12
 80a211a:	4669      	mov	r1, sp
 80a211c:	4628      	mov	r0, r5
 80a211e:	f7ff ff4f 	bl	80a1fc0 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a2122:	2301      	movs	r3, #1
 80a2124:	f3bf 8f5b 	dmb	ish
 80a2128:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a212a:	2000      	movs	r0, #0
 80a212c:	f3bf 8f5b 	dmb	ish
 80a2130:	f104 0308 	add.w	r3, r4, #8
 80a2134:	e853 6f00 	ldrex	r6, [r3]
 80a2138:	e843 0200 	strex	r2, r0, [r3]
 80a213c:	2a00      	cmp	r2, #0
 80a213e:	d1f9      	bne.n	80a2134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a2140:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2144:	b16e      	cbz	r6, 80a2162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a2146:	f7ff f95b 	bl	80a1400 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a214a:	b178      	cbz	r0, 80a216c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a214c:	4629      	mov	r1, r5
 80a214e:	4630      	mov	r0, r6
 80a2150:	f7ff ff8c 	bl	80a206c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a2154:	4630      	mov	r0, r6
 80a2156:	f7fd fffc 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a215a:	2110      	movs	r1, #16
 80a215c:	4630      	mov	r0, r6
 80a215e:	f000 fd7c 	bl	80a2c5a <_ZdlPvj>
        p_->setError(std::move(error));
 80a2162:	4668      	mov	r0, sp
 80a2164:	f7ff ff39 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
    }
 80a2168:	b009      	add	sp, #36	; 0x24
 80a216a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a216c:	4631      	mov	r1, r6
 80a216e:	a802      	add	r0, sp, #8
 80a2170:	f7ff ffb0 	bl	80a20d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a2174:	68e0      	ldr	r0, [r4, #12]
 80a2176:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a217a:	b108      	cbz	r0, 80a2180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a217c:	f001 f9cc 	bl	80a3518 <strdup>
        type_(type) {
 80a2180:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2182:	2010      	movs	r0, #16
 80a2184:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2188:	f7fd ff87 	bl	80a009a <_Znwj>
 80a218c:	4605      	mov	r5, r0
 80a218e:	b1e8      	cbz	r0, 80a21cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a2190:	2700      	movs	r7, #0
 80a2192:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2194:	2018      	movs	r0, #24
 80a2196:	f7fd ff80 	bl	80a009a <_Znwj>
 80a219a:	4604      	mov	r4, r0
 80a219c:	b188      	cbz	r0, 80a21c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a219e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a21a0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a21a2:	a802      	add	r0, sp, #8
 80a21a4:	f7ff fe39 	bl	80a1e1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21a8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a21aa:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a21ac:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21ae:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a21b0:	9204      	str	r2, [sp, #16]
 80a21b2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a21b4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a21b6:	60e3      	str	r3, [r4, #12]
 80a21b8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a21bc:	9205      	str	r2, [sp, #20]
 80a21be:	f7ff feff 	bl	80a1fc0 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a21c2:	4b08      	ldr	r3, [pc, #32]	; (80a21e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a21c4:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a21c6:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a21c8:	4b07      	ldr	r3, [pc, #28]	; (80a21e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a21ca:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a21cc:	a806      	add	r0, sp, #24
 80a21ce:	f7ff ff04 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a21d2:	a802      	add	r0, sp, #8
 80a21d4:	f7fd ffbd 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a21d8:	2200      	movs	r2, #0
 80a21da:	4629      	mov	r1, r5
 80a21dc:	4803      	ldr	r0, [pc, #12]	; (80a21ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a21de:	f7ff f917 	bl	80a1410 <application_thread_invoke>
 80a21e2:	e7b7      	b.n	80a2154 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a21e4:	080a207f 	.word	0x080a207f
 80a21e8:	080a2315 	.word	0x080a2315
 80a21ec:	080a288d 	.word	0x080a288d

080a21f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a21f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a21f4:	b08a      	sub	sp, #40	; 0x28
 80a21f6:	4605      	mov	r5, r0
 80a21f8:	460c      	mov	r4, r1
 80a21fa:	4617      	mov	r7, r2
 80a21fc:	4698      	mov	r8, r3
 80a21fe:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2202:	f7ff f991 	bl	80a1528 <spark_cloud_flag_connected>
 80a2206:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a2208:	4682      	mov	sl, r0
 80a220a:	bb38      	cbnz	r0, 80a225c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a220c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a2210:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2212:	a905      	add	r1, sp, #20
 80a2214:	4630      	mov	r0, r6
 80a2216:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a221a:	f7ff fed1 	bl	80a1fc0 <_ZN8particle5ErrorC1EOS0_>
 80a221e:	2014      	movs	r0, #20
 80a2220:	f7fd ff3b 	bl	80a009a <_Znwj>
 80a2224:	4604      	mov	r4, r0
 80a2226:	b148      	cbz	r0, 80a223c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a2228:	2302      	movs	r3, #2
 80a222a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a222c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a222e:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2232:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a2234:	4631      	mov	r1, r6
 80a2236:	300c      	adds	r0, #12
 80a2238:	f7ff fec2 	bl	80a1fc0 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a223c:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a223e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2240:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a2244:	f7ff ff32 	bl	80a20ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2248:	4630      	mov	r0, r6
 80a224a:	f7ff fec6 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a224e:	a805      	add	r0, sp, #20
 80a2250:	f7ff fec3 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a2254:	4628      	mov	r0, r5
 80a2256:	b00a      	add	sp, #40	; 0x28
 80a2258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a225c:	230c      	movs	r3, #12
 80a225e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2262:	2014      	movs	r0, #20
 80a2264:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a2268:	9307      	str	r3, [sp, #28]
 80a226a:	f7fd ff16 	bl	80a009a <_Znwj>
 80a226e:	4601      	mov	r1, r0
 80a2270:	b128      	cbz	r0, 80a227e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2272:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a2276:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a227a:	f880 a001 	strb.w	sl, [r0, #1]
 80a227e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a2280:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a2282:	f7ff ff13 	bl	80a20ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a2286:	4b22      	ldr	r3, [pc, #136]	; (80a2310 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2288:	2008      	movs	r0, #8
 80a228a:	9308      	str	r3, [sp, #32]
 80a228c:	f7fd ff05 	bl	80a009a <_Znwj>
 80a2290:	4682      	mov	sl, r0
 80a2292:	b128      	cbz	r0, 80a22a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2294:	9b03      	ldr	r3, [sp, #12]
 80a2296:	a904      	add	r1, sp, #16
 80a2298:	f840 3b04 	str.w	r3, [r0], #4
 80a229c:	f7ff fd61 	bl	80a1d62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a22a0:	4642      	mov	r2, r8
 80a22a2:	4639      	mov	r1, r7
 80a22a4:	4620      	mov	r0, r4
 80a22a6:	9600      	str	r6, [sp, #0]
 80a22a8:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a22ac:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a22b0:	f7ff f942 	bl	80a1538 <spark_send_event>
 80a22b4:	b9b8      	cbnz	r0, 80a22e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a22b6:	9b03      	ldr	r3, [sp, #12]
 80a22b8:	785b      	ldrb	r3, [r3, #1]
 80a22ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a22be:	b993      	cbnz	r3, 80a22e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a22c0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a22c4:	a905      	add	r1, sp, #20
 80a22c6:	a803      	add	r0, sp, #12
 80a22c8:	9205      	str	r2, [sp, #20]
 80a22ca:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a22ce:	f7ff ff11 	bl	80a20f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a22d2:	a805      	add	r0, sp, #20
 80a22d4:	f7ff fe81 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a22d8:	a805      	add	r0, sp, #20
 80a22da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a22dc:	f7ff fea7 	bl	80a202e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a22e0:	a806      	add	r0, sp, #24
 80a22e2:	f7ff fd28 	bl	80a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a22e6:	9b03      	ldr	r3, [sp, #12]
 80a22e8:	a904      	add	r1, sp, #16
 80a22ea:	a806      	add	r0, sp, #24
 80a22ec:	9305      	str	r3, [sp, #20]
 80a22ee:	f7ff fd38 	bl	80a1d62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a22f2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a22f4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a22f6:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a22f8:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a22fa:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a22fc:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a22fe:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a2300:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a2302:	f7ff fd18 	bl	80a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2306:	a804      	add	r0, sp, #16
 80a2308:	f7ff fd15 	bl	80a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a230c:	e7a2      	b.n	80a2254 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a230e:	bf00      	nop
 80a2310:	080a23d9 	.word	0x080a23d9

080a2314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a2314:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2318:	4605      	mov	r5, r0
	  switch (__op)
 80a231a:	d007      	beq.n	80a232c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a231c:	2a03      	cmp	r2, #3
 80a231e:	d018      	beq.n	80a2352 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a2320:	2a01      	cmp	r2, #1
 80a2322:	d101      	bne.n	80a2328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a2324:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2326:	6003      	str	r3, [r0, #0]
	}
 80a2328:	2000      	movs	r0, #0
 80a232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a232c:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a232e:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a2330:	f7fd feb3 	bl	80a009a <_Znwj>
 80a2334:	4604      	mov	r4, r0
 80a2336:	b150      	cbz	r0, 80a234e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2338:	4631      	mov	r1, r6
 80a233a:	f7ff fecb 	bl	80a20d4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a233e:	6930      	ldr	r0, [r6, #16]
 80a2340:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a2344:	b108      	cbz	r0, 80a234a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a2346:	f001 f8e7 	bl	80a3518 <strdup>
        type_(type) {
 80a234a:	6120      	str	r0, [r4, #16]
 80a234c:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a234e:	602c      	str	r4, [r5, #0]
	}
 80a2350:	e7ea      	b.n	80a2328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a2352:	6804      	ldr	r4, [r0, #0]
 80a2354:	2c00      	cmp	r4, #0
 80a2356:	d0e7      	beq.n	80a2328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a2358:	f104 0010 	add.w	r0, r4, #16
 80a235c:	f7ff fe3d 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a2360:	4620      	mov	r0, r4
 80a2362:	f7fd fef6 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a2366:	2118      	movs	r1, #24
 80a2368:	4620      	mov	r0, r4
 80a236a:	f000 fc76 	bl	80a2c5a <_ZdlPvj>
 80a236e:	e7db      	b.n	80a2328 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a2370 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a2370:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a2372:	2300      	movs	r3, #0
 80a2374:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a2376:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a2378:	4604      	mov	r4, r0
 80a237a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a237c:	b12b      	cbz	r3, 80a238a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a237e:	2202      	movs	r2, #2
 80a2380:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2382:	68eb      	ldr	r3, [r5, #12]
 80a2384:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2386:	68ab      	ldr	r3, [r5, #8]
 80a2388:	60a3      	str	r3, [r4, #8]
    }
 80a238a:	4620      	mov	r0, r4
 80a238c:	bd38      	pop	{r3, r4, r5, pc}

080a238e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a238e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2390:	b570      	push	{r4, r5, r6, lr}
 80a2392:	4604      	mov	r4, r0
	  switch (__op)
 80a2394:	d007      	beq.n	80a23a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a2396:	2a03      	cmp	r2, #3
 80a2398:	d012      	beq.n	80a23c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a239a:	2a01      	cmp	r2, #1
 80a239c:	d101      	bne.n	80a23a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a239e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a23a0:	6003      	str	r3, [r0, #0]
	}
 80a23a2:	2000      	movs	r0, #0
 80a23a4:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a23a6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a23a8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a23aa:	f7fd fe76 	bl	80a009a <_Znwj>
 80a23ae:	4605      	mov	r5, r0
 80a23b0:	b120      	cbz	r0, 80a23bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a23b2:	4631      	mov	r1, r6
 80a23b4:	f7ff ffdc 	bl	80a2370 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a23b8:	7c33      	ldrb	r3, [r6, #16]
 80a23ba:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a23bc:	6025      	str	r5, [r4, #0]
	}
 80a23be:	e7f0      	b.n	80a23a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a23c0:	6804      	ldr	r4, [r0, #0]
 80a23c2:	2c00      	cmp	r4, #0
 80a23c4:	d0ed      	beq.n	80a23a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a23c6:	4620      	mov	r0, r4
 80a23c8:	f7fd fec3 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a23cc:	2114      	movs	r1, #20
 80a23ce:	4620      	mov	r0, r4
 80a23d0:	f000 fc43 	bl	80a2c5a <_ZdlPvj>
 80a23d4:	e7e5      	b.n	80a23a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a23d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23da:	4604      	mov	r4, r0
 80a23dc:	b089      	sub	sp, #36	; 0x24
 80a23de:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a23e0:	a801      	add	r0, sp, #4
 80a23e2:	4611      	mov	r1, r2
 80a23e4:	f7ff fe23 	bl	80a202e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a23e8:	b1a4      	cbz	r4, 80a2414 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a23ea:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a23ec:	b11d      	cbz	r5, 80a23f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a23ee:	4628      	mov	r0, r5
 80a23f0:	f001 f892 	bl	80a3518 <strdup>
 80a23f4:	4605      	mov	r5, r0
 80a23f6:	a801      	add	r0, sp, #4
 80a23f8:	a903      	add	r1, sp, #12
        type_(type) {
 80a23fa:	9503      	str	r5, [sp, #12]
 80a23fc:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a2400:	f7ff fe78 	bl	80a20f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2404:	a803      	add	r0, sp, #12
 80a2406:	f7ff fde8 	bl	80a1fda <_ZN8particle5ErrorD1Ev>
 80a240a:	a802      	add	r0, sp, #8
 80a240c:	f7ff fc93 	bl	80a1d36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a2410:	b009      	add	sp, #36	; 0x24
 80a2412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a2414:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a2416:	9d01      	ldr	r5, [sp, #4]
 80a2418:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a241c:	2a00      	cmp	r2, #0
 80a241e:	d103      	bne.n	80a2428 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a2420:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a2424:	2900      	cmp	r1, #0
 80a2426:	d1f7      	bne.n	80a2418 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a2428:	d1ef      	bne.n	80a240a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a242a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a242c:	f3bf 8f5b 	dmb	ish
 80a2430:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a2432:	f3bf 8f5b 	dmb	ish
 80a2436:	1d2b      	adds	r3, r5, #4
 80a2438:	e853 6f00 	ldrex	r6, [r3]
 80a243c:	e843 4200 	strex	r2, r4, [r3]
 80a2440:	2a00      	cmp	r2, #0
 80a2442:	d1f9      	bne.n	80a2438 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a2444:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a2448:	2e00      	cmp	r6, #0
 80a244a:	d0de      	beq.n	80a240a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a244c:	4620      	mov	r0, r4
 80a244e:	f7fe ffd7 	bl	80a1400 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a2452:	4607      	mov	r7, r0
 80a2454:	b160      	cbz	r0, 80a2470 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2456:	4630      	mov	r0, r6
 80a2458:	f105 010c 	add.w	r1, r5, #12
 80a245c:	f7ff fe16 	bl	80a208c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a2460:	4630      	mov	r0, r6
 80a2462:	f7fd fe76 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a2466:	2110      	movs	r1, #16
 80a2468:	4630      	mov	r0, r6
 80a246a:	f000 fbf6 	bl	80a2c5a <_ZdlPvj>
 80a246e:	e7cc      	b.n	80a240a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2470:	4631      	mov	r1, r6
 80a2472:	a803      	add	r0, sp, #12
 80a2474:	f7ff ff7c 	bl	80a2370 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2478:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a247a:	2010      	movs	r0, #16
 80a247c:	f88d 301c 	strb.w	r3, [sp, #28]
 80a2480:	f7fd fe0b 	bl	80a009a <_Znwj>
 80a2484:	4605      	mov	r5, r0
 80a2486:	b1d0      	cbz	r0, 80a24be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a2488:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a248a:	2014      	movs	r0, #20
 80a248c:	f7fd fe05 	bl	80a009a <_Znwj>
 80a2490:	4604      	mov	r4, r0
 80a2492:	b178      	cbz	r0, 80a24b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a2494:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a2496:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a2498:	a803      	add	r0, sp, #12
 80a249a:	f7ff fcbe 	bl	80a1e1a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a249e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a24a0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24a2:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a24a4:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a24a6:	9205      	str	r2, [sp, #20]
 80a24a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24aa:	60e3      	str	r3, [r4, #12]
 80a24ac:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a24b0:	9206      	str	r2, [sp, #24]
 80a24b2:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a24b4:	4b06      	ldr	r3, [pc, #24]	; (80a24d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a24b6:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a24b8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a24ba:	4b06      	ldr	r3, [pc, #24]	; (80a24d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a24bc:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a24be:	a803      	add	r0, sp, #12
 80a24c0:	f7fd fe47 	bl	80a0152 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a24c4:	2200      	movs	r2, #0
 80a24c6:	4629      	mov	r1, r5
 80a24c8:	4803      	ldr	r0, [pc, #12]	; (80a24d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a24ca:	f7fe ffa1 	bl	80a1410 <application_thread_invoke>
 80a24ce:	e7c7      	b.n	80a2460 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a24d0:	080a209f 	.word	0x080a209f
 80a24d4:	080a238f 	.word	0x080a238f
 80a24d8:	080a288d 	.word	0x080a288d

080a24dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24dc:	4770      	bx	lr

080a24de <_ZN9IPAddressD0Ev>:
 80a24de:	b510      	push	{r4, lr}
 80a24e0:	4604      	mov	r4, r0
 80a24e2:	2118      	movs	r1, #24
 80a24e4:	f000 fbb9 	bl	80a2c5a <_ZdlPvj>
 80a24e8:	4620      	mov	r0, r4
 80a24ea:	bd10      	pop	{r4, pc}

080a24ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a24ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24ee:	460e      	mov	r6, r1
 80a24f0:	2400      	movs	r4, #0
 80a24f2:	f100 0708 	add.w	r7, r0, #8
 80a24f6:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a24f8:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a24fc:	220a      	movs	r2, #10
 80a24fe:	4630      	mov	r0, r6
 80a2500:	f7ff fbf6 	bl	80a1cf0 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2504:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2506:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a2508:	d101      	bne.n	80a250e <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a250a:	4620      	mov	r0, r4
 80a250c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a250e:	2c00      	cmp	r4, #0
 80a2510:	d0f2      	beq.n	80a24f8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2512:	212e      	movs	r1, #46	; 0x2e
 80a2514:	4630      	mov	r0, r6
 80a2516:	f7ff fbd2 	bl	80a1cbe <_ZN5Print5printEc>
 80a251a:	4404      	add	r4, r0
 80a251c:	e7ec      	b.n	80a24f8 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a2520 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a2520:	b510      	push	{r4, lr}
 80a2522:	4604      	mov	r4, r0
 80a2524:	4b04      	ldr	r3, [pc, #16]	; (80a2538 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2526:	2211      	movs	r2, #17
 80a2528:	2100      	movs	r1, #0
 80a252a:	f840 3b04 	str.w	r3, [r0], #4
 80a252e:	f000 ffbf 	bl	80a34b0 <memset>
}
 80a2532:	4620      	mov	r0, r4
 80a2534:	bd10      	pop	{r4, pc}
 80a2536:	bf00      	nop
 80a2538:	080a38e8 	.word	0x080a38e8

080a253c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a253c:	4603      	mov	r3, r0
 80a253e:	4a07      	ldr	r2, [pc, #28]	; (80a255c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2540:	b510      	push	{r4, lr}
 80a2542:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a2546:	f101 0210 	add.w	r2, r1, #16
 80a254a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a254e:	4291      	cmp	r1, r2
 80a2550:	f843 4b04 	str.w	r4, [r3], #4
 80a2554:	d1f9      	bne.n	80a254a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2556:	780a      	ldrb	r2, [r1, #0]
 80a2558:	701a      	strb	r2, [r3, #0]
}
 80a255a:	bd10      	pop	{r4, pc}
 80a255c:	080a38e8 	.word	0x080a38e8

080a2560 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a2560:	4a02      	ldr	r2, [pc, #8]	; (80a256c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a2562:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a2566:	2204      	movs	r2, #4
 80a2568:	7502      	strb	r2, [r0, #20]
}
 80a256a:	4770      	bx	lr
 80a256c:	080a38e8 	.word	0x080a38e8

080a2570 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a2570:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2572:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2576:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a257a:	2304      	movs	r3, #4
 80a257c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a2580:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a2584:	6044      	str	r4, [r0, #4]
 80a2586:	7503      	strb	r3, [r0, #20]
}
 80a2588:	bd10      	pop	{r4, pc}
	...

080a258c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a258c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a258e:	4d04      	ldr	r5, [pc, #16]	; (80a25a0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2590:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2592:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2596:	9500      	str	r5, [sp, #0]
 80a2598:	f7ff ffea 	bl	80a2570 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a259c:	b003      	add	sp, #12
 80a259e:	bd30      	pop	{r4, r5, pc}
 80a25a0:	080a38e8 	.word	0x080a38e8

080a25a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a25a4:	7441      	strb	r1, [r0, #17]
}
 80a25a6:	4770      	bx	lr

080a25a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a25a8:	4770      	bx	lr

080a25aa <_ZN9USBSerial4readEv>:
{
 80a25aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a25ac:	2100      	movs	r1, #0
 80a25ae:	7c00      	ldrb	r0, [r0, #16]
 80a25b0:	f7fe fede 	bl	80a1370 <HAL_USB_USART_Receive_Data>
}
 80a25b4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a25b8:	bd08      	pop	{r3, pc}

080a25ba <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a25ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a25bc:	2101      	movs	r1, #1
 80a25be:	7c00      	ldrb	r0, [r0, #16]
 80a25c0:	f7fe fed6 	bl	80a1370 <HAL_USB_USART_Receive_Data>
}
 80a25c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a25c8:	bd08      	pop	{r3, pc}

080a25ca <_ZN9USBSerial17availableForWriteEv>:
{
 80a25ca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a25cc:	7c00      	ldrb	r0, [r0, #16]
 80a25ce:	f7fe fec7 	bl	80a1360 <HAL_USB_USART_Available_Data_For_Write>
}
 80a25d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25d6:	bd08      	pop	{r3, pc}

080a25d8 <_ZN9USBSerial9availableEv>:
{
 80a25d8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a25da:	7c00      	ldrb	r0, [r0, #16]
 80a25dc:	f7fe feb8 	bl	80a1350 <HAL_USB_USART_Available_Data>
}
 80a25e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25e4:	bd08      	pop	{r3, pc}

080a25e6 <_ZN9USBSerial5writeEh>:
{
 80a25e6:	b538      	push	{r3, r4, r5, lr}
 80a25e8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25ea:	7c00      	ldrb	r0, [r0, #16]
{
 80a25ec:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25ee:	f7fe feb7 	bl	80a1360 <HAL_USB_USART_Available_Data_For_Write>
 80a25f2:	2800      	cmp	r0, #0
 80a25f4:	dc01      	bgt.n	80a25fa <_ZN9USBSerial5writeEh+0x14>
 80a25f6:	7c60      	ldrb	r0, [r4, #17]
 80a25f8:	b128      	cbz	r0, 80a2606 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a25fa:	4629      	mov	r1, r5
 80a25fc:	7c20      	ldrb	r0, [r4, #16]
 80a25fe:	f7fe febf 	bl	80a1380 <HAL_USB_USART_Send_Data>
 80a2602:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a2606:	bd38      	pop	{r3, r4, r5, pc}

080a2608 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a2608:	7c00      	ldrb	r0, [r0, #16]
 80a260a:	f7fe bec1 	b.w	80a1390 <HAL_USB_USART_Flush_Data>

080a260e <_ZN9USBSerialD0Ev>:
 80a260e:	b510      	push	{r4, lr}
 80a2610:	4604      	mov	r4, r0
 80a2612:	2114      	movs	r1, #20
 80a2614:	f000 fb21 	bl	80a2c5a <_ZdlPvj>
 80a2618:	4620      	mov	r0, r4
 80a261a:	bd10      	pop	{r4, pc}

080a261c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a261c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a261e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2622:	4604      	mov	r4, r0
 80a2624:	4608      	mov	r0, r1
 80a2626:	2100      	movs	r1, #0
 80a2628:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a262c:	4b04      	ldr	r3, [pc, #16]	; (80a2640 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a262e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2630:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a2632:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a2634:	4611      	mov	r1, r2
  _blocking = true;
 80a2636:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a2638:	f7fe fe7a 	bl	80a1330 <HAL_USB_USART_Init>
}
 80a263c:	4620      	mov	r0, r4
 80a263e:	bd10      	pop	{r4, pc}
 80a2640:	080a38fc 	.word	0x080a38fc

080a2644 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2644:	2200      	movs	r2, #0
 80a2646:	7c00      	ldrb	r0, [r0, #16]
 80a2648:	f7fe be7a 	b.w	80a1340 <HAL_USB_USART_Begin>

080a264c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a264c:	b510      	push	{r4, lr}
 80a264e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2650:	2214      	movs	r2, #20
 80a2652:	2100      	movs	r1, #0
 80a2654:	f000 ff2c 	bl	80a34b0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2658:	4620      	mov	r0, r4
 80a265a:	bd10      	pop	{r4, pc}

080a265c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a265c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a265e:	4d0f      	ldr	r5, [pc, #60]	; (80a269c <_Z16_fetch_usbserialv+0x40>)
{
 80a2660:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2662:	a801      	add	r0, sp, #4
 80a2664:	f7ff fff2 	bl	80a264c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2668:	7829      	ldrb	r1, [r5, #0]
 80a266a:	f3bf 8f5b 	dmb	ish
 80a266e:	f011 0401 	ands.w	r4, r1, #1
 80a2672:	d110      	bne.n	80a2696 <_Z16_fetch_usbserialv+0x3a>
 80a2674:	4628      	mov	r0, r5
 80a2676:	f7fd fd21 	bl	80a00bc <__cxa_guard_acquire>
 80a267a:	b160      	cbz	r0, 80a2696 <_Z16_fetch_usbserialv+0x3a>
 80a267c:	4621      	mov	r1, r4
 80a267e:	aa01      	add	r2, sp, #4
 80a2680:	4807      	ldr	r0, [pc, #28]	; (80a26a0 <_Z16_fetch_usbserialv+0x44>)
 80a2682:	f7ff ffcb 	bl	80a261c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2686:	4628      	mov	r0, r5
 80a2688:	f7fd fd1d 	bl	80a00c6 <__cxa_guard_release>
 80a268c:	4a05      	ldr	r2, [pc, #20]	; (80a26a4 <_Z16_fetch_usbserialv+0x48>)
 80a268e:	4906      	ldr	r1, [pc, #24]	; (80a26a8 <_Z16_fetch_usbserialv+0x4c>)
 80a2690:	4803      	ldr	r0, [pc, #12]	; (80a26a0 <_Z16_fetch_usbserialv+0x44>)
 80a2692:	f000 fadd 	bl	80a2c50 <__aeabi_atexit>
	return _usbserial;
}
 80a2696:	4802      	ldr	r0, [pc, #8]	; (80a26a0 <_Z16_fetch_usbserialv+0x44>)
 80a2698:	b007      	add	sp, #28
 80a269a:	bd30      	pop	{r4, r5, pc}
 80a269c:	20000870 	.word	0x20000870
 80a26a0:	20000878 	.word	0x20000878
 80a26a4:	20000070 	.word	0x20000070
 80a26a8:	080a25a9 	.word	0x080a25a9

080a26ac <_Z23acquireUSBSerial1Bufferv>:
 80a26ac:	b510      	push	{r4, lr}
 80a26ae:	4604      	mov	r4, r0
 80a26b0:	2214      	movs	r2, #20
 80a26b2:	2100      	movs	r1, #0
 80a26b4:	f000 fefc 	bl	80a34b0 <memset>
 80a26b8:	4620      	mov	r0, r4
 80a26ba:	bd10      	pop	{r4, pc}

080a26bc <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a26bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a26be:	4c0f      	ldr	r4, [pc, #60]	; (80a26fc <_Z17_fetch_usbserial1v+0x40>)
{
 80a26c0:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a26c2:	a801      	add	r0, sp, #4
 80a26c4:	f7ff fff2 	bl	80a26ac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a26c8:	7823      	ldrb	r3, [r4, #0]
 80a26ca:	f3bf 8f5b 	dmb	ish
 80a26ce:	07db      	lsls	r3, r3, #31
 80a26d0:	d410      	bmi.n	80a26f4 <_Z17_fetch_usbserial1v+0x38>
 80a26d2:	4620      	mov	r0, r4
 80a26d4:	f7fd fcf2 	bl	80a00bc <__cxa_guard_acquire>
 80a26d8:	b160      	cbz	r0, 80a26f4 <_Z17_fetch_usbserial1v+0x38>
 80a26da:	2101      	movs	r1, #1
 80a26dc:	aa01      	add	r2, sp, #4
 80a26de:	4808      	ldr	r0, [pc, #32]	; (80a2700 <_Z17_fetch_usbserial1v+0x44>)
 80a26e0:	f7ff ff9c 	bl	80a261c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a26e4:	4620      	mov	r0, r4
 80a26e6:	f7fd fcee 	bl	80a00c6 <__cxa_guard_release>
 80a26ea:	4a06      	ldr	r2, [pc, #24]	; (80a2704 <_Z17_fetch_usbserial1v+0x48>)
 80a26ec:	4906      	ldr	r1, [pc, #24]	; (80a2708 <_Z17_fetch_usbserial1v+0x4c>)
 80a26ee:	4804      	ldr	r0, [pc, #16]	; (80a2700 <_Z17_fetch_usbserial1v+0x44>)
 80a26f0:	f000 faae 	bl	80a2c50 <__aeabi_atexit>
  return _usbserial1;
}
 80a26f4:	4802      	ldr	r0, [pc, #8]	; (80a2700 <_Z17_fetch_usbserial1v+0x44>)
 80a26f6:	b006      	add	sp, #24
 80a26f8:	bd10      	pop	{r4, pc}
 80a26fa:	bf00      	nop
 80a26fc:	20000874 	.word	0x20000874
 80a2700:	2000088c 	.word	0x2000088c
 80a2704:	20000070 	.word	0x20000070
 80a2708:	080a25a9 	.word	0x080a25a9

080a270c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80a270c:	4700      	bx	r0
	...

080a2710 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a2710:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80a2714:	2400      	movs	r4, #0
{
 80a2716:	461d      	mov	r5, r3
 80a2718:	460f      	mov	r7, r1
 80a271a:	4690      	mov	r8, r2
 80a271c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
 80a271e:	f7fe fcad 	bl	80a107c <HAL_Interrupts_Detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a2722:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a2724:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a2726:	f88d 300c 	strb.w	r3, [sp, #12]
    extra.IRQChannelSubPriority = subpriority;
 80a272a:	bfa8      	it	ge
 80a272c:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    HAL_InterruptExtraConfiguration extra = {0};
 80a2730:	f8ad 400d 	strh.w	r4, [sp, #13]
 80a2734:	f88d 400f 	strb.w	r4, [sp, #15]
    return &extra;
 80a2738:	bfa4      	itt	ge
 80a273a:	ac03      	addge	r4, sp, #12
    extra.IRQChannelSubPriority = subpriority;
 80a273c:	f88d 300e 	strbge.w	r3, [sp, #14]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2740:	463a      	mov	r2, r7
 80a2742:	4643      	mov	r3, r8
 80a2744:	4630      	mov	r0, r6
 80a2746:	4906      	ldr	r1, [pc, #24]	; (80a2760 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
 80a2748:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a274a:	bfa8      	it	ge
 80a274c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 80a2750:	f7fe fc8c 	bl	80a106c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
 80a2754:	fab0 f080 	clz	r0, r0
 80a2758:	0940      	lsrs	r0, r0, #5
 80a275a:	b004      	add	sp, #16
 80a275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2760:	080a270d 	.word	0x080a270d

080a2764 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a2764:	4770      	bx	lr

080a2766 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2766:	7441      	strb	r1, [r0, #17]
}
 80a2768:	4770      	bx	lr

080a276a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a276a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a276c:	7c00      	ldrb	r0, [r0, #16]
 80a276e:	f7fe fd55 	bl	80a121c <hal_usart_available_data_for_write>
}
 80a2772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2776:	bd08      	pop	{r3, pc}

080a2778 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2778:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a277a:	7c00      	ldrb	r0, [r0, #16]
 80a277c:	f7fe fd26 	bl	80a11cc <hal_usart_available>
}
 80a2780:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2784:	bd08      	pop	{r3, pc}

080a2786 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2786:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a2788:	7c00      	ldrb	r0, [r0, #16]
 80a278a:	f7fe fd2f 	bl	80a11ec <hal_usart_peek>
}
 80a278e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a2792:	bd08      	pop	{r3, pc}

080a2794 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2794:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a2796:	7c00      	ldrb	r0, [r0, #16]
 80a2798:	f7fe fd20 	bl	80a11dc <hal_usart_read>
}
 80a279c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a27a0:	bd08      	pop	{r3, pc}

080a27a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a27a2:	7c00      	ldrb	r0, [r0, #16]
 80a27a4:	f7fe bd2a 	b.w	80a11fc <hal_usart_flush>

080a27a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a27a8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a27aa:	7c46      	ldrb	r6, [r0, #17]
{
 80a27ac:	4604      	mov	r4, r0
 80a27ae:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a27b0:	b12e      	cbz	r6, 80a27be <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a27b2:	4629      	mov	r1, r5
 80a27b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a27b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a27ba:	f7fe bcff 	b.w	80a11bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a27be:	7c00      	ldrb	r0, [r0, #16]
 80a27c0:	f7fe fd2c 	bl	80a121c <hal_usart_available_data_for_write>
 80a27c4:	2800      	cmp	r0, #0
 80a27c6:	dcf4      	bgt.n	80a27b2 <_ZN11USARTSerial5writeEh+0xa>
}
 80a27c8:	4630      	mov	r0, r6
 80a27ca:	bd70      	pop	{r4, r5, r6, pc}

080a27cc <_ZN11USARTSerialD0Ev>:
 80a27cc:	b510      	push	{r4, lr}
 80a27ce:	4604      	mov	r4, r0
 80a27d0:	2114      	movs	r1, #20
 80a27d2:	f000 fa42 	bl	80a2c5a <_ZdlPvj>
 80a27d6:	4620      	mov	r0, r4
 80a27d8:	bd10      	pop	{r4, pc}
	...

080a27dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a27dc:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a27e0:	b510      	push	{r4, lr}
 80a27e2:	4604      	mov	r4, r0
 80a27e4:	4608      	mov	r0, r1
 80a27e6:	4611      	mov	r1, r2
 80a27e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a27ec:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a27f0:	4a04      	ldr	r2, [pc, #16]	; (80a2804 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a27f2:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a27f4:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a27f6:	2201      	movs	r2, #1
 80a27f8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a27fa:	461a      	mov	r2, r3
 80a27fc:	f7fe fcd6 	bl	80a11ac <hal_usart_init>
}
 80a2800:	4620      	mov	r0, r4
 80a2802:	bd10      	pop	{r4, pc}
 80a2804:	080a392c 	.word	0x080a392c

080a2808 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a280a:	4c1a      	ldr	r4, [pc, #104]	; (80a2874 <_Z22__fetch_global_Serial1v+0x6c>)
 80a280c:	6826      	ldr	r6, [r4, #0]
 80a280e:	b94e      	cbnz	r6, 80a2824 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a2810:	2084      	movs	r0, #132	; 0x84
 80a2812:	f7fd fc42 	bl	80a009a <_Znwj>
 80a2816:	4605      	mov	r5, r0
 80a2818:	b118      	cbz	r0, 80a2822 <_Z22__fetch_global_Serial1v+0x1a>
 80a281a:	2284      	movs	r2, #132	; 0x84
 80a281c:	4631      	mov	r1, r6
 80a281e:	f000 fe47 	bl	80a34b0 <memset>
 80a2822:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2824:	4d14      	ldr	r5, [pc, #80]	; (80a2878 <_Z22__fetch_global_Serial1v+0x70>)
 80a2826:	682f      	ldr	r7, [r5, #0]
 80a2828:	b94f      	cbnz	r7, 80a283e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a282a:	2084      	movs	r0, #132	; 0x84
 80a282c:	f7fd fc35 	bl	80a009a <_Znwj>
 80a2830:	4606      	mov	r6, r0
 80a2832:	b118      	cbz	r0, 80a283c <_Z22__fetch_global_Serial1v+0x34>
 80a2834:	2284      	movs	r2, #132	; 0x84
 80a2836:	4639      	mov	r1, r7
 80a2838:	f000 fe3a 	bl	80a34b0 <memset>
 80a283c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a283e:	4f0f      	ldr	r7, [pc, #60]	; (80a287c <_Z22__fetch_global_Serial1v+0x74>)
 80a2840:	7839      	ldrb	r1, [r7, #0]
 80a2842:	f3bf 8f5b 	dmb	ish
 80a2846:	f011 0601 	ands.w	r6, r1, #1
 80a284a:	d111      	bne.n	80a2870 <_Z22__fetch_global_Serial1v+0x68>
 80a284c:	4638      	mov	r0, r7
 80a284e:	f7fd fc35 	bl	80a00bc <__cxa_guard_acquire>
 80a2852:	b168      	cbz	r0, 80a2870 <_Z22__fetch_global_Serial1v+0x68>
 80a2854:	4631      	mov	r1, r6
 80a2856:	6822      	ldr	r2, [r4, #0]
 80a2858:	682b      	ldr	r3, [r5, #0]
 80a285a:	4809      	ldr	r0, [pc, #36]	; (80a2880 <_Z22__fetch_global_Serial1v+0x78>)
 80a285c:	f7ff ffbe 	bl	80a27dc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a2860:	4638      	mov	r0, r7
 80a2862:	f7fd fc30 	bl	80a00c6 <__cxa_guard_release>
 80a2866:	4a07      	ldr	r2, [pc, #28]	; (80a2884 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2868:	4907      	ldr	r1, [pc, #28]	; (80a2888 <_Z22__fetch_global_Serial1v+0x80>)
 80a286a:	4805      	ldr	r0, [pc, #20]	; (80a2880 <_Z22__fetch_global_Serial1v+0x78>)
 80a286c:	f000 f9f0 	bl	80a2c50 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2870:	4803      	ldr	r0, [pc, #12]	; (80a2880 <_Z22__fetch_global_Serial1v+0x78>)
 80a2872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2874:	200008a4 	.word	0x200008a4
 80a2878:	200008a8 	.word	0x200008a8
 80a287c:	200008a0 	.word	0x200008a0
 80a2880:	200008ac 	.word	0x200008ac
 80a2884:	20000070 	.word	0x20000070
 80a2888:	080a2765 	.word	0x080a2765

080a288c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a288c:	b510      	push	{r4, lr}
      if (_M_empty())
 80a288e:	6883      	ldr	r3, [r0, #8]
 80a2890:	4604      	mov	r4, r0
 80a2892:	b90b      	cbnz	r3, 80a2898 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2894:	f000 f9e5 	bl	80a2c62 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2898:	68c3      	ldr	r3, [r0, #12]
 80a289a:	4798      	blx	r3
      if (_M_manager)
 80a289c:	68a3      	ldr	r3, [r4, #8]
 80a289e:	b11b      	cbz	r3, 80a28a8 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a28a0:	2203      	movs	r2, #3
 80a28a2:	4621      	mov	r1, r4
 80a28a4:	4620      	mov	r0, r4
 80a28a6:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a28a8:	4620      	mov	r0, r4
}
 80a28aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a28ae:	2110      	movs	r1, #16
 80a28b0:	f000 b9d3 	b.w	80a2c5a <_ZdlPvj>

080a28b4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a28b4:	4770      	bx	lr

080a28b6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a28b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28b8:	4606      	mov	r6, r0
 80a28ba:	4615      	mov	r5, r2
 80a28bc:	460c      	mov	r4, r1
 80a28be:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a28c0:	42bc      	cmp	r4, r7
 80a28c2:	d006      	beq.n	80a28d2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a28c4:	6833      	ldr	r3, [r6, #0]
 80a28c6:	4630      	mov	r0, r6
 80a28c8:	689b      	ldr	r3, [r3, #8]
 80a28ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a28ce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a28d0:	e7f6      	b.n	80a28c0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a28d2:	4628      	mov	r0, r5
 80a28d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28d6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a28d6:	2200      	movs	r2, #0
 80a28d8:	7c00      	ldrb	r0, [r0, #16]
 80a28da:	f7fe bca7 	b.w	80a122c <hal_i2c_write>

080a28de <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a28de:	2100      	movs	r1, #0
 80a28e0:	7c00      	ldrb	r0, [r0, #16]
 80a28e2:	f7fe bcab 	b.w	80a123c <hal_i2c_available>

080a28e6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a28e6:	2100      	movs	r1, #0
 80a28e8:	7c00      	ldrb	r0, [r0, #16]
 80a28ea:	f7fe bcaf 	b.w	80a124c <hal_i2c_read>

080a28ee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a28ee:	2100      	movs	r1, #0
 80a28f0:	7c00      	ldrb	r0, [r0, #16]
 80a28f2:	f7fe bcb3 	b.w	80a125c <hal_i2c_peek>

080a28f6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a28f6:	2100      	movs	r1, #0
 80a28f8:	7c00      	ldrb	r0, [r0, #16]
 80a28fa:	f7fe bcb7 	b.w	80a126c <hal_i2c_flush>

080a28fe <_ZN7TwoWireD0Ev>:
 80a28fe:	b510      	push	{r4, lr}
 80a2900:	4604      	mov	r4, r0
 80a2902:	2114      	movs	r1, #20
 80a2904:	f000 f9a9 	bl	80a2c5a <_ZdlPvj>
 80a2908:	4620      	mov	r0, r4
 80a290a:	bd10      	pop	{r4, pc}

080a290c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a290c:	b510      	push	{r4, lr}
 80a290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2912:	4604      	mov	r4, r0
 80a2914:	4608      	mov	r0, r1
 80a2916:	2100      	movs	r1, #0
 80a2918:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a291c:	4b03      	ldr	r3, [pc, #12]	; (80a292c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a291e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a2920:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a2922:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a2924:	f7fe fcb2 	bl	80a128c <hal_i2c_init>
}
 80a2928:	4620      	mov	r0, r4
 80a292a:	bd10      	pop	{r4, pc}
 80a292c:	080a395c 	.word	0x080a395c

080a2930 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a2930:	2200      	movs	r2, #0
 80a2932:	6840      	ldr	r0, [r0, #4]
 80a2934:	4611      	mov	r1, r2
 80a2936:	f7fe bda7 	b.w	80a1488 <network_ready>

080a293a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a293a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a293c:	4615      	mov	r5, r2
 80a293e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2940:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a2942:	460e      	mov	r6, r1
 80a2944:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a2946:	2100      	movs	r1, #0
 80a2948:	a803      	add	r0, sp, #12
 80a294a:	f000 fdb1 	bl	80a34b0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a294e:	4628      	mov	r0, r5
 80a2950:	f000 fdfd 	bl	80a354e <strlen>
 80a2954:	2700      	movs	r7, #0
 80a2956:	b281      	uxth	r1, r0
 80a2958:	6873      	ldr	r3, [r6, #4]
 80a295a:	4628      	mov	r0, r5
 80a295c:	9700      	str	r7, [sp, #0]
 80a295e:	aa03      	add	r2, sp, #12
 80a2960:	f7fe fd1e 	bl	80a13a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2964:	b130      	cbz	r0, 80a2974 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a2966:	4639      	mov	r1, r7
 80a2968:	4620      	mov	r0, r4
 80a296a:	f7ff fdf9 	bl	80a2560 <_ZN9IPAddressC1Em>
    }
 80a296e:	4620      	mov	r0, r4
 80a2970:	b009      	add	sp, #36	; 0x24
 80a2972:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2974:	4620      	mov	r0, r4
 80a2976:	a903      	add	r1, sp, #12
 80a2978:	f7ff fde0 	bl	80a253c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a297c:	e7f7      	b.n	80a296e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a297e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a297e:	2200      	movs	r2, #0
 80a2980:	6840      	ldr	r0, [r0, #4]
 80a2982:	4611      	mov	r1, r2
 80a2984:	f7fe bda0 	b.w	80a14c8 <network_listening>

080a2988 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a2988:	2200      	movs	r2, #0
 80a298a:	6840      	ldr	r0, [r0, #4]
 80a298c:	4611      	mov	r1, r2
 80a298e:	f7fe bdab 	b.w	80a14e8 <network_get_listen_timeout>

080a2992 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a2992:	2200      	movs	r2, #0
 80a2994:	6840      	ldr	r0, [r0, #4]
 80a2996:	f7fe bd9f 	b.w	80a14d8 <network_set_listen_timeout>

080a299a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a299a:	2200      	movs	r2, #0
 80a299c:	6840      	ldr	r0, [r0, #4]
 80a299e:	f081 0101 	eor.w	r1, r1, #1
 80a29a2:	f7fe bd89 	b.w	80a14b8 <network_listen>

080a29a6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a29a6:	2300      	movs	r3, #0
 80a29a8:	6840      	ldr	r0, [r0, #4]
 80a29aa:	461a      	mov	r2, r3
 80a29ac:	4619      	mov	r1, r3
 80a29ae:	f7fe bd7b 	b.w	80a14a8 <network_off>

080a29b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a29b2:	2200      	movs	r2, #0
 80a29b4:	6840      	ldr	r0, [r0, #4]
 80a29b6:	4611      	mov	r1, r2
 80a29b8:	f7fe bd56 	b.w	80a1468 <network_connecting>

080a29bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a29bc:	2200      	movs	r2, #0
 80a29be:	2102      	movs	r1, #2
 80a29c0:	6840      	ldr	r0, [r0, #4]
 80a29c2:	f7fe bd59 	b.w	80a1478 <network_disconnect>

080a29c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a29c6:	2300      	movs	r3, #0
 80a29c8:	6840      	ldr	r0, [r0, #4]
 80a29ca:	461a      	mov	r2, r3
 80a29cc:	f7fe bd44 	b.w	80a1458 <network_connect>

080a29d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a29d0:	2204      	movs	r2, #4
 80a29d2:	4b02      	ldr	r3, [pc, #8]	; (80a29dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a29d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a29d6:	4a02      	ldr	r2, [pc, #8]	; (80a29e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a29d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a29da:	4770      	bx	lr
 80a29dc:	200008c0 	.word	0x200008c0
 80a29e0:	080a3984 	.word	0x080a3984

080a29e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a29e4:	2300      	movs	r3, #0
 80a29e6:	6840      	ldr	r0, [r0, #4]
 80a29e8:	461a      	mov	r2, r3
 80a29ea:	f7fe bd35 	b.w	80a1458 <network_connect>

080a29ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a29ee:	2200      	movs	r2, #0
 80a29f0:	2102      	movs	r1, #2
 80a29f2:	6840      	ldr	r0, [r0, #4]
 80a29f4:	f7fe bd40 	b.w	80a1478 <network_disconnect>

080a29f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a29f8:	2200      	movs	r2, #0
 80a29fa:	6840      	ldr	r0, [r0, #4]
 80a29fc:	4611      	mov	r1, r2
 80a29fe:	f7fe bd33 	b.w	80a1468 <network_connecting>

080a2a02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2a02:	2200      	movs	r2, #0
 80a2a04:	6840      	ldr	r0, [r0, #4]
 80a2a06:	4611      	mov	r1, r2
 80a2a08:	f7fe bd3e 	b.w	80a1488 <network_ready>

080a2a0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2a0c:	2300      	movs	r3, #0
 80a2a0e:	6840      	ldr	r0, [r0, #4]
 80a2a10:	461a      	mov	r2, r3
 80a2a12:	4619      	mov	r1, r3
 80a2a14:	f7fe bd40 	b.w	80a1498 <network_on>

080a2a18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2a18:	2300      	movs	r3, #0
 80a2a1a:	6840      	ldr	r0, [r0, #4]
 80a2a1c:	461a      	mov	r2, r3
 80a2a1e:	4619      	mov	r1, r3
 80a2a20:	f7fe bd42 	b.w	80a14a8 <network_off>

080a2a24 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a2a24:	2100      	movs	r1, #0
 80a2a26:	6840      	ldr	r0, [r0, #4]
 80a2a28:	f7fe bd66 	b.w	80a14f8 <network_is_on>

080a2a2c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a2a2c:	2100      	movs	r1, #0
 80a2a2e:	6840      	ldr	r0, [r0, #4]
 80a2a30:	f7fe bd6a 	b.w	80a1508 <network_is_off>

080a2a34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2a34:	2200      	movs	r2, #0
 80a2a36:	6840      	ldr	r0, [r0, #4]
 80a2a38:	f081 0101 	eor.w	r1, r1, #1
 80a2a3c:	f7fe bd3c 	b.w	80a14b8 <network_listen>

080a2a40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2a40:	2200      	movs	r2, #0
 80a2a42:	6840      	ldr	r0, [r0, #4]
 80a2a44:	f7fe bd48 	b.w	80a14d8 <network_set_listen_timeout>

080a2a48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2a48:	2200      	movs	r2, #0
 80a2a4a:	6840      	ldr	r0, [r0, #4]
 80a2a4c:	4611      	mov	r1, r2
 80a2a4e:	f7fe bd4b 	b.w	80a14e8 <network_get_listen_timeout>

080a2a52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2a52:	2200      	movs	r2, #0
 80a2a54:	6840      	ldr	r0, [r0, #4]
 80a2a56:	4611      	mov	r1, r2
 80a2a58:	f7fe bd36 	b.w	80a14c8 <network_listening>

080a2a5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2a5c:	b570      	push	{r4, r5, r6, lr}
 80a2a5e:	4615      	mov	r5, r2
 80a2a60:	b08e      	sub	sp, #56	; 0x38
 80a2a62:	4604      	mov	r4, r0
    IPAddress addr;
 80a2a64:	a808      	add	r0, sp, #32
 80a2a66:	f7ff fd5b 	bl	80a2520 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a2a6a:	2211      	movs	r2, #17
 80a2a6c:	2100      	movs	r1, #0
 80a2a6e:	a803      	add	r0, sp, #12
 80a2a70:	f000 fd1e 	bl	80a34b0 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a74:	2600      	movs	r6, #0
 80a2a76:	4628      	mov	r0, r5
 80a2a78:	f000 fd69 	bl	80a354e <strlen>
 80a2a7c:	4b0a      	ldr	r3, [pc, #40]	; (80a2aa8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2a7e:	9600      	str	r6, [sp, #0]
 80a2a80:	b281      	uxth	r1, r0
 80a2a82:	685b      	ldr	r3, [r3, #4]
 80a2a84:	4628      	mov	r0, r5
 80a2a86:	aa03      	add	r2, sp, #12
 80a2a88:	f7fe fc8a 	bl	80a13a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2a8c:	b130      	cbz	r0, 80a2a9c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a2a8e:	4631      	mov	r1, r6
 80a2a90:	4620      	mov	r0, r4
 80a2a92:	f7ff fd65 	bl	80a2560 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2a96:	4620      	mov	r0, r4
 80a2a98:	b00e      	add	sp, #56	; 0x38
 80a2a9a:	bd70      	pop	{r4, r5, r6, pc}
 80a2a9c:	4620      	mov	r0, r4
 80a2a9e:	a903      	add	r1, sp, #12
 80a2aa0:	f7ff fd4c 	bl	80a253c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a2aa4:	e7f7      	b.n	80a2a96 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a2aa6:	bf00      	nop
 80a2aa8:	200008c0 	.word	0x200008c0

080a2aac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2aac:	4b02      	ldr	r3, [pc, #8]	; (80a2ab8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2aae:	4a03      	ldr	r2, [pc, #12]	; (80a2abc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2ab0:	601a      	str	r2, [r3, #0]
 80a2ab2:	2200      	movs	r2, #0
 80a2ab4:	605a      	str	r2, [r3, #4]

} // spark
 80a2ab6:	4770      	bx	lr
 80a2ab8:	200008c8 	.word	0x200008c8
 80a2abc:	080a39c0 	.word	0x080a39c0

080a2ac0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a2ac0:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a2ac2:	b570      	push	{r4, r5, r6, lr}
 80a2ac4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a2ac6:	d901      	bls.n	80a2acc <pinAvailable+0xc>
    return false;
 80a2ac8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a2aca:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2acc:	f1a0 030d 	sub.w	r3, r0, #13
 80a2ad0:	2b02      	cmp	r3, #2
 80a2ad2:	d90b      	bls.n	80a2aec <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a2ad4:	2801      	cmp	r0, #1
 80a2ad6:	d826      	bhi.n	80a2b26 <pinAvailable+0x66>
 80a2ad8:	f000 f892 	bl	80a2c00 <_Z19__fetch_global_Wirev>
 80a2adc:	2100      	movs	r1, #0
 80a2ade:	7c00      	ldrb	r0, [r0, #16]
 80a2ae0:	f7fe fbcc 	bl	80a127c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2ae4:	f080 0001 	eor.w	r0, r0, #1
 80a2ae8:	b2c0      	uxtb	r0, r0
 80a2aea:	e7ee      	b.n	80a2aca <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a2aec:	4e13      	ldr	r6, [pc, #76]	; (80a2b3c <pinAvailable+0x7c>)
 80a2aee:	7831      	ldrb	r1, [r6, #0]
 80a2af0:	f3bf 8f5b 	dmb	ish
 80a2af4:	f011 0501 	ands.w	r5, r1, #1
 80a2af8:	d10f      	bne.n	80a2b1a <pinAvailable+0x5a>
 80a2afa:	4630      	mov	r0, r6
 80a2afc:	f7fd fade 	bl	80a00bc <__cxa_guard_acquire>
 80a2b00:	b158      	cbz	r0, 80a2b1a <pinAvailable+0x5a>
 80a2b02:	4629      	mov	r1, r5
 80a2b04:	480e      	ldr	r0, [pc, #56]	; (80a2b40 <pinAvailable+0x80>)
 80a2b06:	f7fe fd62 	bl	80a15ce <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a2b0a:	4630      	mov	r0, r6
 80a2b0c:	f7fd fadb 	bl	80a00c6 <__cxa_guard_release>
 80a2b10:	4a0c      	ldr	r2, [pc, #48]	; (80a2b44 <pinAvailable+0x84>)
 80a2b12:	490d      	ldr	r1, [pc, #52]	; (80a2b48 <pinAvailable+0x88>)
 80a2b14:	480a      	ldr	r0, [pc, #40]	; (80a2b40 <pinAvailable+0x80>)
 80a2b16:	f000 f89b 	bl	80a2c50 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a2b1a:	4b09      	ldr	r3, [pc, #36]	; (80a2b40 <pinAvailable+0x80>)
 80a2b1c:	7818      	ldrb	r0, [r3, #0]
 80a2b1e:	f7fe fbf7 	bl	80a1310 <hal_spi_is_enabled>
 80a2b22:	2800      	cmp	r0, #0
 80a2b24:	d1d0      	bne.n	80a2ac8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a2b26:	3c12      	subs	r4, #18
 80a2b28:	2c01      	cmp	r4, #1
 80a2b2a:	d805      	bhi.n	80a2b38 <pinAvailable+0x78>
 80a2b2c:	f7ff fe6c 	bl	80a2808 <_Z22__fetch_global_Serial1v>
 80a2b30:	7c00      	ldrb	r0, [r0, #16]
 80a2b32:	f7fe fb6b 	bl	80a120c <hal_usart_is_enabled>
 80a2b36:	e7d5      	b.n	80a2ae4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a2b38:	2001      	movs	r0, #1
 80a2b3a:	e7c6      	b.n	80a2aca <pinAvailable+0xa>
 80a2b3c:	20000818 	.word	0x20000818
 80a2b40:	2000081c 	.word	0x2000081c
 80a2b44:	20000070 	.word	0x20000070
 80a2b48:	080a088d 	.word	0x080a088d

080a2b4c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2b4c:	2817      	cmp	r0, #23
{
 80a2b4e:	b538      	push	{r3, r4, r5, lr}
 80a2b50:	4604      	mov	r4, r0
 80a2b52:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2b54:	d80a      	bhi.n	80a2b6c <pinMode+0x20>
 80a2b56:	29ff      	cmp	r1, #255	; 0xff
 80a2b58:	d008      	beq.n	80a2b6c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a2b5a:	f7ff ffb1 	bl	80a2ac0 <pinAvailable>
 80a2b5e:	b128      	cbz	r0, 80a2b6c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a2b60:	4629      	mov	r1, r5
 80a2b62:	4620      	mov	r0, r4
}
 80a2b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a2b68:	f7fe ba68 	b.w	80a103c <HAL_Pin_Mode>
}
 80a2b6c:	bd38      	pop	{r3, r4, r5, pc}

080a2b6e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2b6e:	b538      	push	{r3, r4, r5, lr}
 80a2b70:	4604      	mov	r4, r0
 80a2b72:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2b74:	f7fe fa6a 	bl	80a104c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2b78:	28ff      	cmp	r0, #255	; 0xff
 80a2b7a:	d010      	beq.n	80a2b9e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a2b7c:	2806      	cmp	r0, #6
 80a2b7e:	d804      	bhi.n	80a2b8a <digitalWrite+0x1c>
 80a2b80:	234d      	movs	r3, #77	; 0x4d
 80a2b82:	fa23 f000 	lsr.w	r0, r3, r0
 80a2b86:	07c3      	lsls	r3, r0, #31
 80a2b88:	d409      	bmi.n	80a2b9e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2b8a:	4620      	mov	r0, r4
 80a2b8c:	f7ff ff98 	bl	80a2ac0 <pinAvailable>
 80a2b90:	b128      	cbz	r0, 80a2b9e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2b92:	4629      	mov	r1, r5
 80a2b94:	4620      	mov	r0, r4
}
 80a2b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a2b9a:	f7fe ba5f 	b.w	80a105c <HAL_GPIO_Write>
}
 80a2b9e:	bd38      	pop	{r3, r4, r5, pc}

080a2ba0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2ba0:	2300      	movs	r3, #0
 80a2ba2:	b513      	push	{r0, r1, r4, lr}
 80a2ba4:	4c07      	ldr	r4, [pc, #28]	; (80a2bc4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2ba6:	461a      	mov	r2, r3
 80a2ba8:	4619      	mov	r1, r3
 80a2baa:	4620      	mov	r0, r4
 80a2bac:	9300      	str	r3, [sp, #0]
 80a2bae:	f7ff fced 	bl	80a258c <_ZN9IPAddressC1Ehhhh>
 80a2bb2:	4620      	mov	r0, r4
 80a2bb4:	4a04      	ldr	r2, [pc, #16]	; (80a2bc8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2bb6:	4905      	ldr	r1, [pc, #20]	; (80a2bcc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2bb8:	b002      	add	sp, #8
 80a2bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2bbe:	f000 b847 	b.w	80a2c50 <__aeabi_atexit>
 80a2bc2:	bf00      	nop
 80a2bc4:	200008d4 	.word	0x200008d4
 80a2bc8:	20000070 	.word	0x20000070
 80a2bcc:	080a24dd 	.word	0x080a24dd

080a2bd0 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a2bd0:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a2bd2:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a2bd4:	2520      	movs	r5, #32
 80a2bd6:	8043      	strh	r3, [r0, #2]
 80a2bd8:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2bda:	4e08      	ldr	r6, [pc, #32]	; (80a2bfc <_Z17acquireWireBufferv+0x2c>)
{
 80a2bdc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a2bde:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2be0:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a2be2:	6085      	str	r5, [r0, #8]
 80a2be4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2be6:	4628      	mov	r0, r5
 80a2be8:	f000 f839 	bl	80a2c5e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2bec:	4631      	mov	r1, r6
	};
 80a2bee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2bf0:	4628      	mov	r0, r5
 80a2bf2:	f000 f834 	bl	80a2c5e <_ZnajRKSt9nothrow_t>
	};
 80a2bf6:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a2bf8:	4620      	mov	r0, r4
 80a2bfa:	bd70      	pop	{r4, r5, r6, pc}
 80a2bfc:	080a39f4 	.word	0x080a39f4

080a2c00 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2c00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2c02:	4d0f      	ldr	r5, [pc, #60]	; (80a2c40 <_Z19__fetch_global_Wirev+0x40>)
{
 80a2c04:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a2c06:	7829      	ldrb	r1, [r5, #0]
 80a2c08:	f3bf 8f5b 	dmb	ish
 80a2c0c:	f011 0401 	ands.w	r4, r1, #1
 80a2c10:	d113      	bne.n	80a2c3a <_Z19__fetch_global_Wirev+0x3a>
 80a2c12:	4628      	mov	r0, r5
 80a2c14:	f7fd fa52 	bl	80a00bc <__cxa_guard_acquire>
 80a2c18:	b178      	cbz	r0, 80a2c3a <_Z19__fetch_global_Wirev+0x3a>
 80a2c1a:	a801      	add	r0, sp, #4
 80a2c1c:	f7ff ffd8 	bl	80a2bd0 <_Z17acquireWireBufferv>
 80a2c20:	4621      	mov	r1, r4
 80a2c22:	aa01      	add	r2, sp, #4
 80a2c24:	4807      	ldr	r0, [pc, #28]	; (80a2c44 <_Z19__fetch_global_Wirev+0x44>)
 80a2c26:	f7ff fe71 	bl	80a290c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a2c2a:	4628      	mov	r0, r5
 80a2c2c:	f7fd fa4b 	bl	80a00c6 <__cxa_guard_release>
 80a2c30:	4a05      	ldr	r2, [pc, #20]	; (80a2c48 <_Z19__fetch_global_Wirev+0x48>)
 80a2c32:	4906      	ldr	r1, [pc, #24]	; (80a2c4c <_Z19__fetch_global_Wirev+0x4c>)
 80a2c34:	4803      	ldr	r0, [pc, #12]	; (80a2c44 <_Z19__fetch_global_Wirev+0x44>)
 80a2c36:	f000 f80b 	bl	80a2c50 <__aeabi_atexit>
	return wire;
}
 80a2c3a:	4802      	ldr	r0, [pc, #8]	; (80a2c44 <_Z19__fetch_global_Wirev+0x44>)
 80a2c3c:	b007      	add	sp, #28
 80a2c3e:	bd30      	pop	{r4, r5, pc}
 80a2c40:	200008ec 	.word	0x200008ec
 80a2c44:	200008f0 	.word	0x200008f0
 80a2c48:	20000070 	.word	0x20000070
 80a2c4c:	080a28b5 	.word	0x080a28b5

080a2c50 <__aeabi_atexit>:
 80a2c50:	460b      	mov	r3, r1
 80a2c52:	4601      	mov	r1, r0
 80a2c54:	4618      	mov	r0, r3
 80a2c56:	f000 bbf5 	b.w	80a3444 <__cxa_atexit>

080a2c5a <_ZdlPvj>:
 80a2c5a:	f7fd ba22 	b.w	80a00a2 <_ZdlPv>

080a2c5e <_ZnajRKSt9nothrow_t>:
 80a2c5e:	f7fd ba1e 	b.w	80a009e <_Znaj>

080a2c62 <_ZSt25__throw_bad_function_callv>:
 80a2c62:	b508      	push	{r3, lr}
 80a2c64:	f7fe fc98 	bl	80a1598 <abort>

080a2c68 <__aeabi_drsub>:
 80a2c68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2c6c:	e002      	b.n	80a2c74 <__adddf3>
 80a2c6e:	bf00      	nop

080a2c70 <__aeabi_dsub>:
 80a2c70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2c74 <__adddf3>:
 80a2c74:	b530      	push	{r4, r5, lr}
 80a2c76:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2c7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2c7e:	ea94 0f05 	teq	r4, r5
 80a2c82:	bf08      	it	eq
 80a2c84:	ea90 0f02 	teqeq	r0, r2
 80a2c88:	bf1f      	itttt	ne
 80a2c8a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2c8e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2c92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2c96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2c9a:	f000 80e2 	beq.w	80a2e62 <__adddf3+0x1ee>
 80a2c9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2ca2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2ca6:	bfb8      	it	lt
 80a2ca8:	426d      	neglt	r5, r5
 80a2caa:	dd0c      	ble.n	80a2cc6 <__adddf3+0x52>
 80a2cac:	442c      	add	r4, r5
 80a2cae:	ea80 0202 	eor.w	r2, r0, r2
 80a2cb2:	ea81 0303 	eor.w	r3, r1, r3
 80a2cb6:	ea82 0000 	eor.w	r0, r2, r0
 80a2cba:	ea83 0101 	eor.w	r1, r3, r1
 80a2cbe:	ea80 0202 	eor.w	r2, r0, r2
 80a2cc2:	ea81 0303 	eor.w	r3, r1, r3
 80a2cc6:	2d36      	cmp	r5, #54	; 0x36
 80a2cc8:	bf88      	it	hi
 80a2cca:	bd30      	pophi	{r4, r5, pc}
 80a2ccc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2cd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2cd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2cd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2cdc:	d002      	beq.n	80a2ce4 <__adddf3+0x70>
 80a2cde:	4240      	negs	r0, r0
 80a2ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2ce4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2cec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2cf0:	d002      	beq.n	80a2cf8 <__adddf3+0x84>
 80a2cf2:	4252      	negs	r2, r2
 80a2cf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2cf8:	ea94 0f05 	teq	r4, r5
 80a2cfc:	f000 80a7 	beq.w	80a2e4e <__adddf3+0x1da>
 80a2d00:	f1a4 0401 	sub.w	r4, r4, #1
 80a2d04:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2d08:	db0d      	blt.n	80a2d26 <__adddf3+0xb2>
 80a2d0a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2d0e:	fa22 f205 	lsr.w	r2, r2, r5
 80a2d12:	1880      	adds	r0, r0, r2
 80a2d14:	f141 0100 	adc.w	r1, r1, #0
 80a2d18:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2d1c:	1880      	adds	r0, r0, r2
 80a2d1e:	fa43 f305 	asr.w	r3, r3, r5
 80a2d22:	4159      	adcs	r1, r3
 80a2d24:	e00e      	b.n	80a2d44 <__adddf3+0xd0>
 80a2d26:	f1a5 0520 	sub.w	r5, r5, #32
 80a2d2a:	f10e 0e20 	add.w	lr, lr, #32
 80a2d2e:	2a01      	cmp	r2, #1
 80a2d30:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2d34:	bf28      	it	cs
 80a2d36:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2d3a:	fa43 f305 	asr.w	r3, r3, r5
 80a2d3e:	18c0      	adds	r0, r0, r3
 80a2d40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2d48:	d507      	bpl.n	80a2d5a <__adddf3+0xe6>
 80a2d4a:	f04f 0e00 	mov.w	lr, #0
 80a2d4e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2d52:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2d56:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2d5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2d5e:	d31b      	bcc.n	80a2d98 <__adddf3+0x124>
 80a2d60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2d64:	d30c      	bcc.n	80a2d80 <__adddf3+0x10c>
 80a2d66:	0849      	lsrs	r1, r1, #1
 80a2d68:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2d6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2d70:	f104 0401 	add.w	r4, r4, #1
 80a2d74:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2d78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2d7c:	f080 809a 	bcs.w	80a2eb4 <__adddf3+0x240>
 80a2d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2d84:	bf08      	it	eq
 80a2d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2d8a:	f150 0000 	adcs.w	r0, r0, #0
 80a2d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d92:	ea41 0105 	orr.w	r1, r1, r5
 80a2d96:	bd30      	pop	{r4, r5, pc}
 80a2d98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2d9c:	4140      	adcs	r0, r0
 80a2d9e:	eb41 0101 	adc.w	r1, r1, r1
 80a2da2:	3c01      	subs	r4, #1
 80a2da4:	bf28      	it	cs
 80a2da6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a2daa:	d2e9      	bcs.n	80a2d80 <__adddf3+0x10c>
 80a2dac:	f091 0f00 	teq	r1, #0
 80a2db0:	bf04      	itt	eq
 80a2db2:	4601      	moveq	r1, r0
 80a2db4:	2000      	moveq	r0, #0
 80a2db6:	fab1 f381 	clz	r3, r1
 80a2dba:	bf08      	it	eq
 80a2dbc:	3320      	addeq	r3, #32
 80a2dbe:	f1a3 030b 	sub.w	r3, r3, #11
 80a2dc2:	f1b3 0220 	subs.w	r2, r3, #32
 80a2dc6:	da0c      	bge.n	80a2de2 <__adddf3+0x16e>
 80a2dc8:	320c      	adds	r2, #12
 80a2dca:	dd08      	ble.n	80a2dde <__adddf3+0x16a>
 80a2dcc:	f102 0c14 	add.w	ip, r2, #20
 80a2dd0:	f1c2 020c 	rsb	r2, r2, #12
 80a2dd4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2dd8:	fa21 f102 	lsr.w	r1, r1, r2
 80a2ddc:	e00c      	b.n	80a2df8 <__adddf3+0x184>
 80a2dde:	f102 0214 	add.w	r2, r2, #20
 80a2de2:	bfd8      	it	le
 80a2de4:	f1c2 0c20 	rsble	ip, r2, #32
 80a2de8:	fa01 f102 	lsl.w	r1, r1, r2
 80a2dec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2df0:	bfdc      	itt	le
 80a2df2:	ea41 010c 	orrle.w	r1, r1, ip
 80a2df6:	4090      	lslle	r0, r2
 80a2df8:	1ae4      	subs	r4, r4, r3
 80a2dfa:	bfa2      	ittt	ge
 80a2dfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2e00:	4329      	orrge	r1, r5
 80a2e02:	bd30      	popge	{r4, r5, pc}
 80a2e04:	ea6f 0404 	mvn.w	r4, r4
 80a2e08:	3c1f      	subs	r4, #31
 80a2e0a:	da1c      	bge.n	80a2e46 <__adddf3+0x1d2>
 80a2e0c:	340c      	adds	r4, #12
 80a2e0e:	dc0e      	bgt.n	80a2e2e <__adddf3+0x1ba>
 80a2e10:	f104 0414 	add.w	r4, r4, #20
 80a2e14:	f1c4 0220 	rsb	r2, r4, #32
 80a2e18:	fa20 f004 	lsr.w	r0, r0, r4
 80a2e1c:	fa01 f302 	lsl.w	r3, r1, r2
 80a2e20:	ea40 0003 	orr.w	r0, r0, r3
 80a2e24:	fa21 f304 	lsr.w	r3, r1, r4
 80a2e28:	ea45 0103 	orr.w	r1, r5, r3
 80a2e2c:	bd30      	pop	{r4, r5, pc}
 80a2e2e:	f1c4 040c 	rsb	r4, r4, #12
 80a2e32:	f1c4 0220 	rsb	r2, r4, #32
 80a2e36:	fa20 f002 	lsr.w	r0, r0, r2
 80a2e3a:	fa01 f304 	lsl.w	r3, r1, r4
 80a2e3e:	ea40 0003 	orr.w	r0, r0, r3
 80a2e42:	4629      	mov	r1, r5
 80a2e44:	bd30      	pop	{r4, r5, pc}
 80a2e46:	fa21 f004 	lsr.w	r0, r1, r4
 80a2e4a:	4629      	mov	r1, r5
 80a2e4c:	bd30      	pop	{r4, r5, pc}
 80a2e4e:	f094 0f00 	teq	r4, #0
 80a2e52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2e56:	bf06      	itte	eq
 80a2e58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2e5c:	3401      	addeq	r4, #1
 80a2e5e:	3d01      	subne	r5, #1
 80a2e60:	e74e      	b.n	80a2d00 <__adddf3+0x8c>
 80a2e62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2e66:	bf18      	it	ne
 80a2e68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2e6c:	d029      	beq.n	80a2ec2 <__adddf3+0x24e>
 80a2e6e:	ea94 0f05 	teq	r4, r5
 80a2e72:	bf08      	it	eq
 80a2e74:	ea90 0f02 	teqeq	r0, r2
 80a2e78:	d005      	beq.n	80a2e86 <__adddf3+0x212>
 80a2e7a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2e7e:	bf04      	itt	eq
 80a2e80:	4619      	moveq	r1, r3
 80a2e82:	4610      	moveq	r0, r2
 80a2e84:	bd30      	pop	{r4, r5, pc}
 80a2e86:	ea91 0f03 	teq	r1, r3
 80a2e8a:	bf1e      	ittt	ne
 80a2e8c:	2100      	movne	r1, #0
 80a2e8e:	2000      	movne	r0, #0
 80a2e90:	bd30      	popne	{r4, r5, pc}
 80a2e92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2e96:	d105      	bne.n	80a2ea4 <__adddf3+0x230>
 80a2e98:	0040      	lsls	r0, r0, #1
 80a2e9a:	4149      	adcs	r1, r1
 80a2e9c:	bf28      	it	cs
 80a2e9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2ea2:	bd30      	pop	{r4, r5, pc}
 80a2ea4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2ea8:	bf3c      	itt	cc
 80a2eaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2eae:	bd30      	popcc	{r4, r5, pc}
 80a2eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2eb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2ebc:	f04f 0000 	mov.w	r0, #0
 80a2ec0:	bd30      	pop	{r4, r5, pc}
 80a2ec2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2ec6:	bf1a      	itte	ne
 80a2ec8:	4619      	movne	r1, r3
 80a2eca:	4610      	movne	r0, r2
 80a2ecc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2ed0:	bf1c      	itt	ne
 80a2ed2:	460b      	movne	r3, r1
 80a2ed4:	4602      	movne	r2, r0
 80a2ed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2eda:	bf06      	itte	eq
 80a2edc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2ee0:	ea91 0f03 	teqeq	r1, r3
 80a2ee4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2ee8:	bd30      	pop	{r4, r5, pc}
 80a2eea:	bf00      	nop

080a2eec <__aeabi_ui2d>:
 80a2eec:	f090 0f00 	teq	r0, #0
 80a2ef0:	bf04      	itt	eq
 80a2ef2:	2100      	moveq	r1, #0
 80a2ef4:	4770      	bxeq	lr
 80a2ef6:	b530      	push	{r4, r5, lr}
 80a2ef8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2efc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f00:	f04f 0500 	mov.w	r5, #0
 80a2f04:	f04f 0100 	mov.w	r1, #0
 80a2f08:	e750      	b.n	80a2dac <__adddf3+0x138>
 80a2f0a:	bf00      	nop

080a2f0c <__aeabi_i2d>:
 80a2f0c:	f090 0f00 	teq	r0, #0
 80a2f10:	bf04      	itt	eq
 80a2f12:	2100      	moveq	r1, #0
 80a2f14:	4770      	bxeq	lr
 80a2f16:	b530      	push	{r4, r5, lr}
 80a2f18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2f20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2f24:	bf48      	it	mi
 80a2f26:	4240      	negmi	r0, r0
 80a2f28:	f04f 0100 	mov.w	r1, #0
 80a2f2c:	e73e      	b.n	80a2dac <__adddf3+0x138>
 80a2f2e:	bf00      	nop

080a2f30 <__aeabi_f2d>:
 80a2f30:	0042      	lsls	r2, r0, #1
 80a2f32:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2f36:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2f3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2f3e:	bf1f      	itttt	ne
 80a2f40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2f44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2f48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2f4c:	4770      	bxne	lr
 80a2f4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a2f52:	bf08      	it	eq
 80a2f54:	4770      	bxeq	lr
 80a2f56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a2f5a:	bf04      	itt	eq
 80a2f5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a2f60:	4770      	bxeq	lr
 80a2f62:	b530      	push	{r4, r5, lr}
 80a2f64:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2f68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2f6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2f70:	e71c      	b.n	80a2dac <__adddf3+0x138>
 80a2f72:	bf00      	nop

080a2f74 <__aeabi_ul2d>:
 80a2f74:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f78:	bf08      	it	eq
 80a2f7a:	4770      	bxeq	lr
 80a2f7c:	b530      	push	{r4, r5, lr}
 80a2f7e:	f04f 0500 	mov.w	r5, #0
 80a2f82:	e00a      	b.n	80a2f9a <__aeabi_l2d+0x16>

080a2f84 <__aeabi_l2d>:
 80a2f84:	ea50 0201 	orrs.w	r2, r0, r1
 80a2f88:	bf08      	it	eq
 80a2f8a:	4770      	bxeq	lr
 80a2f8c:	b530      	push	{r4, r5, lr}
 80a2f8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2f92:	d502      	bpl.n	80a2f9a <__aeabi_l2d+0x16>
 80a2f94:	4240      	negs	r0, r0
 80a2f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2f9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2fa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2fa6:	f43f aed8 	beq.w	80a2d5a <__adddf3+0xe6>
 80a2faa:	f04f 0203 	mov.w	r2, #3
 80a2fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2fb2:	bf18      	it	ne
 80a2fb4:	3203      	addne	r2, #3
 80a2fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2fba:	bf18      	it	ne
 80a2fbc:	3203      	addne	r2, #3
 80a2fbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2fc2:	f1c2 0320 	rsb	r3, r2, #32
 80a2fc6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2fca:	fa20 f002 	lsr.w	r0, r0, r2
 80a2fce:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2fd2:	ea40 000e 	orr.w	r0, r0, lr
 80a2fd6:	fa21 f102 	lsr.w	r1, r1, r2
 80a2fda:	4414      	add	r4, r2
 80a2fdc:	e6bd      	b.n	80a2d5a <__adddf3+0xe6>
 80a2fde:	bf00      	nop

080a2fe0 <__aeabi_dmul>:
 80a2fe0:	b570      	push	{r4, r5, r6, lr}
 80a2fe2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2fee:	bf1d      	ittte	ne
 80a2ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ff4:	ea94 0f0c 	teqne	r4, ip
 80a2ff8:	ea95 0f0c 	teqne	r5, ip
 80a2ffc:	f000 f8de 	bleq	80a31bc <__aeabi_dmul+0x1dc>
 80a3000:	442c      	add	r4, r5
 80a3002:	ea81 0603 	eor.w	r6, r1, r3
 80a3006:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a300a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a300e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3012:	bf18      	it	ne
 80a3014:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3018:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a301c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3020:	d038      	beq.n	80a3094 <__aeabi_dmul+0xb4>
 80a3022:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3026:	f04f 0500 	mov.w	r5, #0
 80a302a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a302e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3032:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3036:	f04f 0600 	mov.w	r6, #0
 80a303a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a303e:	f09c 0f00 	teq	ip, #0
 80a3042:	bf18      	it	ne
 80a3044:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3048:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a304c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3050:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3054:	d204      	bcs.n	80a3060 <__aeabi_dmul+0x80>
 80a3056:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a305a:	416d      	adcs	r5, r5
 80a305c:	eb46 0606 	adc.w	r6, r6, r6
 80a3060:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3064:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3068:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a306c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3070:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3074:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3078:	bf88      	it	hi
 80a307a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a307e:	d81e      	bhi.n	80a30be <__aeabi_dmul+0xde>
 80a3080:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3084:	bf08      	it	eq
 80a3086:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a308a:	f150 0000 	adcs.w	r0, r0, #0
 80a308e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3092:	bd70      	pop	{r4, r5, r6, pc}
 80a3094:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3098:	ea46 0101 	orr.w	r1, r6, r1
 80a309c:	ea40 0002 	orr.w	r0, r0, r2
 80a30a0:	ea81 0103 	eor.w	r1, r1, r3
 80a30a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a30a8:	bfc2      	ittt	gt
 80a30aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a30ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a30b2:	bd70      	popgt	{r4, r5, r6, pc}
 80a30b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a30b8:	f04f 0e00 	mov.w	lr, #0
 80a30bc:	3c01      	subs	r4, #1
 80a30be:	f300 80ab 	bgt.w	80a3218 <__aeabi_dmul+0x238>
 80a30c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a30c6:	bfde      	ittt	le
 80a30c8:	2000      	movle	r0, #0
 80a30ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a30ce:	bd70      	pople	{r4, r5, r6, pc}
 80a30d0:	f1c4 0400 	rsb	r4, r4, #0
 80a30d4:	3c20      	subs	r4, #32
 80a30d6:	da35      	bge.n	80a3144 <__aeabi_dmul+0x164>
 80a30d8:	340c      	adds	r4, #12
 80a30da:	dc1b      	bgt.n	80a3114 <__aeabi_dmul+0x134>
 80a30dc:	f104 0414 	add.w	r4, r4, #20
 80a30e0:	f1c4 0520 	rsb	r5, r4, #32
 80a30e4:	fa00 f305 	lsl.w	r3, r0, r5
 80a30e8:	fa20 f004 	lsr.w	r0, r0, r4
 80a30ec:	fa01 f205 	lsl.w	r2, r1, r5
 80a30f0:	ea40 0002 	orr.w	r0, r0, r2
 80a30f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a30f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a30fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3100:	fa21 f604 	lsr.w	r6, r1, r4
 80a3104:	eb42 0106 	adc.w	r1, r2, r6
 80a3108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a310c:	bf08      	it	eq
 80a310e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3112:	bd70      	pop	{r4, r5, r6, pc}
 80a3114:	f1c4 040c 	rsb	r4, r4, #12
 80a3118:	f1c4 0520 	rsb	r5, r4, #32
 80a311c:	fa00 f304 	lsl.w	r3, r0, r4
 80a3120:	fa20 f005 	lsr.w	r0, r0, r5
 80a3124:	fa01 f204 	lsl.w	r2, r1, r4
 80a3128:	ea40 0002 	orr.w	r0, r0, r2
 80a312c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3130:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3134:	f141 0100 	adc.w	r1, r1, #0
 80a3138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a313c:	bf08      	it	eq
 80a313e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3142:	bd70      	pop	{r4, r5, r6, pc}
 80a3144:	f1c4 0520 	rsb	r5, r4, #32
 80a3148:	fa00 f205 	lsl.w	r2, r0, r5
 80a314c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3150:	fa20 f304 	lsr.w	r3, r0, r4
 80a3154:	fa01 f205 	lsl.w	r2, r1, r5
 80a3158:	ea43 0302 	orr.w	r3, r3, r2
 80a315c:	fa21 f004 	lsr.w	r0, r1, r4
 80a3160:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3164:	fa21 f204 	lsr.w	r2, r1, r4
 80a3168:	ea20 0002 	bic.w	r0, r0, r2
 80a316c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3170:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3174:	bf08      	it	eq
 80a3176:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a317a:	bd70      	pop	{r4, r5, r6, pc}
 80a317c:	f094 0f00 	teq	r4, #0
 80a3180:	d10f      	bne.n	80a31a2 <__aeabi_dmul+0x1c2>
 80a3182:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3186:	0040      	lsls	r0, r0, #1
 80a3188:	eb41 0101 	adc.w	r1, r1, r1
 80a318c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3190:	bf08      	it	eq
 80a3192:	3c01      	subeq	r4, #1
 80a3194:	d0f7      	beq.n	80a3186 <__aeabi_dmul+0x1a6>
 80a3196:	ea41 0106 	orr.w	r1, r1, r6
 80a319a:	f095 0f00 	teq	r5, #0
 80a319e:	bf18      	it	ne
 80a31a0:	4770      	bxne	lr
 80a31a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a31a6:	0052      	lsls	r2, r2, #1
 80a31a8:	eb43 0303 	adc.w	r3, r3, r3
 80a31ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a31b0:	bf08      	it	eq
 80a31b2:	3d01      	subeq	r5, #1
 80a31b4:	d0f7      	beq.n	80a31a6 <__aeabi_dmul+0x1c6>
 80a31b6:	ea43 0306 	orr.w	r3, r3, r6
 80a31ba:	4770      	bx	lr
 80a31bc:	ea94 0f0c 	teq	r4, ip
 80a31c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a31c4:	bf18      	it	ne
 80a31c6:	ea95 0f0c 	teqne	r5, ip
 80a31ca:	d00c      	beq.n	80a31e6 <__aeabi_dmul+0x206>
 80a31cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a31d0:	bf18      	it	ne
 80a31d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a31d6:	d1d1      	bne.n	80a317c <__aeabi_dmul+0x19c>
 80a31d8:	ea81 0103 	eor.w	r1, r1, r3
 80a31dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a31e0:	f04f 0000 	mov.w	r0, #0
 80a31e4:	bd70      	pop	{r4, r5, r6, pc}
 80a31e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a31ea:	bf06      	itte	eq
 80a31ec:	4610      	moveq	r0, r2
 80a31ee:	4619      	moveq	r1, r3
 80a31f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a31f4:	d019      	beq.n	80a322a <__aeabi_dmul+0x24a>
 80a31f6:	ea94 0f0c 	teq	r4, ip
 80a31fa:	d102      	bne.n	80a3202 <__aeabi_dmul+0x222>
 80a31fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3200:	d113      	bne.n	80a322a <__aeabi_dmul+0x24a>
 80a3202:	ea95 0f0c 	teq	r5, ip
 80a3206:	d105      	bne.n	80a3214 <__aeabi_dmul+0x234>
 80a3208:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a320c:	bf1c      	itt	ne
 80a320e:	4610      	movne	r0, r2
 80a3210:	4619      	movne	r1, r3
 80a3212:	d10a      	bne.n	80a322a <__aeabi_dmul+0x24a>
 80a3214:	ea81 0103 	eor.w	r1, r1, r3
 80a3218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a321c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3220:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3224:	f04f 0000 	mov.w	r0, #0
 80a3228:	bd70      	pop	{r4, r5, r6, pc}
 80a322a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a322e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3232:	bd70      	pop	{r4, r5, r6, pc}

080a3234 <__aeabi_ddiv>:
 80a3234:	b570      	push	{r4, r5, r6, lr}
 80a3236:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a323a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a323e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3242:	bf1d      	ittte	ne
 80a3244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3248:	ea94 0f0c 	teqne	r4, ip
 80a324c:	ea95 0f0c 	teqne	r5, ip
 80a3250:	f000 f8a7 	bleq	80a33a2 <__aeabi_ddiv+0x16e>
 80a3254:	eba4 0405 	sub.w	r4, r4, r5
 80a3258:	ea81 0e03 	eor.w	lr, r1, r3
 80a325c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3264:	f000 8088 	beq.w	80a3378 <__aeabi_ddiv+0x144>
 80a3268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a326c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3270:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3274:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3278:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a327c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3280:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3284:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3288:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a328c:	429d      	cmp	r5, r3
 80a328e:	bf08      	it	eq
 80a3290:	4296      	cmpeq	r6, r2
 80a3292:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3296:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a329a:	d202      	bcs.n	80a32a2 <__aeabi_ddiv+0x6e>
 80a329c:	085b      	lsrs	r3, r3, #1
 80a329e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32a2:	1ab6      	subs	r6, r6, r2
 80a32a4:	eb65 0503 	sbc.w	r5, r5, r3
 80a32a8:	085b      	lsrs	r3, r3, #1
 80a32aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a32b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a32b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32be:	bf22      	ittt	cs
 80a32c0:	1ab6      	subcs	r6, r6, r2
 80a32c2:	4675      	movcs	r5, lr
 80a32c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a32c8:	085b      	lsrs	r3, r3, #1
 80a32ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32d6:	bf22      	ittt	cs
 80a32d8:	1ab6      	subcs	r6, r6, r2
 80a32da:	4675      	movcs	r5, lr
 80a32dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a32e0:	085b      	lsrs	r3, r3, #1
 80a32e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a32ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a32ee:	bf22      	ittt	cs
 80a32f0:	1ab6      	subcs	r6, r6, r2
 80a32f2:	4675      	movcs	r5, lr
 80a32f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a32f8:	085b      	lsrs	r3, r3, #1
 80a32fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a32fe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3302:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3306:	bf22      	ittt	cs
 80a3308:	1ab6      	subcs	r6, r6, r2
 80a330a:	4675      	movcs	r5, lr
 80a330c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3310:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3314:	d018      	beq.n	80a3348 <__aeabi_ddiv+0x114>
 80a3316:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a331a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a331e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3322:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3326:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a332a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a332e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3332:	d1c0      	bne.n	80a32b6 <__aeabi_ddiv+0x82>
 80a3334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3338:	d10b      	bne.n	80a3352 <__aeabi_ddiv+0x11e>
 80a333a:	ea41 0100 	orr.w	r1, r1, r0
 80a333e:	f04f 0000 	mov.w	r0, #0
 80a3342:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3346:	e7b6      	b.n	80a32b6 <__aeabi_ddiv+0x82>
 80a3348:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a334c:	bf04      	itt	eq
 80a334e:	4301      	orreq	r1, r0
 80a3350:	2000      	moveq	r0, #0
 80a3352:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3356:	bf88      	it	hi
 80a3358:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a335c:	f63f aeaf 	bhi.w	80a30be <__aeabi_dmul+0xde>
 80a3360:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3364:	bf04      	itt	eq
 80a3366:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a336a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a336e:	f150 0000 	adcs.w	r0, r0, #0
 80a3372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3376:	bd70      	pop	{r4, r5, r6, pc}
 80a3378:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a337c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3380:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3384:	bfc2      	ittt	gt
 80a3386:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a338a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a338e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3394:	f04f 0e00 	mov.w	lr, #0
 80a3398:	3c01      	subs	r4, #1
 80a339a:	e690      	b.n	80a30be <__aeabi_dmul+0xde>
 80a339c:	ea45 0e06 	orr.w	lr, r5, r6
 80a33a0:	e68d      	b.n	80a30be <__aeabi_dmul+0xde>
 80a33a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a33a6:	ea94 0f0c 	teq	r4, ip
 80a33aa:	bf08      	it	eq
 80a33ac:	ea95 0f0c 	teqeq	r5, ip
 80a33b0:	f43f af3b 	beq.w	80a322a <__aeabi_dmul+0x24a>
 80a33b4:	ea94 0f0c 	teq	r4, ip
 80a33b8:	d10a      	bne.n	80a33d0 <__aeabi_ddiv+0x19c>
 80a33ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a33be:	f47f af34 	bne.w	80a322a <__aeabi_dmul+0x24a>
 80a33c2:	ea95 0f0c 	teq	r5, ip
 80a33c6:	f47f af25 	bne.w	80a3214 <__aeabi_dmul+0x234>
 80a33ca:	4610      	mov	r0, r2
 80a33cc:	4619      	mov	r1, r3
 80a33ce:	e72c      	b.n	80a322a <__aeabi_dmul+0x24a>
 80a33d0:	ea95 0f0c 	teq	r5, ip
 80a33d4:	d106      	bne.n	80a33e4 <__aeabi_ddiv+0x1b0>
 80a33d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a33da:	f43f aefd 	beq.w	80a31d8 <__aeabi_dmul+0x1f8>
 80a33de:	4610      	mov	r0, r2
 80a33e0:	4619      	mov	r1, r3
 80a33e2:	e722      	b.n	80a322a <__aeabi_dmul+0x24a>
 80a33e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a33e8:	bf18      	it	ne
 80a33ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a33ee:	f47f aec5 	bne.w	80a317c <__aeabi_dmul+0x19c>
 80a33f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a33f6:	f47f af0d 	bne.w	80a3214 <__aeabi_dmul+0x234>
 80a33fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a33fe:	f47f aeeb 	bne.w	80a31d8 <__aeabi_dmul+0x1f8>
 80a3402:	e712      	b.n	80a322a <__aeabi_dmul+0x24a>

080a3404 <__aeabi_d2uiz>:
 80a3404:	004a      	lsls	r2, r1, #1
 80a3406:	d211      	bcs.n	80a342c <__aeabi_d2uiz+0x28>
 80a3408:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a340c:	d211      	bcs.n	80a3432 <__aeabi_d2uiz+0x2e>
 80a340e:	d50d      	bpl.n	80a342c <__aeabi_d2uiz+0x28>
 80a3410:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3414:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3418:	d40e      	bmi.n	80a3438 <__aeabi_d2uiz+0x34>
 80a341a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a341e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3422:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3426:	fa23 f002 	lsr.w	r0, r3, r2
 80a342a:	4770      	bx	lr
 80a342c:	f04f 0000 	mov.w	r0, #0
 80a3430:	4770      	bx	lr
 80a3432:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3436:	d102      	bne.n	80a343e <__aeabi_d2uiz+0x3a>
 80a3438:	f04f 30ff 	mov.w	r0, #4294967295
 80a343c:	4770      	bx	lr
 80a343e:	f04f 0000 	mov.w	r0, #0
 80a3442:	4770      	bx	lr

080a3444 <__cxa_atexit>:
 80a3444:	b510      	push	{r4, lr}
 80a3446:	4604      	mov	r4, r0
 80a3448:	4804      	ldr	r0, [pc, #16]	; (80a345c <__cxa_atexit+0x18>)
 80a344a:	4613      	mov	r3, r2
 80a344c:	b120      	cbz	r0, 80a3458 <__cxa_atexit+0x14>
 80a344e:	460a      	mov	r2, r1
 80a3450:	2002      	movs	r0, #2
 80a3452:	4621      	mov	r1, r4
 80a3454:	f3af 8000 	nop.w
 80a3458:	bd10      	pop	{r4, pc}
 80a345a:	bf00      	nop
 80a345c:	00000000 	.word	0x00000000

080a3460 <memcpy>:
 80a3460:	440a      	add	r2, r1
 80a3462:	4291      	cmp	r1, r2
 80a3464:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3468:	d100      	bne.n	80a346c <memcpy+0xc>
 80a346a:	4770      	bx	lr
 80a346c:	b510      	push	{r4, lr}
 80a346e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3472:	4291      	cmp	r1, r2
 80a3474:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a3478:	d1f9      	bne.n	80a346e <memcpy+0xe>
 80a347a:	bd10      	pop	{r4, pc}

080a347c <memmove>:
 80a347c:	4288      	cmp	r0, r1
 80a347e:	b510      	push	{r4, lr}
 80a3480:	eb01 0402 	add.w	r4, r1, r2
 80a3484:	d902      	bls.n	80a348c <memmove+0x10>
 80a3486:	4284      	cmp	r4, r0
 80a3488:	4623      	mov	r3, r4
 80a348a:	d807      	bhi.n	80a349c <memmove+0x20>
 80a348c:	1e43      	subs	r3, r0, #1
 80a348e:	42a1      	cmp	r1, r4
 80a3490:	d008      	beq.n	80a34a4 <memmove+0x28>
 80a3492:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3496:	f803 2f01 	strb.w	r2, [r3, #1]!
 80a349a:	e7f8      	b.n	80a348e <memmove+0x12>
 80a349c:	4601      	mov	r1, r0
 80a349e:	4402      	add	r2, r0
 80a34a0:	428a      	cmp	r2, r1
 80a34a2:	d100      	bne.n	80a34a6 <memmove+0x2a>
 80a34a4:	bd10      	pop	{r4, pc}
 80a34a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a34aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80a34ae:	e7f7      	b.n	80a34a0 <memmove+0x24>

080a34b0 <memset>:
 80a34b0:	4603      	mov	r3, r0
 80a34b2:	4402      	add	r2, r0
 80a34b4:	4293      	cmp	r3, r2
 80a34b6:	d100      	bne.n	80a34ba <memset+0xa>
 80a34b8:	4770      	bx	lr
 80a34ba:	f803 1b01 	strb.w	r1, [r3], #1
 80a34be:	e7f9      	b.n	80a34b4 <memset+0x4>

080a34c0 <srand>:
 80a34c0:	b538      	push	{r3, r4, r5, lr}
 80a34c2:	4b0d      	ldr	r3, [pc, #52]	; (80a34f8 <srand+0x38>)
 80a34c4:	4604      	mov	r4, r0
 80a34c6:	681d      	ldr	r5, [r3, #0]
 80a34c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a34ca:	b97b      	cbnz	r3, 80a34ec <srand+0x2c>
 80a34cc:	2018      	movs	r0, #24
 80a34ce:	f7fe f84b 	bl	80a1568 <malloc>
 80a34d2:	4a0a      	ldr	r2, [pc, #40]	; (80a34fc <srand+0x3c>)
 80a34d4:	4b0a      	ldr	r3, [pc, #40]	; (80a3500 <srand+0x40>)
 80a34d6:	63a8      	str	r0, [r5, #56]	; 0x38
 80a34d8:	e9c0 2300 	strd	r2, r3, [r0]
 80a34dc:	4b09      	ldr	r3, [pc, #36]	; (80a3504 <srand+0x44>)
 80a34de:	2201      	movs	r2, #1
 80a34e0:	6083      	str	r3, [r0, #8]
 80a34e2:	230b      	movs	r3, #11
 80a34e4:	8183      	strh	r3, [r0, #12]
 80a34e6:	2300      	movs	r3, #0
 80a34e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a34ec:	2200      	movs	r2, #0
 80a34ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a34f0:	611c      	str	r4, [r3, #16]
 80a34f2:	615a      	str	r2, [r3, #20]
 80a34f4:	bd38      	pop	{r3, r4, r5, pc}
 80a34f6:	bf00      	nop
 80a34f8:	20000008 	.word	0x20000008
 80a34fc:	abcd330e 	.word	0xabcd330e
 80a3500:	e66d1234 	.word	0xe66d1234
 80a3504:	0005deec 	.word	0x0005deec

080a3508 <strcpy>:
 80a3508:	4603      	mov	r3, r0
 80a350a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a350e:	f803 2b01 	strb.w	r2, [r3], #1
 80a3512:	2a00      	cmp	r2, #0
 80a3514:	d1f9      	bne.n	80a350a <strcpy+0x2>
 80a3516:	4770      	bx	lr

080a3518 <strdup>:
 80a3518:	4b02      	ldr	r3, [pc, #8]	; (80a3524 <strdup+0xc>)
 80a351a:	4601      	mov	r1, r0
 80a351c:	6818      	ldr	r0, [r3, #0]
 80a351e:	f000 b803 	b.w	80a3528 <_strdup_r>
 80a3522:	bf00      	nop
 80a3524:	20000008 	.word	0x20000008

080a3528 <_strdup_r>:
 80a3528:	b570      	push	{r4, r5, r6, lr}
 80a352a:	4604      	mov	r4, r0
 80a352c:	4608      	mov	r0, r1
 80a352e:	460d      	mov	r5, r1
 80a3530:	f000 f80d 	bl	80a354e <strlen>
 80a3534:	1c46      	adds	r6, r0, #1
 80a3536:	4631      	mov	r1, r6
 80a3538:	4620      	mov	r0, r4
 80a353a:	f7fe f835 	bl	80a15a8 <_malloc_r>
 80a353e:	4604      	mov	r4, r0
 80a3540:	b118      	cbz	r0, 80a354a <_strdup_r+0x22>
 80a3542:	4632      	mov	r2, r6
 80a3544:	4629      	mov	r1, r5
 80a3546:	f7ff ff8b 	bl	80a3460 <memcpy>
 80a354a:	4620      	mov	r0, r4
 80a354c:	bd70      	pop	{r4, r5, r6, pc}

080a354e <strlen>:
 80a354e:	4603      	mov	r3, r0
 80a3550:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3554:	2a00      	cmp	r2, #0
 80a3556:	d1fb      	bne.n	80a3550 <strlen+0x2>
 80a3558:	1a18      	subs	r0, r3, r0
 80a355a:	3801      	subs	r0, #1
 80a355c:	4770      	bx	lr

080a355e <strncpy>:
 80a355e:	4603      	mov	r3, r0
 80a3560:	b510      	push	{r4, lr}
 80a3562:	3901      	subs	r1, #1
 80a3564:	b132      	cbz	r2, 80a3574 <strncpy+0x16>
 80a3566:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a356a:	3a01      	subs	r2, #1
 80a356c:	f803 4b01 	strb.w	r4, [r3], #1
 80a3570:	2c00      	cmp	r4, #0
 80a3572:	d1f7      	bne.n	80a3564 <strncpy+0x6>
 80a3574:	2100      	movs	r1, #0
 80a3576:	441a      	add	r2, r3
 80a3578:	4293      	cmp	r3, r2
 80a357a:	d100      	bne.n	80a357e <strncpy+0x20>
 80a357c:	bd10      	pop	{r4, pc}
 80a357e:	f803 1b01 	strb.w	r1, [r3], #1
 80a3582:	e7f9      	b.n	80a3578 <strncpy+0x1a>

080a3584 <strstr>:
 80a3584:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3586:	780c      	ldrb	r4, [r1, #0]
 80a3588:	b164      	cbz	r4, 80a35a4 <strstr+0x20>
 80a358a:	4603      	mov	r3, r0
 80a358c:	781a      	ldrb	r2, [r3, #0]
 80a358e:	4618      	mov	r0, r3
 80a3590:	1c5e      	adds	r6, r3, #1
 80a3592:	b90a      	cbnz	r2, 80a3598 <strstr+0x14>
 80a3594:	4610      	mov	r0, r2
 80a3596:	e005      	b.n	80a35a4 <strstr+0x20>
 80a3598:	4294      	cmp	r4, r2
 80a359a:	d108      	bne.n	80a35ae <strstr+0x2a>
 80a359c:	460d      	mov	r5, r1
 80a359e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a35a2:	b902      	cbnz	r2, 80a35a6 <strstr+0x22>
 80a35a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a35a6:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80a35aa:	4297      	cmp	r7, r2
 80a35ac:	d0f7      	beq.n	80a359e <strstr+0x1a>
 80a35ae:	4633      	mov	r3, r6
 80a35b0:	e7ec      	b.n	80a358c <strstr+0x8>

080a35b2 <link_code_end>:
	...

080a35b4 <dynalib_user>:
 80a35b4:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a35c4:	0000 0000 6553 746e 7420 206f 6c63 756f     ....Sent to clou
 80a35d4:	3a64 0020 530a 4e45 2054 4c41 0a4c 4f00     d: ..SENT ALL..O
 80a35e4:	6c77 6f4e 6564 535f 7379 6574 306d 0031     wlNode_System01.
 80a35f4:	6e69 7469 6620 6961 656c 0064 614d 2078     init failed.Max 
 80a3604:	6f6c 6172 6d20 7365 6173 6567 6c20 6e65     lora message len
 80a3614:	7467 2068 7369 203a 4600 6e69 7369 6568     gth is: .Finishe
 80a3624:	2064 6553 7574 2070 6f6c 706f 002e 2a2a     d Setup loop..**
 80a3634:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
 80a3644:	2a2a 2a2a 2a2a 6700 746f 7220 7165 6575     ******.got reque
 80a3654:	7473 203a 7b00 4400 0076 6444 2c00 5322     st: .{.Dv.Dd.,"S
 80a3664:	2269 203a 0022 2022 2c00 4422 2276 203a     i": "." .,"Dv": 
 80a3674:	5322 7265 6576 3072 2231 7d20 4900 2044     "Server01" }.ID 
 80a3684:	726f 6d20 7365 6173 6567 6e20 746f 6620     or message not f
 80a3694:	756f 646e 202e 6f4e 7220 7065 796c 6d20     ound. No reply m
 80a36a4:	7365 6173 6567 7320 6e65 2e74 5300 6e65     essage sent..Sen
 80a36b4:	2074 002d 202d 7361 6120 7220 7065 796c     t -.- as a reply
 80a36c4:	002e 6f4e 7320 6174 7472 6f20 2072 6e65     ..No start or en
 80a36d4:	2064 7262 6361 656b 2074 6f66 6e75 2c64     d bracket found,
 80a36e4:	6e20 206f 6572 6c70 2079 656d 7373 6761      no reply messag
 80a36f4:	2065 6573 746e 002e 6572 7663 6620 6961     e sent..recv fai
 80a3704:	656c 0064                                   led.

080a3708 <_ZTV5Timer>:
	...
 80a3710:	0185 080a 01cd 080a 010d 080a               ............

080a371c <_ZTV15RHGenericDriver>:
	...
 80a3724:	07bf 080a 00a9 080a 00a9 080a 00a9 080a     ................
 80a3734:	00a9 080a 07c3 080a 07d5 080a 083b 080a     ............;...
 80a3744:	0813 080a 07e3 080a 07e7 080a 07eb 080a     ................
 80a3754:	07ef 080a 07f3 080a 07df 080a 07ff 080a     ................
 80a3764:	0803 080a 0807 080a 080b 080a 080f 080a     ................
 80a3774:	4548 4552 0000 0000                         HERE....

080a377c <_ZTV13RHHardwareSPI>:
	...
 80a3784:	08f5 080a 088b 080a 088b 080a 092d 080a     ............-...
 80a3794:	0907 080a 09b9 080a 09bd 080a 09c1 080a     ................
 80a37a4:	0887 080a 0889 080a                         ........

080a37ac <_ZTV12RHGenericSPI>:
	...
 80a37b4:	00a9 080a 09b5 080a 09b7 080a 00a9 080a     ................
 80a37c4:	00a9 080a 09b9 080a 09bd 080a 09c1 080a     ................
 80a37d4:	0887 080a 0889 080a                         ........

080a37dc <_ZL18MODEM_CONFIG_TABLE>:
 80a37dc:	7472 9200 0074 9448 7800 00c4 9478 0000     rt..t.H..x..x...

080a37ec <_ZTV7RH_RF95>:
	...
 80a37f4:	0db9 080a 0c3b 080a 0a75 080a 0c79 080a     ....;...u...y...
 80a3804:	09d9 080a 07c3 080a 07d5 080a 083b 080a     ............;...
 80a3814:	0813 080a 07e3 080a 07e7 080a 07eb 080a     ................
 80a3824:	07ef 080a 07f3 080a 07df 080a 07ff 080a     ................
 80a3834:	0803 080a 0807 080a 080b 080a 09dd 080a     ................

080a3844 <_ZTV11RHSPIDriver>:
	...
 80a384c:	0e99 080a 00a9 080a 00a9 080a 00a9 080a     ................
 80a385c:	00a9 080a 07c3 080a 07d5 080a 083b 080a     ............;...
 80a386c:	0813 080a 07e3 080a 07e7 080a 07eb 080a     ................
 80a387c:	07ef 080a 07f3 080a 07df 080a 07ff 080a     ................
 80a388c:	0803 080a 0807 080a 080b 080a 080f 080a     ................

080a389c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a389c:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
 80a38ac:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a38bc:	7361 7463 6d69 0065                         asctime.

080a38c4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a38cc:	1fa5 080a 1fab 080a 1fe9 080a 1fb9 080a     ................
 80a38dc:	1fa7 080a                                   ....

080a38e0 <_ZTV9IPAddress>:
	...
 80a38e8:	24ed 080a 24dd 080a 24df 080a               .$...$...$..

080a38f4 <_ZTV9USBSerial>:
	...
 80a38fc:	25a9 080a 260f 080a 25e7 080a 1c6b 080a     .%...&...%..k...
 80a390c:	25d9 080a 25ab 080a 25bb 080a 2609 080a     .%...%...%...&..
 80a391c:	25cb 080a 25a5 080a                         .%...%..

080a3924 <_ZTV11USARTSerial>:
	...
 80a392c:	2765 080a 27cd 080a 27a9 080a 1c6b 080a     e'...'...'..k...
 80a393c:	2779 080a 2795 080a 2787 080a 27a3 080a     y'...'...'...'..
 80a394c:	2767 080a 276b 080a                         g'..k'..

080a3954 <_ZTV7TwoWire>:
	...
 80a395c:	28b5 080a 28ff 080a 28d7 080a 28b7 080a     .(...(...(...(..
 80a396c:	28df 080a 28e7 080a 28ef 080a 28f7 080a     .(...(...(...(..

080a397c <_ZTVN5spark9WiFiClassE>:
	...
 80a3984:	29c7 080a 29bd 080a 29b3 080a 2931 080a     .)...)...)..1)..
 80a3994:	1d2b 080a 29a7 080a 2a25 080a 2a2d 080a     +....)..%*..-*..
 80a39a4:	299b 080a 2993 080a 2989 080a 297f 080a     .)...)...)...)..
 80a39b4:	293b 080a                                   ;)..

080a39b8 <_ZTVN5spark12NetworkClassE>:
	...
 80a39c0:	29e5 080a 29ef 080a 29f9 080a 2a03 080a     .)...)...)...*..
 80a39d0:	2a0d 080a 2a19 080a 2a25 080a 2a2d 080a     .*...*..%*..-*..
 80a39e0:	2a35 080a 2a41 080a 2a49 080a 2a53 080a     5*..A*..I*..S*..
 80a39f0:	2a5d 080a                                   ]*..

080a39f4 <_ZSt7nothrow>:
	...

080a39f5 <link_const_variable_data_end>:
 80a39f5:	00          	.byte	0x00
	...

080a39f8 <link_constructors_location>:
 80a39f8:	080a0305 	.word	0x080a0305
 80a39fc:	080a09a5 	.word	0x080a09a5
 80a3a00:	080a1709 	.word	0x080a1709
 80a3a04:	080a1d71 	.word	0x080a1d71
 80a3a08:	080a1df5 	.word	0x080a1df5
 80a3a0c:	080a1e3d 	.word	0x080a1e3d
 80a3a10:	080a29d1 	.word	0x080a29d1
 80a3a14:	080a2aad 	.word	0x080a2aad
 80a3a18:	080a2ba1 	.word	0x080a2ba1

080a3a1c <link_constructors_end>:
 80a3a1c:	00000000 	.word	0x00000000
